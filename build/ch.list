
build/ch.elf:     file format elf32-littlearm


Disassembly of section .vectors:

08000000 <_vectors>:
 8000000:	20000400 	.word	0x20000400
 8000004:	08000379 	.word	0x08000379
 8000008:	0800037b 	.word	0x0800037b
 800000c:	0800037b 	.word	0x0800037b
 8000010:	0800037b 	.word	0x0800037b
 8000014:	0800037b 	.word	0x0800037b
 8000018:	0800037b 	.word	0x0800037b
 800001c:	0800037b 	.word	0x0800037b
 8000020:	0800037b 	.word	0x0800037b
 8000024:	0800037b 	.word	0x0800037b
 8000028:	0800037b 	.word	0x0800037b
 800002c:	08003761 	.word	0x08003761
 8000030:	0800037b 	.word	0x0800037b
 8000034:	0800037b 	.word	0x0800037b
 8000038:	0800037b 	.word	0x0800037b
 800003c:	0800037b 	.word	0x0800037b
 8000040:	0800037b 	.word	0x0800037b
 8000044:	0800037b 	.word	0x0800037b
 8000048:	0800037b 	.word	0x0800037b
 800004c:	0800037b 	.word	0x0800037b
 8000050:	0800037b 	.word	0x0800037b
 8000054:	0800037b 	.word	0x0800037b
 8000058:	0800037b 	.word	0x0800037b
 800005c:	0800037b 	.word	0x0800037b
 8000060:	0800037b 	.word	0x0800037b
 8000064:	0800037b 	.word	0x0800037b
 8000068:	0800037b 	.word	0x0800037b
 800006c:	08004551 	.word	0x08004551
 8000070:	08004511 	.word	0x08004511
 8000074:	080044d1 	.word	0x080044d1
 8000078:	08004491 	.word	0x08004491
 800007c:	08004451 	.word	0x08004451
 8000080:	08004411 	.word	0x08004411
 8000084:	080043d1 	.word	0x080043d1
 8000088:	0800037b 	.word	0x0800037b
 800008c:	0800037b 	.word	0x0800037b
 8000090:	0800037b 	.word	0x0800037b
 8000094:	0800037b 	.word	0x0800037b
 8000098:	0800037b 	.word	0x0800037b
 800009c:	0800037b 	.word	0x0800037b
 80000a0:	0800037b 	.word	0x0800037b
 80000a4:	0800037b 	.word	0x0800037b
 80000a8:	0800037b 	.word	0x0800037b
 80000ac:	0800037b 	.word	0x0800037b
 80000b0:	08004791 	.word	0x08004791
 80000b4:	0800037b 	.word	0x0800037b
 80000b8:	0800037b 	.word	0x0800037b
 80000bc:	0800037b 	.word	0x0800037b
 80000c0:	0800037b 	.word	0x0800037b
 80000c4:	0800037b 	.word	0x0800037b
 80000c8:	0800037b 	.word	0x0800037b
 80000cc:	08003c51 	.word	0x08003c51
 80000d0:	0800037b 	.word	0x0800037b
 80000d4:	0800037b 	.word	0x0800037b
 80000d8:	0800037b 	.word	0x0800037b
 80000dc:	08004861 	.word	0x08004861
 80000e0:	0800037b 	.word	0x0800037b
 80000e4:	0800037b 	.word	0x0800037b
 80000e8:	0800037b 	.word	0x0800037b
 80000ec:	0800037b 	.word	0x0800037b
 80000f0:	0800037b 	.word	0x0800037b
 80000f4:	0800037b 	.word	0x0800037b
 80000f8:	0800037b 	.word	0x0800037b
 80000fc:	08004391 	.word	0x08004391
 8000100:	0800037b 	.word	0x0800037b
 8000104:	08004a01 	.word	0x08004a01
 8000108:	0800037b 	.word	0x0800037b
 800010c:	0800037b 	.word	0x0800037b
 8000110:	0800037b 	.word	0x0800037b
 8000114:	0800037b 	.word	0x0800037b
 8000118:	0800037b 	.word	0x0800037b
 800011c:	0800037b 	.word	0x0800037b
 8000120:	08004351 	.word	0x08004351
 8000124:	08004311 	.word	0x08004311
 8000128:	080042d1 	.word	0x080042d1
 800012c:	08004291 	.word	0x08004291
 8000130:	08004251 	.word	0x08004251
 8000134:	0800037b 	.word	0x0800037b
 8000138:	0800037b 	.word	0x0800037b
 800013c:	0800037b 	.word	0x0800037b
 8000140:	0800037b 	.word	0x0800037b
 8000144:	0800037b 	.word	0x0800037b
 8000148:	0800037b 	.word	0x0800037b
 800014c:	0800037b 	.word	0x0800037b
 8000150:	08004211 	.word	0x08004211
 8000154:	080041d1 	.word	0x080041d1
 8000158:	08004191 	.word	0x08004191
 800015c:	0800037b 	.word	0x0800037b
 8000160:	0800037b 	.word	0x0800037b
 8000164:	0800037b 	.word	0x0800037b
 8000168:	0800037b 	.word	0x0800037b
 800016c:	0800037b 	.word	0x0800037b
 8000170:	0800037b 	.word	0x0800037b
 8000174:	0800037b 	.word	0x0800037b
 8000178:	0800037b 	.word	0x0800037b
 800017c:	0800037b 	.word	0x0800037b
 8000180:	0800037b 	.word	0x0800037b
 8000184:	0800037b 	.word	0x0800037b
 8000188:	0800037b 	.word	0x0800037b
 800018c:	0800037b 	.word	0x0800037b
 8000190:	0800037b 	.word	0x0800037b
 8000194:	0800037b 	.word	0x0800037b
 8000198:	08003c21 	.word	0x08003c21
 800019c:	0800037b 	.word	0x0800037b
 80001a0:	0800037b 	.word	0x0800037b
 80001a4:	0800037b 	.word	0x0800037b
 80001a8:	0800037b 	.word	0x0800037b
 80001ac:	0800037b 	.word	0x0800037b
 80001b0:	0800037b 	.word	0x0800037b
 80001b4:	0800037b 	.word	0x0800037b
 80001b8:	0800037b 	.word	0x0800037b
 80001bc:	0800037b 	.word	0x0800037b
 80001c0:	0800037b 	.word	0x0800037b
 80001c4:	0800037b 	.word	0x0800037b
 80001c8:	0800037b 	.word	0x0800037b
 80001cc:	0800037b 	.word	0x0800037b
 80001d0:	0800037b 	.word	0x0800037b
 80001d4:	08003c81 	.word	0x08003c81
 80001d8:	0800037b 	.word	0x0800037b
 80001dc:	0800037b 	.word	0x0800037b
 80001e0:	0800037b 	.word	0x0800037b
 80001e4:	0800037b 	.word	0x0800037b
 80001e8:	0800037b 	.word	0x0800037b
 80001ec:	0800037b 	.word	0x0800037b
 80001f0:	0800037b 	.word	0x0800037b
 80001f4:	0800037b 	.word	0x0800037b
 80001f8:	0800037b 	.word	0x0800037b
 80001fc:	0800037b 	.word	0x0800037b
 8000200:	0800037b 	.word	0x0800037b
 8000204:	0800037b 	.word	0x0800037b
 8000208:	0800037b 	.word	0x0800037b
 800020c:	0800037b 	.word	0x0800037b
 8000210:	0800037b 	.word	0x0800037b
 8000214:	0800037b 	.word	0x0800037b
 8000218:	0800037b 	.word	0x0800037b
 800021c:	0800037b 	.word	0x0800037b
 8000220:	0800037b 	.word	0x0800037b
 8000224:	0800037b 	.word	0x0800037b
 8000228:	0800037b 	.word	0x0800037b
 800022c:	0800037b 	.word	0x0800037b
 8000230:	0800037b 	.word	0x0800037b
 8000234:	0800037b 	.word	0x0800037b
 8000238:	0800037b 	.word	0x0800037b
 800023c:	0800037b 	.word	0x0800037b
 8000240:	0800037b 	.word	0x0800037b
 8000244:	08004751 	.word	0x08004751
 8000248:	08004711 	.word	0x08004711
 800024c:	080046d1 	.word	0x080046d1
 8000250:	08004691 	.word	0x08004691
 8000254:	08004651 	.word	0x08004651
 8000258:	08004611 	.word	0x08004611
 800025c:	080045d1 	.word	0x080045d1
 8000260:	08004591 	.word	0x08004591
 8000264:	0800037b 	.word	0x0800037b
 8000268:	0800037b 	.word	0x0800037b
 800026c:	0800037b 	.word	0x0800037b
 8000270:	0800037b 	.word	0x0800037b
 8000274:	0800037b 	.word	0x0800037b
 8000278:	0800037b 	.word	0x0800037b
 800027c:	0800037b 	.word	0x0800037b
 8000280:	0800037b 	.word	0x0800037b
 8000284:	0800037b 	.word	0x0800037b
 8000288:	0800037b 	.word	0x0800037b
 800028c:	0800037b 	.word	0x0800037b
 8000290:	0800037b 	.word	0x0800037b
 8000294:	0800037b 	.word	0x0800037b
 8000298:	0800037b 	.word	0x0800037b
 800029c:	0800037b 	.word	0x0800037b

Disassembly of section .text:

080002a0 <_crt0_entry>:
                .align  2
                .thumb_func
                .global _crt0_entry
_crt0_entry:
                /* Interrupts are globally masked initially.*/
                cpsid   i
 80002a0:	b672      	cpsid	i

#if CRT0_FORCE_MSP_INIT == TRUE
                /* MSP stack pointers initialization.*/
                ldr     r0, =__main_stack_end__
 80002a2:	4827      	ldr	r0, [pc, #156]	; (8000340 <endfiniloop+0x4>)
                msr     MSP, r0
 80002a4:	f380 8808 	msr	MSP, r0
#endif

                /* PSP stack pointers initialization.*/
                ldr     r0, =__process_stack_end__
 80002a8:	4826      	ldr	r0, [pc, #152]	; (8000344 <endfiniloop+0x8>)
                msr     PSP, r0
 80002aa:	f380 8809 	msr	PSP, r0

#if CRT0_VTOR_INIT == TRUE
                ldr     r0, =_vectors
 80002ae:	4826      	ldr	r0, [pc, #152]	; (8000348 <endfiniloop+0xc>)
                movw    r1, #SCB_VTOR & 0xFFFF
 80002b0:	f64e 5108 	movw	r1, #60680	; 0xed08
                movt    r1, #SCB_VTOR >> 16
 80002b4:	f2ce 0100 	movt	r1, #57344	; 0xe000
                str     r0, [r1]
 80002b8:	6008      	str	r0, [r1, #0]

                /* Enforcing FPCA bit in the CONTROL register.*/
                movs    r0, #CRT0_CONTROL_INIT | CONTROL_FPCA

#else
                movs    r0, #CRT0_CONTROL_INIT
 80002ba:	2002      	movs	r0, #2
#endif

                /* CONTROL register initialization as configured.*/
                msr     CONTROL, r0
 80002bc:	f380 8814 	msr	CONTROL, r0
                isb
 80002c0:	f3bf 8f6f 	isb	sy

#if CRT0_INIT_CORE == TRUE
                /* Core initialization.*/
                bl      __core_init
 80002c4:	f004 fc04 	bl	8004ad0 <__core_init>
#endif

                /* Early initialization.*/
                bl      __early_init
 80002c8:	f003 fab2 	bl	8003830 <__early_init>

#if CRT0_INIT_STACKS == TRUE
                ldr     r0, =CRT0_STACKS_FILL_PATTERN
 80002cc:	f04f 3055 	mov.w	r0, #1431655765	; 0x55555555
                /* Main Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__main_stack_base__
 80002d0:	491e      	ldr	r1, [pc, #120]	; (800034c <endfiniloop+0x10>)
                ldr     r2, =__main_stack_end__
 80002d2:	4a1b      	ldr	r2, [pc, #108]	; (8000340 <endfiniloop+0x4>)

080002d4 <msloop>:
msloop:
                cmp     r1, r2
 80002d4:	4291      	cmp	r1, r2
                itt     lo
 80002d6:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80002d8:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     msloop
 80002dc:	e7fa      	bcc.n	80002d4 <msloop>

                /* Process Stack initialization. Note, it assumes that the
                   stack size is a multiple of 4 so the linker file must
                   ensure this.*/
                ldr     r1, =__process_stack_base__
 80002de:	491c      	ldr	r1, [pc, #112]	; (8000350 <endfiniloop+0x14>)
                ldr     r2, =__process_stack_end__
 80002e0:	4a18      	ldr	r2, [pc, #96]	; (8000344 <endfiniloop+0x8>)

080002e2 <psloop>:
psloop:
                cmp     r1, r2
 80002e2:	4291      	cmp	r1, r2
                itt     lo
 80002e4:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 80002e6:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     psloop
 80002ea:	e7fa      	bcc.n	80002e2 <psloop>
#endif

#if CRT0_INIT_DATA == TRUE
                /* Data initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                ldr     r1, =__textdata_base__
 80002ec:	4919      	ldr	r1, [pc, #100]	; (8000354 <endfiniloop+0x18>)
                ldr     r2, =__data_base__
 80002ee:	4a1a      	ldr	r2, [pc, #104]	; (8000358 <endfiniloop+0x1c>)
                ldr     r3, =__data_end__
 80002f0:	4b1a      	ldr	r3, [pc, #104]	; (800035c <endfiniloop+0x20>)

080002f2 <dloop>:
dloop:
                cmp     r2, r3
 80002f2:	429a      	cmp	r2, r3
                ittt    lo
 80002f4:	bf3e      	ittt	cc
                ldrlo   r0, [r1], #4
 80002f6:	f851 0b04 	ldrcc.w	r0, [r1], #4
                strlo   r0, [r2], #4
 80002fa:	f842 0b04 	strcc.w	r0, [r2], #4
                blo     dloop
 80002fe:	e7f8      	bcc.n	80002f2 <dloop>
#endif

#if CRT0_INIT_BSS == TRUE
                /* BSS initialization. Note, it assumes that the DATA size
                  is a multiple of 4 so the linker file must ensure this.*/
                movs    r0, #0
 8000300:	2000      	movs	r0, #0
                ldr     r1, =__bss_base__
 8000302:	4917      	ldr	r1, [pc, #92]	; (8000360 <endfiniloop+0x24>)
                ldr     r2, =__bss_end__
 8000304:	4a17      	ldr	r2, [pc, #92]	; (8000364 <endfiniloop+0x28>)

08000306 <bloop>:
bloop:
                cmp     r1, r2
 8000306:	4291      	cmp	r1, r2
                itt     lo
 8000308:	bf3c      	itt	cc
                strlo   r0, [r1], #4
 800030a:	f841 0b04 	strcc.w	r0, [r1], #4
                blo     bloop
 800030e:	e7fa      	bcc.n	8000306 <bloop>
#endif

#if CRT0_INIT_RAM_AREAS == TRUE
                /* RAM areas initialization.*/
                bl      __init_ram_areas
 8000310:	f004 fb96 	bl	8004a40 <__init_ram_areas>
#endif

                /* Late initialization..*/
                bl      __late_init
 8000314:	f004 fbd4 	bl	8004ac0 <__late_init>

#if CRT0_CALL_CONSTRUCTORS == TRUE
                /* Constructors invocation.*/
                ldr     r4, =__init_array_base__
 8000318:	4c13      	ldr	r4, [pc, #76]	; (8000368 <endfiniloop+0x2c>)
                ldr     r5, =__init_array_end__
 800031a:	4d14      	ldr	r5, [pc, #80]	; (800036c <endfiniloop+0x30>)

0800031c <initloop>:
initloop:
                cmp     r4, r5
 800031c:	42ac      	cmp	r4, r5
                bge     endinitloop
 800031e:	da03      	bge.n	8000328 <endinitloop>
                ldr     r1, [r4], #4
 8000320:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000324:	4788      	blx	r1
                b       initloop
 8000326:	e7f9      	b.n	800031c <initloop>

08000328 <endinitloop>:
endinitloop:
#endif

                /* Main program invocation, r0 contains the returned value.*/
                bl      main
 8000328:	f002 fd82 	bl	8002e30 <main>

#if CRT0_CALL_DESTRUCTORS == TRUE
                /* Destructors invocation.*/
                ldr     r4, =__fini_array_base__
 800032c:	4c10      	ldr	r4, [pc, #64]	; (8000370 <endfiniloop+0x34>)
                ldr     r5, =__fini_array_end__
 800032e:	4d11      	ldr	r5, [pc, #68]	; (8000374 <endfiniloop+0x38>)

08000330 <finiloop>:
finiloop:
                cmp     r4, r5
 8000330:	42ac      	cmp	r4, r5
                bge     endfiniloop
 8000332:	da03      	bge.n	800033c <endfiniloop>
                ldr     r1, [r4], #4
 8000334:	f854 1b04 	ldr.w	r1, [r4], #4
                blx     r1
 8000338:	4788      	blx	r1
                b       finiloop
 800033a:	e7f9      	b.n	8000330 <finiloop>

0800033c <endfiniloop>:
endfiniloop:
#endif

                /* Branching to the defined exit handler.*/
                b       __default_exit
 800033c:	f004 bbb8 	b.w	8004ab0 <__default_exit>
                ldr     r0, =__main_stack_end__
 8000340:	20000400 	.word	0x20000400
                ldr     r0, =__process_stack_end__
 8000344:	20000800 	.word	0x20000800
                ldr     r0, =_vectors
 8000348:	08000000 	.word	0x08000000
                ldr     r1, =__main_stack_base__
 800034c:	20000000 	.word	0x20000000
                ldr     r1, =__process_stack_base__
 8000350:	20000400 	.word	0x20000400
                ldr     r1, =__textdata_base__
 8000354:	08005128 	.word	0x08005128
                ldr     r2, =__data_base__
 8000358:	24000000 	.word	0x24000000
                ldr     r3, =__data_end__
 800035c:	24000008 	.word	0x24000008
                ldr     r1, =__bss_base__
 8000360:	24000008 	.word	0x24000008
                ldr     r2, =__bss_end__
 8000364:	24001480 	.word	0x24001480
                ldr     r4, =__init_array_base__
 8000368:	080002a0 	.word	0x080002a0
                ldr     r5, =__init_array_end__
 800036c:	080002a0 	.word	0x080002a0
                ldr     r4, =__fini_array_base__
 8000370:	080002a0 	.word	0x080002a0
                ldr     r5, =__fini_array_end__
 8000374:	080002a0 	.word	0x080002a0

08000378 <Reset_Handler>:

        .align      2
        .thumb_func
        .weak       Reset_Handler
Reset_Handler:
         b          _crt0_entry
 8000378:	e792      	b.n	80002a0 <_crt0_entry>

0800037a <BusFault_Handler>:
        .thumb_func
Vector3F8:
        .thumb_func
Vector3FC:
#endif
        bl          _unhandled_exception
 800037a:	f000 f800 	bl	800037e <_unhandled_exception>

0800037e <_unhandled_exception>:

        .thumb_func
        .weak       _unhandled_exception
_unhandled_exception:
.stay:
        b           .stay
 800037e:	e7fe      	b.n	800037e <_unhandled_exception>

08000380 <_port_switch>:
 * Performs a context switch between two threads.
 *--------------------------------------------------------------------------*/
                .thumb_func
                .globl  _port_switch
_port_switch:
                push    {r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8000380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if PORT_SWITCHED_REGIONS_NUMBER == 4
                push    {r4, r5, r6, r7, r8, r9, r10, r11}
#endif
#endif

                str     sp, [r1, #CONTEXT_OFFSET]
 8000384:	f8c1 d00c 	str.w	sp, [r1, #12]
                /* Workaround for ARM errata 752419, only applied if
                   condition exists for it to be triggered.*/
                ldr     r3, [r0, #CONTEXT_OFFSET]
                mov     sp, r3
#else
                ldr     sp, [r0, #CONTEXT_OFFSET]
 8000388:	f8d0 d00c 	ldr.w	sp, [r0, #12]

#if CORTEX_USE_FPU
                /* Restoring FPU context.*/
                vpop    {s16-s31}
#endif
                pop     {r4, r5, r6, r7, r8, r9, r10, r11, pc}
 800038c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000390 <_port_thread_start>:
                bl      _stats_stop_measure_crit_thd
#endif
#if CORTEX_SIMPLIFIED_PRIORITY
                cpsie   i
#else
                movs    r3, #0              /* CORTEX_BASEPRI_DISABLED */
 8000390:	2300      	movs	r3, #0
                msr     BASEPRI, r3
 8000392:	f383 8811 	msr	BASEPRI, r3
#endif
                mov     r0, r5
 8000396:	4628      	mov	r0, r5
                blx     r4
 8000398:	47a0      	blx	r4
                movs    r0, #0              /* MSG_OK */
 800039a:	2000      	movs	r0, #0
                bl      chThdExit
 800039c:	f003 f9f0 	bl	8003780 <chThdExit>

080003a0 <_zombies>:
_zombies:       b       _zombies
 80003a0:	e7fe      	b.n	80003a0 <_zombies>

080003a2 <_port_switch_from_isr>:
                bl      _stats_start_measure_crit_thd
#endif
#if CH_DBG_SYSTEM_STATE_CHECK
                bl      _dbg_check_lock
#endif
                bl      chSchDoReschedule
 80003a2:	f003 fa15 	bl	80037d0 <chSchDoReschedule>

080003a6 <_port_exit_from_isr>:
                movt    r3, #:upper16:SCB_ICSR
                mov     r2, ICSR_PENDSVSET
                str     r2, [r3, #0]
                cpsie   i
#else /* !CORTEX_SIMPLIFIED_PRIORITY */
                svc     #0
 80003a6:	df00      	svc	0
#endif /* !CORTEX_SIMPLIFIED_PRIORITY */
.L1:            b       .L1
 80003a8:	e7fe      	b.n	80003a8 <_port_exit_from_isr+0x2>
	...

080003ac <memcpy>:
 80003ac:	4684      	mov	ip, r0
 80003ae:	ea41 0300 	orr.w	r3, r1, r0
 80003b2:	f013 0303 	ands.w	r3, r3, #3
 80003b6:	d16d      	bne.n	8000494 <memcpy+0xe8>
 80003b8:	3a40      	subs	r2, #64	; 0x40
 80003ba:	d341      	bcc.n	8000440 <memcpy+0x94>
 80003bc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c0:	f840 3b04 	str.w	r3, [r0], #4
 80003c4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003c8:	f840 3b04 	str.w	r3, [r0], #4
 80003cc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d0:	f840 3b04 	str.w	r3, [r0], #4
 80003d4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003d8:	f840 3b04 	str.w	r3, [r0], #4
 80003dc:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e0:	f840 3b04 	str.w	r3, [r0], #4
 80003e4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003e8:	f840 3b04 	str.w	r3, [r0], #4
 80003ec:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f0:	f840 3b04 	str.w	r3, [r0], #4
 80003f4:	f851 3b04 	ldr.w	r3, [r1], #4
 80003f8:	f840 3b04 	str.w	r3, [r0], #4
 80003fc:	f851 3b04 	ldr.w	r3, [r1], #4
 8000400:	f840 3b04 	str.w	r3, [r0], #4
 8000404:	f851 3b04 	ldr.w	r3, [r1], #4
 8000408:	f840 3b04 	str.w	r3, [r0], #4
 800040c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000410:	f840 3b04 	str.w	r3, [r0], #4
 8000414:	f851 3b04 	ldr.w	r3, [r1], #4
 8000418:	f840 3b04 	str.w	r3, [r0], #4
 800041c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000420:	f840 3b04 	str.w	r3, [r0], #4
 8000424:	f851 3b04 	ldr.w	r3, [r1], #4
 8000428:	f840 3b04 	str.w	r3, [r0], #4
 800042c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000430:	f840 3b04 	str.w	r3, [r0], #4
 8000434:	f851 3b04 	ldr.w	r3, [r1], #4
 8000438:	f840 3b04 	str.w	r3, [r0], #4
 800043c:	3a40      	subs	r2, #64	; 0x40
 800043e:	d2bd      	bcs.n	80003bc <memcpy+0x10>
 8000440:	3230      	adds	r2, #48	; 0x30
 8000442:	d311      	bcc.n	8000468 <memcpy+0xbc>
 8000444:	f851 3b04 	ldr.w	r3, [r1], #4
 8000448:	f840 3b04 	str.w	r3, [r0], #4
 800044c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000450:	f840 3b04 	str.w	r3, [r0], #4
 8000454:	f851 3b04 	ldr.w	r3, [r1], #4
 8000458:	f840 3b04 	str.w	r3, [r0], #4
 800045c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000460:	f840 3b04 	str.w	r3, [r0], #4
 8000464:	3a10      	subs	r2, #16
 8000466:	d2ed      	bcs.n	8000444 <memcpy+0x98>
 8000468:	320c      	adds	r2, #12
 800046a:	d305      	bcc.n	8000478 <memcpy+0xcc>
 800046c:	f851 3b04 	ldr.w	r3, [r1], #4
 8000470:	f840 3b04 	str.w	r3, [r0], #4
 8000474:	3a04      	subs	r2, #4
 8000476:	d2f9      	bcs.n	800046c <memcpy+0xc0>
 8000478:	3204      	adds	r2, #4
 800047a:	d008      	beq.n	800048e <memcpy+0xe2>
 800047c:	07d2      	lsls	r2, r2, #31
 800047e:	bf1c      	itt	ne
 8000480:	f811 3b01 	ldrbne.w	r3, [r1], #1
 8000484:	f800 3b01 	strbne.w	r3, [r0], #1
 8000488:	d301      	bcc.n	800048e <memcpy+0xe2>
 800048a:	880b      	ldrh	r3, [r1, #0]
 800048c:	8003      	strh	r3, [r0, #0]
 800048e:	4660      	mov	r0, ip
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	2a08      	cmp	r2, #8
 8000496:	d313      	bcc.n	80004c0 <memcpy+0x114>
 8000498:	078b      	lsls	r3, r1, #30
 800049a:	d08d      	beq.n	80003b8 <memcpy+0xc>
 800049c:	f010 0303 	ands.w	r3, r0, #3
 80004a0:	d08a      	beq.n	80003b8 <memcpy+0xc>
 80004a2:	f1c3 0304 	rsb	r3, r3, #4
 80004a6:	1ad2      	subs	r2, r2, r3
 80004a8:	07db      	lsls	r3, r3, #31
 80004aa:	bf1c      	itt	ne
 80004ac:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80004b0:	f800 3b01 	strbne.w	r3, [r0], #1
 80004b4:	d380      	bcc.n	80003b8 <memcpy+0xc>
 80004b6:	f831 3b02 	ldrh.w	r3, [r1], #2
 80004ba:	f820 3b02 	strh.w	r3, [r0], #2
 80004be:	e77b      	b.n	80003b8 <memcpy+0xc>
 80004c0:	3a04      	subs	r2, #4
 80004c2:	d3d9      	bcc.n	8000478 <memcpy+0xcc>
 80004c4:	3a01      	subs	r2, #1
 80004c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004ca:	f800 3b01 	strb.w	r3, [r0], #1
 80004ce:	d2f9      	bcs.n	80004c4 <memcpy+0x118>
 80004d0:	780b      	ldrb	r3, [r1, #0]
 80004d2:	7003      	strb	r3, [r0, #0]
 80004d4:	784b      	ldrb	r3, [r1, #1]
 80004d6:	7043      	strb	r3, [r0, #1]
 80004d8:	788b      	ldrb	r3, [r1, #2]
 80004da:	7083      	strb	r3, [r0, #2]
 80004dc:	4660      	mov	r0, ip
 80004de:	4770      	bx	lr

080004e0 <otg_txfifo_handler.constprop.0>:
  /* The TXFIFO is filled until there is space and data to be transmitted.*/
  while (true) {
    uint32_t n;

    /* Transaction end condition.*/
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80004e0:	4b22      	ldr	r3, [pc, #136]	; (800056c <otg_txfifo_handler.constprop.0+0x8c>)
 80004e2:	eb03 0280 	add.w	r2, r3, r0, lsl #2
 80004e6:	68d2      	ldr	r2, [r2, #12]
static bool otg_txfifo_handler(USBDriver *usbp, usbep_t ep) {
 80004e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004ec:	4680      	mov	r8, r0
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 80004ee:	6950      	ldr	r0, [r2, #20]
 80004f0:	f8d3 9090 	ldr.w	r9, [r3, #144]	; 0x90
 80004f4:	e9d0 4700 	ldrd	r4, r7, [r0]
 80004f8:	42bc      	cmp	r4, r7
 80004fa:	d928      	bls.n	800054e <otg_txfifo_handler.constprop.0+0x6e>
      return false;

#if STM32_USB_OTGFIFO_FILL_BASEPRI
    __set_BASEPRI(CORTEX_PRIO_MASK(STM32_USB_OTGFIFO_FILL_BASEPRI));
#endif
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 80004fc:	f108 0501 	add.w	r5, r8, #1
    if (n > usbp->epc[ep]->in_maxsize)
 8000500:	f8b2 e010 	ldrh.w	lr, [r2, #16]
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 8000504:	eb09 1c48 	add.w	ip, r9, r8, lsl #5
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000508:	eb09 3505 	add.w	r5, r9, r5, lsl #12
    n = usbp->epc[ep]->in_state->txsize - usbp->epc[ep]->in_state->txcnt;
 800050c:	1be4      	subs	r4, r4, r7
    if (((usbp->otg->ie[ep].DTXFSTS & DTXFSTS_INEPTFSAV_MASK) * 4) < n)
 800050e:	f8dc 3918 	ldr.w	r3, [ip, #2328]	; 0x918
 8000512:	4574      	cmp	r4, lr
 8000514:	b29b      	uxth	r3, r3
 8000516:	bf28      	it	cs
 8000518:	4674      	movcs	r4, lr
 800051a:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 800051e:	d821      	bhi.n	8000564 <otg_txfifo_handler.constprop.0+0x84>
    otg_fifo_write_from_buffer(usbp->otg->FIFO[ep],
 8000520:	6886      	ldr	r6, [r0, #8]
    if (n <= 4) {
 8000522:	2c04      	cmp	r4, #4
    *fifop = *((uint32_t *)buf);
 8000524:	6833      	ldr	r3, [r6, #0]
 8000526:	602b      	str	r3, [r5, #0]
    if (n <= 4) {
 8000528:	d90a      	bls.n	8000540 <otg_txfifo_handler.constprop.0+0x60>
 800052a:	1f61      	subs	r1, r4, #5
 800052c:	4633      	mov	r3, r6
 800052e:	f021 0103 	bic.w	r1, r1, #3
 8000532:	3104      	adds	r1, #4
 8000534:	4431      	add	r1, r6
    *fifop = *((uint32_t *)buf);
 8000536:	f853 2f04 	ldr.w	r2, [r3, #4]!
    if (n <= 4) {
 800053a:	4299      	cmp	r1, r3
    *fifop = *((uint32_t *)buf);
 800053c:	602a      	str	r2, [r5, #0]
    if (n <= 4) {
 800053e:	d1fa      	bne.n	8000536 <otg_txfifo_handler.constprop.0+0x56>
                               usbp->epc[ep]->in_state->txbuf,
                               n);
    usbp->epc[ep]->in_state->txbuf += n;
    usbp->epc[ep]->in_state->txcnt += n;
 8000540:	4427      	add	r7, r4
    usbp->epc[ep]->in_state->txbuf += n;
 8000542:	4426      	add	r6, r4
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 8000544:	6804      	ldr	r4, [r0, #0]
 8000546:	42bc      	cmp	r4, r7
    usbp->epc[ep]->in_state->txcnt += n;
 8000548:	e9c0 7601 	strd	r7, r6, [r0, #4]
    if (usbp->epc[ep]->in_state->txcnt >= usbp->epc[ep]->in_state->txsize) {
 800054c:	d8de      	bhi.n	800050c <otg_txfifo_handler.constprop.0+0x2c>
      usbp->otg->DIEPEMPMSK &= ~DIEPEMPMSK_INEPTXFEM(ep);
 800054e:	2001      	movs	r0, #1
 8000550:	f8d9 3834 	ldr.w	r3, [r9, #2100]	; 0x834
 8000554:	fa00 f808 	lsl.w	r8, r0, r8
 8000558:	ea23 0308 	bic.w	r3, r3, r8
 800055c:	f8c9 3834 	str.w	r3, [r9, #2100]	; 0x834
#if STM32_USB_OTGFIFO_FILL_BASEPRI
  __set_BASEPRI(0);
#endif
  }
}
 8000560:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return false;
 8000564:	2000      	movs	r0, #0
}
 8000566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800056a:	bf00      	nop
 800056c:	240007a8 	.word	0x240007a8

08000570 <chCoreAllocFromTop>:
  \details Assigns the given value to the Base Priority register.
  \param [in]    basePri  Base Priority value to set
 */
__STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
{
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 8000570:	2320      	movs	r3, #32
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @api
 */
void *chCoreAllocFromTop(size_t size, unsigned align, size_t offset) {
 8000572:	b430      	push	{r4, r5}
 8000574:	f383 8811 	msr	BASEPRI, r3
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <chCoreAllocFromTop+0x38>)
 800057a:	4249      	negs	r1, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800057c:	e9d3 4500 	ldrd	r4, r5, [r3]
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000580:	1a28      	subs	r0, r5, r0
 8000582:	4008      	ands	r0, r1
  prev = p - offset;
 8000584:	1a82      	subs	r2, r0, r2
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 8000586:	42a2      	cmp	r2, r4
 8000588:	d307      	bcc.n	800059a <chCoreAllocFromTop+0x2a>
 800058a:	4295      	cmp	r5, r2
 800058c:	d305      	bcc.n	800059a <chCoreAllocFromTop+0x2a>
  ch_memcore.topmem = prev;
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	2300      	movs	r3, #0
 8000592:	f383 8811 	msr	BASEPRI, r3
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
 8000596:	bc30      	pop	{r4, r5}
 8000598:	4770      	bx	lr
    return NULL;
 800059a:	2000      	movs	r0, #0
 800059c:	2300      	movs	r3, #0
 800059e:	f383 8811 	msr	BASEPRI, r3
}
 80005a2:	bc30      	pop	{r4, r5}
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop
 80005a8:	24001228 	.word	0x24001228
 80005ac:	00000000 	.word	0x00000000

080005b0 <notify3>:

#if STM32_SERIAL_USE_USART3 || defined(__DOXYGEN__)
static void notify3(io_queue_t *qp) {

  (void)qp;
  USART3->CR1 |= USART_CR1_TXEIE | USART_CR1_TCIE;
 80005b0:	4a02      	ldr	r2, [pc, #8]	; (80005bc <notify3+0xc>)
 80005b2:	6813      	ldr	r3, [r2, #0]
 80005b4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80005b8:	6013      	str	r3, [r2, #0]
}
 80005ba:	4770      	bx	lr
 80005bc:	40004800 	.word	0x40004800

080005c0 <get_descriptor>:
                                           uint8_t dindex,
                                           uint16_t lang) {

  (void)usbp;
  (void)lang;
  switch (dtype) {
 80005c0:	2902      	cmp	r1, #2
 80005c2:	d006      	beq.n	80005d2 <get_descriptor+0x12>
 80005c4:	2903      	cmp	r1, #3
 80005c6:	d006      	beq.n	80005d6 <get_descriptor+0x16>
 80005c8:	2901      	cmp	r1, #1
  case USB_DESCRIPTOR_DEVICE:
    return &vcom_device_descriptor;
 80005ca:	4807      	ldr	r0, [pc, #28]	; (80005e8 <get_descriptor+0x28>)
 80005cc:	bf18      	it	ne
 80005ce:	2000      	movne	r0, #0
 80005d0:	4770      	bx	lr
  switch (dtype) {
 80005d2:	4806      	ldr	r0, [pc, #24]	; (80005ec <get_descriptor+0x2c>)
 80005d4:	4770      	bx	lr
  case USB_DESCRIPTOR_CONFIGURATION:
    return &vcom_configuration_descriptor;
  case USB_DESCRIPTOR_STRING:
    if (dindex < 4)
 80005d6:	2a03      	cmp	r2, #3
 80005d8:	d803      	bhi.n	80005e2 <get_descriptor+0x22>
      return &vcom_strings[dindex];
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <get_descriptor+0x30>)
 80005dc:	eb00 00c2 	add.w	r0, r0, r2, lsl #3
 80005e0:	4770      	bx	lr
  }
  return NULL;
 80005e2:	2000      	movs	r0, #0
}
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	0800502c 	.word	0x0800502c
 80005ec:	08004fe0 	.word	0x08004fe0
 80005f0:	080050b4 	.word	0x080050b4
	...

08000600 <_port_irq_epilogue>:
 8000600:	2320      	movs	r3, #32
 8000602:	f383 8811 	msr	BASEPRI, r3
 * @brief   Exception exit redirection to _port_switch_from_isr().
 */
void _port_irq_epilogue(void) {

  port_lock_from_isr();
  if ((SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) != 0U) {
 8000606:	4b0d      	ldr	r3, [pc, #52]	; (800063c <_port_irq_epilogue+0x3c>)
 8000608:	685b      	ldr	r3, [r3, #4]
 800060a:	f413 6300 	ands.w	r3, r3, #2048	; 0x800
 800060e:	d102      	bne.n	8000616 <_port_irq_epilogue+0x16>
 8000610:	f383 8811 	msr	BASEPRI, r3
    /* Note, returning without unlocking is intentional, this is done in
       order to keep the rest of the context switch atomic.*/
    return;
  }
  port_unlock_from_isr();
}
 8000614:	4770      	bx	lr
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8000616:	f3ef 8309 	mrs	r3, PSP
    ectxp->xpsr = 0x01000000U;
 800061a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    s_psp -= sizeof (struct port_extctx);
 800061e:	3b20      	subs	r3, #32
    ectxp->xpsr = 0x01000000U;
 8000620:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8000622:	f383 8809 	msr	PSP, r3
 * @retval false        if preemption is not required.
 *
 * @special
 */
bool chSchIsPreemptionRequired(void) {
  tprio_t p1 = firstprio(&ch.rlist.queue);
 8000626:	4a06      	ldr	r2, [pc, #24]	; (8000640 <_port_irq_epilogue+0x40>)
 8000628:	6811      	ldr	r1, [r2, #0]
  tprio_t p2 = currp->prio;
 800062a:	6992      	ldr	r2, [r2, #24]
    if (chSchIsPreemptionRequired()) {
 800062c:	6889      	ldr	r1, [r1, #8]
 800062e:	6892      	ldr	r2, [r2, #8]
 8000630:	4291      	cmp	r1, r2
      ectxp->pc = (uint32_t)_port_switch_from_isr;
 8000632:	bf8c      	ite	hi
 8000634:	4a03      	ldrhi	r2, [pc, #12]	; (8000644 <_port_irq_epilogue+0x44>)
      ectxp->pc = (uint32_t)_port_exit_from_isr;
 8000636:	4a04      	ldrls	r2, [pc, #16]	; (8000648 <_port_irq_epilogue+0x48>)
 8000638:	619a      	str	r2, [r3, #24]
 800063a:	4770      	bx	lr
 800063c:	e000ed00 	.word	0xe000ed00
 8000640:	24000888 	.word	0x24000888
 8000644:	080003a3 	.word	0x080003a3
 8000648:	080003a6 	.word	0x080003a6
 800064c:	00000000 	.word	0x00000000

08000650 <chCoreAllocAlignedI>:
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
 8000650:	4b08      	ldr	r3, [pc, #32]	; (8000674 <chCoreAllocAlignedI+0x24>)
 8000652:	4249      	negs	r1, r1
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	1a10      	subs	r0, r2, r0
 * @return              A pointer to the allocated memory block.
 * @retval NULL         allocation failed, core memory exhausted.
 *
 * @iclass
 */
static inline void *chCoreAllocAlignedI(size_t size, unsigned align) {
 8000658:	b410      	push	{r4}
 800065a:	4008      	ands	r0, r1
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
 800065c:	681c      	ldr	r4, [r3, #0]
 800065e:	42a0      	cmp	r0, r4
 8000660:	d304      	bcc.n	800066c <chCoreAllocAlignedI+0x1c>
 8000662:	4282      	cmp	r2, r0
 8000664:	d302      	bcc.n	800066c <chCoreAllocAlignedI+0x1c>

  return chCoreAllocAlignedWithOffsetI(size, align, 0U);
}
 8000666:	bc10      	pop	{r4}
  ch_memcore.topmem = prev;
 8000668:	6058      	str	r0, [r3, #4]
 800066a:	4770      	bx	lr
    return NULL;
 800066c:	2000      	movs	r0, #0
 800066e:	bc10      	pop	{r4}
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	24001228 	.word	0x24001228
	...

08000680 <chTMStopMeasurementX>:
 *
 * @return              The realtime counter value.
 */
__STATIC_FORCEINLINE rtcnt_t port_rt_get_counter_value(void) {

  return DWT->CYCCNT;
 8000680:	4b0e      	ldr	r3, [pc, #56]	; (80006bc <chTMStopMeasurementX+0x3c>)
 *
 * @xclass
 */
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {

  tm_stop(tmp, chSysGetRealtimeCounterX(), ch.tm.offset);
 8000682:	4a0f      	ldr	r2, [pc, #60]	; (80006c0 <chTMStopMeasurementX+0x40>)
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	f8d2 287c 	ldr.w	r2, [r2, #2172]	; 0x87c
  tmp->n++;
 800068a:	68c1      	ldr	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 800068c:	1a9b      	subs	r3, r3, r2
  if (tmp->last > tmp->worst) {
 800068e:	6842      	ldr	r2, [r0, #4]
  tmp->n++;
 8000690:	3101      	adds	r1, #1
NOINLINE void chTMStopMeasurementX(time_measurement_t *tmp) {
 8000692:	b430      	push	{r4, r5}
  tmp->last = (now - tmp->last) - offset;
 8000694:	6884      	ldr	r4, [r0, #8]
  tmp->n++;
 8000696:	60c1      	str	r1, [r0, #12]
  tmp->last = (now - tmp->last) - offset;
 8000698:	1b1b      	subs	r3, r3, r4
  tmp->cumulative += (rttime_t)tmp->last;
 800069a:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
  tmp->last = (now - tmp->last) - offset;
 800069e:	6083      	str	r3, [r0, #8]
  tmp->cumulative += (rttime_t)tmp->last;
 80006a0:	18e4      	adds	r4, r4, r3
 80006a2:	f145 0500 	adc.w	r5, r5, #0
  if (tmp->last > tmp->worst) {
 80006a6:	4293      	cmp	r3, r2
  if (tmp->last < tmp->best) {
 80006a8:	6802      	ldr	r2, [r0, #0]
    tmp->worst = tmp->last;
 80006aa:	bf88      	it	hi
 80006ac:	6043      	strhi	r3, [r0, #4]
  if (tmp->last < tmp->best) {
 80006ae:	4293      	cmp	r3, r2
  tmp->cumulative += (rttime_t)tmp->last;
 80006b0:	e9c0 4504 	strd	r4, r5, [r0, #16]
    tmp->best = tmp->last;
 80006b4:	bf38      	it	cc
 80006b6:	6003      	strcc	r3, [r0, #0]
}
 80006b8:	bc30      	pop	{r4, r5}
 80006ba:	4770      	bx	lr
 80006bc:	e0001000 	.word	0xe0001000
 80006c0:	24000888 	.word	0x24000888
	...

080006d0 <chTMStartMeasurementX>:
 80006d0:	4b01      	ldr	r3, [pc, #4]	; (80006d8 <chTMStartMeasurementX+0x8>)
 80006d2:	685b      	ldr	r3, [r3, #4]
  tmp->last = chSysGetRealtimeCounterX();
 80006d4:	6083      	str	r3, [r0, #8]
}
 80006d6:	4770      	bx	lr
 80006d8:	e0001000 	.word	0xe0001000
 80006dc:	00000000 	.word	0x00000000

080006e0 <wakeup>:
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80006e0:	2320      	movs	r3, #32
 80006e2:	f383 8811 	msr	BASEPRI, r3
  switch (tp->state) {
 80006e6:	f890 3020 	ldrb.w	r3, [r0, #32]
 80006ea:	2b07      	cmp	r3, #7
 80006ec:	d80d      	bhi.n	800070a <wakeup+0x2a>
 80006ee:	e8df f003 	tbb	[pc, r3]
 80006f2:	0c27      	.short	0x0c27
 80006f4:	0408230c 	.word	0x0408230c
 80006f8:	080c      	.short	0x080c
    chSemFastSignalI(tp->u.wtsemp);
 80006fa:	6a42      	ldr	r2, [r0, #36]	; 0x24
 */
static inline void chSemFastSignalI(semaphore_t *sp) {

  chDbgCheckClassI();

  sp->cnt++;
 80006fc:	6893      	ldr	r3, [r2, #8]
 80006fe:	3301      	adds	r3, #1
 8000700:	6093      	str	r3, [r2, #8]
  return tp;
}

static inline thread_t *queue_dequeue(thread_t *tp) {

  tp->queue.prev->queue.next = tp->queue.next;
 8000702:	e9d0 3200 	ldrd	r3, r2, [r0]
 8000706:	6013      	str	r3, [r2, #0]
  tp->queue.next->queue.prev = tp->queue.prev;
 8000708:	605a      	str	r2, [r3, #4]
  tp->state = CH_STATE_READY;
 800070a:	2200      	movs	r2, #0
  } while (cp->prio >= tp->prio);
 800070c:	6881      	ldr	r1, [r0, #8]
  cp = (thread_t *)&ch.rlist.queue;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <wakeup+0x68>)
  tp->state = CH_STATE_READY;
 8000710:	f880 2020 	strb.w	r2, [r0, #32]
static void wakeup(void *p) {
 8000714:	b410      	push	{r4}
  tp->u.rdymsg = MSG_TIMEOUT;
 8000716:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800071a:	6244      	str	r4, [r0, #36]	; 0x24
    cp = cp->queue.next;
 800071c:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800071e:	689a      	ldr	r2, [r3, #8]
 8000720:	428a      	cmp	r2, r1
 8000722:	d2fb      	bcs.n	800071c <wakeup+0x3c>
  tp->queue.prev             = cp->queue.prev;
 8000724:	685a      	ldr	r2, [r3, #4]
 8000726:	2100      	movs	r1, #0
 8000728:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 800072c:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800072e:	6058      	str	r0, [r3, #4]
 8000730:	f381 8811 	msr	BASEPRI, r1
}
 8000734:	bc10      	pop	{r4}
 8000736:	4770      	bx	lr
    *tp->u.wttrp = NULL;
 8000738:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
    break;
 800073e:	e7e4      	b.n	800070a <wakeup+0x2a>
 8000740:	2300      	movs	r3, #0
 8000742:	f383 8811 	msr	BASEPRI, r3
 8000746:	4770      	bx	lr
 8000748:	24000888 	.word	0x24000888
 800074c:	00000000 	.word	0x00000000

08000750 <chSchReadyI>:
  tp->state = CH_STATE_READY;
 8000750:	2200      	movs	r2, #0
  cp = (thread_t *)&ch.rlist.queue;
 8000752:	4b07      	ldr	r3, [pc, #28]	; (8000770 <chSchReadyI+0x20>)
  } while (cp->prio >= tp->prio);
 8000754:	6881      	ldr	r1, [r0, #8]
  tp->state = CH_STATE_READY;
 8000756:	f880 2020 	strb.w	r2, [r0, #32]
    cp = cp->queue.next;
 800075a:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 800075c:	689a      	ldr	r2, [r3, #8]
 800075e:	428a      	cmp	r2, r1
 8000760:	d2fb      	bcs.n	800075a <chSchReadyI+0xa>
  tp->queue.prev             = cp->queue.prev;
 8000762:	685a      	ldr	r2, [r3, #4]
 8000764:	e9c0 3200 	strd	r3, r2, [r0]
  tp->queue.prev->queue.next = tp;
 8000768:	6010      	str	r0, [r2, #0]
  cp->queue.prev             = tp;
 800076a:	6058      	str	r0, [r3, #4]
}
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	24000888 	.word	0x24000888
	...

08000780 <chThdDequeueAllI.constprop.0>:
 * @param[in] tqp       pointer to the threads queue object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 8000780:	b538      	push	{r3, r4, r5, lr}
 8000782:	4604      	mov	r4, r0
  return (bool)(tqp->next != (const thread_t *)tqp);
 8000784:	6800      	ldr	r0, [r0, #0]

  while (queue_notempty(tqp)) {
 8000786:	4284      	cmp	r4, r0
 8000788:	d00a      	beq.n	80007a0 <chThdDequeueAllI.constprop.0+0x20>

  tp = queue_fifo_remove(tqp);

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
 800078a:	f06f 0501 	mvn.w	r5, #1
  tqp->next             = tp->queue.next;
 800078e:	6803      	ldr	r3, [r0, #0]
 8000790:	6023      	str	r3, [r4, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8000792:	605c      	str	r4, [r3, #4]
 8000794:	6245      	str	r5, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 8000796:	f7ff ffdb 	bl	8000750 <chSchReadyI>
  return (bool)(tqp->next != (const thread_t *)tqp);
 800079a:	6820      	ldr	r0, [r4, #0]
 800079c:	42a0      	cmp	r0, r4
 800079e:	d1f6      	bne.n	800078e <chThdDequeueAllI.constprop.0+0xe>
    chThdDoDequeueNextI(tqp, msg);
  }
}
 80007a0:	bd38      	pop	{r3, r4, r5, pc}
 80007a2:	bf00      	nop
	...

080007b0 <chThdDequeueNextI.constprop.0>:
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 80007b0:	4603      	mov	r3, r0
 80007b2:	6800      	ldr	r0, [r0, #0]
  if (queue_notempty(tqp)) {
 80007b4:	4283      	cmp	r3, r0
 80007b6:	d006      	beq.n	80007c6 <chThdDequeueNextI.constprop.0+0x16>
  tqp->next             = tp->queue.next;
 80007b8:	6802      	ldr	r2, [r0, #0]
  tp->u.rdymsg = msg;
 80007ba:	2100      	movs	r1, #0
 80007bc:	601a      	str	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80007be:	6053      	str	r3, [r2, #4]
 80007c0:	6241      	str	r1, [r0, #36]	; 0x24
  (void) chSchReadyI(tp);
 80007c2:	f7ff bfc5 	b.w	8000750 <chSchReadyI>
}
 80007c6:	4770      	bx	lr
	...

080007d0 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to the @p event_source_t structure
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 80007d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
 80007d2:	6804      	ldr	r4, [r0, #0]
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
 80007d4:	42a0      	cmp	r0, r4
 80007d6:	d021      	beq.n	800081c <chEvtBroadcastFlagsI+0x4c>
 80007d8:	4607      	mov	r7, r0
 80007da:	460d      	mov	r5, r1
  /* Test on the AND/OR conditions wait states.*/
  if (((tp->state == CH_STATE_WTOREVT) &&
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
      ((tp->state == CH_STATE_WTANDEVT) &&
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
    tp->u.rdymsg = MSG_OK;
 80007dc:	2600      	movs	r6, #0
 80007de:	e004      	b.n	80007ea <chEvtBroadcastFlagsI+0x1a>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 80007e0:	2a0b      	cmp	r2, #11
 80007e2:	d01c      	beq.n	800081e <chEvtBroadcastFlagsI+0x4e>
    elp = elp->next;
 80007e4:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 80007e6:	42a7      	cmp	r7, r4
 80007e8:	d018      	beq.n	800081c <chEvtBroadcastFlagsI+0x4c>
    elp->flags |= flags;
 80007ea:	68e3      	ldr	r3, [r4, #12]
 80007ec:	432b      	orrs	r3, r5
 80007ee:	60e3      	str	r3, [r4, #12]
    if ((flags == (eventflags_t)0) ||
 80007f0:	b115      	cbz	r5, 80007f8 <chEvtBroadcastFlagsI+0x28>
        ((flags & elp->wflags) != (eventflags_t)0)) {
 80007f2:	6923      	ldr	r3, [r4, #16]
    if ((flags == (eventflags_t)0) ||
 80007f4:	421d      	tst	r5, r3
 80007f6:	d0f5      	beq.n	80007e4 <chEvtBroadcastFlagsI+0x14>
  tp->epending |= events;
 80007f8:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
 80007fc:	6b41      	ldr	r1, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 80007fe:	f890 2020 	ldrb.w	r2, [r0, #32]
  tp->epending |= events;
 8000802:	430b      	orrs	r3, r1
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000804:	2a0a      	cmp	r2, #10
  tp->epending |= events;
 8000806:	6343      	str	r3, [r0, #52]	; 0x34
  if (((tp->state == CH_STATE_WTOREVT) &&
 8000808:	d1ea      	bne.n	80007e0 <chEvtBroadcastFlagsI+0x10>
       ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 800080a:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if (((tp->state == CH_STATE_WTOREVT) &&
 800080c:	4213      	tst	r3, r2
 800080e:	d0e9      	beq.n	80007e4 <chEvtBroadcastFlagsI+0x14>
    tp->u.rdymsg = MSG_OK;
 8000810:	6246      	str	r6, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8000812:	f7ff ff9d 	bl	8000750 <chSchReadyI>
    elp = elp->next;
 8000816:	6824      	ldr	r4, [r4, #0]
  while (elp != (event_listener_t *)esp) {
 8000818:	42a7      	cmp	r7, r4
 800081a:	d1e6      	bne.n	80007ea <chEvtBroadcastFlagsI+0x1a>
}
 800081c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
       ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 800081e:	6a42      	ldr	r2, [r0, #36]	; 0x24
      ((tp->state == CH_STATE_WTANDEVT) &&
 8000820:	ea32 0303 	bics.w	r3, r2, r3
 8000824:	d1de      	bne.n	80007e4 <chEvtBroadcastFlagsI+0x14>
 8000826:	e7f3      	b.n	8000810 <chEvtBroadcastFlagsI+0x40>
	...

08000830 <trace_next>:
 *
 * @notapi
 */
NOINLINE static void trace_next(void) {

  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000830:	4a0b      	ldr	r2, [pc, #44]	; (8000860 <trace_next+0x30>)
 *
 * @notapi
 */
static inline systime_t st_lld_get_counter(void) {

  return (systime_t)STM32_ST_TIM->CNT;
 8000832:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
NOINLINE static void trace_next(void) {
 8000836:	b430      	push	{r4, r5}
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000838:	6b53      	ldr	r3, [r2, #52]	; 0x34
#endif

  /* Trace hook, useful in order to interface debug tools.*/
  CH_CFG_TRACE_HOOK(ch.dbg.trace_buffer.ptr);

  if (++ch.dbg.trace_buffer.ptr >=
 800083a:	f602 0038 	addw	r0, r2, #2104	; 0x838
 800083e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8000840:	4c08      	ldr	r4, [pc, #32]	; (8000864 <trace_next+0x34>)
  ch.dbg.trace_buffer.ptr->time    = chVTGetSystemTimeX();
 8000842:	605d      	str	r5, [r3, #4]
  ch.dbg.trace_buffer.ptr->rtstamp = chSysGetRealtimeCounterX();
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	6864      	ldr	r4, [r4, #4]
 8000848:	f364 211f 	bfi	r1, r4, #8, #24
 800084c:	f843 1b10 	str.w	r1, [r3], #16
  if (++ch.dbg.trace_buffer.ptr >=
 8000850:	4283      	cmp	r3, r0
      &ch.dbg.trace_buffer.buffer[CH_DBG_TRACE_BUFFER_SIZE]) {
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 8000852:	bf28      	it	cs
 8000854:	f102 0338 	addcs.w	r3, r2, #56	; 0x38
  }
}
 8000858:	bc30      	pop	{r4, r5}
    ch.dbg.trace_buffer.ptr = &ch.dbg.trace_buffer.buffer[0];
 800085a:	6353      	str	r3, [r2, #52]	; 0x34
}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	24000888 	.word	0x24000888
 8000864:	e0001000 	.word	0xe0001000
	...

08000870 <_trace_switch.part.0>:
void _trace_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 8000870:	f890 3020 	ldrb.w	r3, [r0, #32]
 8000874:	4905      	ldr	r1, [pc, #20]	; (800088c <_trace_switch.part.0+0x1c>)
 8000876:	00db      	lsls	r3, r3, #3
    ch.dbg.trace_buffer.ptr->state       = (uint8_t)otp->state;
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
    ch.dbg.trace_buffer.ptr->u.sw.wtobjp = otp->u.wtobjp;
 8000878:	6a40      	ldr	r0, [r0, #36]	; 0x24
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_SWITCH;
 800087a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	7013      	strb	r3, [r2, #0]
    ch.dbg.trace_buffer.ptr->u.sw.ntp    = currp;
 8000882:	698b      	ldr	r3, [r1, #24]
 8000884:	e9c2 3002 	strd	r3, r0, [r2, #8]
    trace_next();
 8000888:	f7ff bfd2 	b.w	8000830 <trace_next>
 800088c:	24000888 	.word	0x24000888

08000890 <_trace_isr_leave>:
 *
 * @notapi
 */
void _trace_isr_leave(const char *isr) {

  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000890:	4a09      	ldr	r2, [pc, #36]	; (80008b8 <_trace_isr_leave+0x28>)
 8000892:	8e13      	ldrh	r3, [r2, #48]	; 0x30
void _trace_isr_leave(const char *isr) {
 8000894:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 8000896:	f013 0402 	ands.w	r4, r3, #2
 800089a:	d000      	beq.n	800089e <_trace_isr_leave+0xe>
    ch.dbg.trace_buffer.ptr->state       = 0U;
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
    trace_next();
    port_unlock_from_isr();
  }
}
 800089c:	bd10      	pop	{r4, pc}
 800089e:	2320      	movs	r3, #32
 80008a0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80008a4:	2103      	movs	r1, #3
 80008a6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80008a8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_LEAVE;
 80008aa:	7019      	strb	r1, [r3, #0]
    trace_next();
 80008ac:	f7ff ffc0 	bl	8000830 <trace_next>
 80008b0:	f384 8811 	msr	BASEPRI, r4
}
 80008b4:	bd10      	pop	{r4, pc}
 80008b6:	bf00      	nop
 80008b8:	24000888 	.word	0x24000888
 80008bc:	00000000 	.word	0x00000000

080008c0 <_trace_isr_enter>:
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008c0:	4a09      	ldr	r2, [pc, #36]	; (80008e8 <_trace_isr_enter+0x28>)
 80008c2:	8e13      	ldrh	r3, [r2, #48]	; 0x30
void _trace_isr_enter(const char *isr) {
 80008c4:	b510      	push	{r4, lr}
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_ISR) == 0U) {
 80008c6:	f013 0402 	ands.w	r4, r3, #2
 80008ca:	d000      	beq.n	80008ce <_trace_isr_enter+0xe>
}
 80008cc:	bd10      	pop	{r4, pc}
 80008ce:	2320      	movs	r3, #32
 80008d0:	f383 8811 	msr	BASEPRI, r3
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80008d4:	2102      	movs	r1, #2
 80008d6:	6b53      	ldr	r3, [r2, #52]	; 0x34
    ch.dbg.trace_buffer.ptr->u.isr.name  = isr;
 80008d8:	6098      	str	r0, [r3, #8]
    ch.dbg.trace_buffer.ptr->type        = CH_TRACE_TYPE_ISR_ENTER;
 80008da:	7019      	strb	r1, [r3, #0]
    trace_next();
 80008dc:	f7ff ffa8 	bl	8000830 <trace_next>
 80008e0:	f384 8811 	msr	BASEPRI, r4
}
 80008e4:	bd10      	pop	{r4, pc}
 80008e6:	bf00      	nop
 80008e8:	24000888 	.word	0x24000888
 80008ec:	00000000 	.word	0x00000000

080008f0 <chSysPolledDelayX>:
 80008f0:	4a03      	ldr	r2, [pc, #12]	; (8000900 <chSysPolledDelayX+0x10>)
 80008f2:	6851      	ldr	r1, [r2, #4]
 80008f4:	6853      	ldr	r3, [r2, #4]
 *
 * @xclass
 */
bool chSysIsCounterWithinX(rtcnt_t cnt, rtcnt_t start, rtcnt_t end) {

  return (bool)(((rtcnt_t)cnt - (rtcnt_t)start) <
 80008f6:	1a5b      	subs	r3, r3, r1
 */
void chSysPolledDelayX(rtcnt_t cycles) {
  rtcnt_t start = chSysGetRealtimeCounterX();
  rtcnt_t end  = start + cycles;

  while (chSysIsCounterWithinX(chSysGetRealtimeCounterX(), start, end)) {
 80008f8:	4298      	cmp	r0, r3
 80008fa:	d8fb      	bhi.n	80008f4 <chSysPolledDelayX+0x4>
  }
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e0001000 	.word	0xe0001000
	...

08000910 <_idle_thread>:
}
 8000910:	e7fe      	b.n	8000910 <_idle_thread>
 8000912:	bf00      	nop
	...

08000920 <sdc_lld_is_write_protected>:
bool sdc_lld_sync(SDCDriver *sdcp) {

  /* CHTODO: Implement.*/
  (void)sdcp;
  return HAL_SUCCESS;
}
 8000920:	2000      	movs	r0, #0
 8000922:	4770      	bx	lr
	...

08000930 <sdc_lld_is_card_inserted>:
bool sdc_lld_is_card_inserted(SDCDriver *sdcp) {

  (void)sdcp;
  /* CHTODO: Fill the implementation.*/
  return true;
}
 8000930:	2001      	movs	r0, #1
 8000932:	4770      	bx	lr
	...

08000940 <sdc_lld_collect_errors.isra.0>:
  if (sta & SDMMC_STA_CCRCFAIL)
 8000940:	f001 0301 	and.w	r3, r1, #1
  if (sta & SDMMC_STA_DCRCFAIL)
 8000944:	078a      	lsls	r2, r1, #30
    errors |= SDC_DATA_CRC_ERROR;
 8000946:	bf48      	it	mi
 8000948:	f043 0302 	orrmi.w	r3, r3, #2
  if (sta & SDMMC_STA_CTIMEOUT)
 800094c:	074a      	lsls	r2, r1, #29
    errors |= SDC_COMMAND_TIMEOUT;
 800094e:	bf48      	it	mi
 8000950:	f043 0308 	orrmi.w	r3, r3, #8
  if (sta & SDMMC_STA_DTIMEOUT)
 8000954:	070a      	lsls	r2, r1, #28
    errors |= SDC_DATA_TIMEOUT;
 8000956:	bf48      	it	mi
 8000958:	f043 0304 	orrmi.w	r3, r3, #4
  if (sta & SDMMC_STA_TXUNDERR)
 800095c:	06ca      	lsls	r2, r1, #27
    errors |= SDC_TX_UNDERRUN;
 800095e:	bf48      	it	mi
 8000960:	f043 0310 	orrmi.w	r3, r3, #16
  if (sta & SDMMC_STA_RXOVERR)
 8000964:	068a      	lsls	r2, r1, #26
  sdcp->errors |= errors;
 8000966:	6802      	ldr	r2, [r0, #0]
    errors |= SDC_RX_OVERRUN;
 8000968:	bf48      	it	mi
 800096a:	f043 0320 	orrmi.w	r3, r3, #32
  sdcp->errors |= errors;
 800096e:	4313      	orrs	r3, r2
 8000970:	6003      	str	r3, [r0, #0]
}
 8000972:	4770      	bx	lr
	...

08000980 <sdc_lld_send_cmd_long_crc>:
                               uint32_t *resp) {
 8000980:	b510      	push	{r4, lr}
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_WAITRESP_1 |
 8000982:	f441 5198 	orr.w	r1, r1, #4864	; 0x1300
  sdcp->sdmmc->ARG = arg;
 8000986:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000988:	60a2      	str	r2, [r4, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_WAITRESP_1 |
 800098a:	60e1      	str	r1, [r4, #12]
  while (((sta = sdcp->sdmmc->STA) & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 800098c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800098e:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8000992:	d0fb      	beq.n	800098c <sdc_lld_send_cmd_long_crc+0xc>
  sdcp->sdmmc->ICR = sta & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 8000994:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((sta & (SDMMC_STA_ERROR_MASK)) != 0) {
 8000996:	f011 023f 	ands.w	r2, r1, #63	; 0x3f
 800099a:	d109      	bne.n	80009b0 <sdc_lld_send_cmd_long_crc+0x30>
  *resp++ = sdcp->sdmmc->RESP4;
 800099c:	6a21      	ldr	r1, [r4, #32]
  return HAL_SUCCESS;
 800099e:	4610      	mov	r0, r2
  *resp++ = sdcp->sdmmc->RESP4;
 80009a0:	6019      	str	r1, [r3, #0]
  *resp++ = sdcp->sdmmc->RESP3;
 80009a2:	69e2      	ldr	r2, [r4, #28]
 80009a4:	605a      	str	r2, [r3, #4]
  *resp++ = sdcp->sdmmc->RESP2;
 80009a6:	69a2      	ldr	r2, [r4, #24]
 80009a8:	609a      	str	r2, [r3, #8]
  *resp   = sdcp->sdmmc->RESP1;
 80009aa:	6962      	ldr	r2, [r4, #20]
 80009ac:	60da      	str	r2, [r3, #12]
}
 80009ae:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80009b0:	3034      	adds	r0, #52	; 0x34
 80009b2:	f7ff ffc5 	bl	8000940 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 80009b6:	2001      	movs	r0, #1
}
 80009b8:	bd10      	pop	{r4, pc}
 80009ba:	bf00      	nop
 80009bc:	0000      	movs	r0, r0
	...

080009c0 <sdc_lld_send_cmd_short_crc>:
                                uint32_t *resp) {
 80009c0:	b510      	push	{r4, lr}
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 80009c2:	f441 5188 	orr.w	r1, r1, #4352	; 0x1100
  sdcp->sdmmc->ARG = arg;
 80009c6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80009c8:	60a2      	str	r2, [r4, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 80009ca:	60e1      	str	r1, [r4, #12]
  while (((sta = sdcp->sdmmc->STA) & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 80009cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80009ce:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 80009d2:	d0fb      	beq.n	80009cc <sdc_lld_send_cmd_short_crc+0xc>
  sdcp->sdmmc->ICR = sta & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 80009d4:	63a2      	str	r2, [r4, #56]	; 0x38
  if ((sta & (SDMMC_STA_CTIMEOUT | SDMMC_STA_CCRCFAIL)) != 0) {
 80009d6:	f011 0205 	ands.w	r2, r1, #5
 80009da:	d103      	bne.n	80009e4 <sdc_lld_send_cmd_short_crc+0x24>
  *resp = sdcp->sdmmc->RESP1;
 80009dc:	6961      	ldr	r1, [r4, #20]
  return HAL_SUCCESS;
 80009de:	4610      	mov	r0, r2
  *resp = sdcp->sdmmc->RESP1;
 80009e0:	6019      	str	r1, [r3, #0]
}
 80009e2:	bd10      	pop	{r4, pc}
    sdc_lld_collect_errors(sdcp, sta);
 80009e4:	3034      	adds	r0, #52	; 0x34
 80009e6:	f7ff ffab 	bl	8000940 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 80009ea:	2001      	movs	r0, #1
}
 80009ec:	bd10      	pop	{r4, pc}
 80009ee:	bf00      	nop

080009f0 <sdc_lld_error_cleanup>:
  uint32_t sta = sdcp->sdmmc->STA;
 80009f0:	6c03      	ldr	r3, [r0, #64]	; 0x40
                                  uint32_t *resp) {
 80009f2:	b570      	push	{r4, r5, r6, lr}
 80009f4:	460d      	mov	r5, r1
 80009f6:	4616      	mov	r6, r2
  uint32_t sta = sdcp->sdmmc->STA;
 80009f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                                  uint32_t *resp) {
 80009fa:	4604      	mov	r4, r0
  sta = sdcp->sdmmc->STA;
 80009fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
  sdc_lld_collect_errors(sdcp, sta);
 80009fe:	3034      	adds	r0, #52	; 0x34
  sdcp->sdmmc->ICR = sta;
 8000a00:	6399      	str	r1, [r3, #56]	; 0x38
  sdc_lld_collect_errors(sdcp, sta);
 8000a02:	f7ff ff9d 	bl	8000940 <sdc_lld_collect_errors.isra.0>
  if (n > 1)
 8000a06:	2d01      	cmp	r5, #1
 8000a08:	d800      	bhi.n	8000a0c <sdc_lld_error_cleanup+0x1c>
}
 8000a0a:	bd70      	pop	{r4, r5, r6, pc}
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8000a0c:	4633      	mov	r3, r6
 8000a0e:	4620      	mov	r0, r4
 8000a10:	2200      	movs	r2, #0
 8000a12:	210c      	movs	r1, #12
}
 8000a14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8000a18:	f7ff bfd2 	b.w	80009c0 <sdc_lld_send_cmd_short_crc>
 8000a1c:	0000      	movs	r0, r0
	...

08000a20 <usb_lld_start_in>:
 * @param[in] ep        endpoint number
 *
 * @notapi
 */
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a20:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_in(USBDriver *usbp, usbep_t ep) {
 8000a24:	b470      	push	{r4, r5, r6}
  USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000a26:	68dc      	ldr	r4, [r3, #12]
 8000a28:	6962      	ldr	r2, [r4, #20]

  /* Transfer initialization.*/
  isp->totsize = isp->txsize;
 8000a2a:	6813      	ldr	r3, [r2, #0]
 8000a2c:	60d3      	str	r3, [r2, #12]
  if (isp->txsize == 0) {
 8000a2e:	b9fb      	cbnz	r3, 8000a70 <usb_lld_start_in+0x50>
    /* Special case, sending zero size packet.*/
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_PKTCNT(1) | DIEPTSIZ_XFRSIZ(0);
 8000a30:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8000a34:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000a38:	eb02 1341 	add.w	r3, r2, r1, lsl #5
 8000a3c:	f8c3 0910 	str.w	r0, [r3, #2320]	; 0x910
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
                                 DIEPTSIZ_XFRSIZ(isp->txsize);
  }

  /* Special case of isochronous endpoint.*/
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000a40:	6823      	ldr	r3, [r4, #0]
 8000a42:	f003 0303 	and.w	r3, r3, #3
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d029      	beq.n	8000a9e <usb_lld_start_in+0x7e>
 8000a4a:	b208      	sxth	r0, r1
    else
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
  }

  /* Starting operation.*/
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000a4c:	eb02 1040 	add.w	r0, r2, r0, lsl #5
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000a50:	2301      	movs	r3, #1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000a52:	f8d0 4900 	ldr.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000a56:	fa03 f101 	lsl.w	r1, r3, r1
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_EPENA | DIEPCTL_CNAK;
 8000a5a:	f044 4404 	orr.w	r4, r4, #2214592512	; 0x84000000
 8000a5e:	f8c0 4900 	str.w	r4, [r0, #2304]	; 0x900
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000a62:	f8d2 3834 	ldr.w	r3, [r2, #2100]	; 0x834
 8000a66:	4319      	orrs	r1, r3
}
 8000a68:	bc70      	pop	{r4, r5, r6}
  usbp->otg->DIEPEMPMSK |= DIEPEMPMSK_INEPTXFEM(ep);
 8000a6a:	f8c2 1834 	str.w	r1, [r2, #2100]	; 0x834
}
 8000a6e:	4770      	bx	lr
    if ((ep == 0) && (isp->txsize > EP0_MAX_INSIZE))
 8000a70:	b909      	cbnz	r1, 8000a76 <usb_lld_start_in+0x56>
 8000a72:	2b40      	cmp	r3, #64	; 0x40
 8000a74:	d824      	bhi.n	8000ac0 <usb_lld_start_in+0xa0>
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8000a76:	8a25      	ldrh	r5, [r4, #16]
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8000a78:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8000a7c:	1e68      	subs	r0, r5, #1
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8000a7e:	eb02 1641 	add.w	r6, r2, r1, lsl #5
    uint32_t pcnt = (isp->txsize + usbp->epc[ep]->in_maxsize - 1) /
 8000a82:	4418      	add	r0, r3
 8000a84:	fbb0 f0f5 	udiv	r0, r0, r5
    usbp->otg->ie[ep].DIEPTSIZ = DIEPTSIZ_MCNT(1) | DIEPTSIZ_PKTCNT(pcnt) |
 8000a88:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8000a8c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a90:	f8c6 3910 	str.w	r3, [r6, #2320]	; 0x910
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000a94:	6823      	ldr	r3, [r4, #0]
 8000a96:	f003 0303 	and.w	r3, r3, #3
 8000a9a:	2b01      	cmp	r3, #1
 8000a9c:	d1d5      	bne.n	8000a4a <usb_lld_start_in+0x2a>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8000a9e:	f8d2 3808 	ldr.w	r3, [r2, #2056]	; 0x808
 8000aa2:	b208      	sxth	r0, r1
 8000aa4:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000aa8:	eb02 1341 	add.w	r3, r2, r1, lsl #5
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SEVNFRM;
 8000aac:	f8d3 4900 	ldr.w	r4, [r3, #2304]	; 0x900
 8000ab0:	bf14      	ite	ne
 8000ab2:	f044 5480 	orrne.w	r4, r4, #268435456	; 0x10000000
      usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_SODDFRM;
 8000ab6:	f044 5400 	orreq.w	r4, r4, #536870912	; 0x20000000
 8000aba:	f8c3 4900 	str.w	r4, [r3, #2304]	; 0x900
 8000abe:	e7c5      	b.n	8000a4c <usb_lld_start_in+0x2c>
      isp->txsize = EP0_MAX_INSIZE;
 8000ac0:	2540      	movs	r5, #64	; 0x40
 8000ac2:	462b      	mov	r3, r5
 8000ac4:	6015      	str	r5, [r2, #0]
 8000ac6:	e7d6      	b.n	8000a76 <usb_lld_start_in+0x56>
	...

08000ad0 <otg_epin_handler.constprop.0>:
  stm32_otg_t *otgp = usbp->otg;
 8000ad0:	4a20      	ldr	r2, [pc, #128]	; (8000b54 <otg_epin_handler.constprop.0+0x84>)
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8000ad2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  stm32_otg_t *otgp = usbp->otg;
 8000ad4:	f8d2 6090 	ldr.w	r6, [r2, #144]	; 0x90
static void otg_epin_handler(USBDriver *usbp, usbep_t ep) {
 8000ad8:	4604      	mov	r4, r0
  uint32_t epint = otgp->ie[ep].DIEPINT;
 8000ada:	eb06 1340 	add.w	r3, r6, r0, lsl #5
 8000ade:	f8d3 5908 	ldr.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8000ae2:	07e8      	lsls	r0, r5, #31
  otgp->ie[ep].DIEPINT = epint;
 8000ae4:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  if ((epint & DIEPINT_XFRC) && (otgp->DIEPMSK & DIEPMSK_XFRCM)) {
 8000ae8:	d503      	bpl.n	8000af2 <otg_epin_handler.constprop.0+0x22>
 8000aea:	f8d6 3810 	ldr.w	r3, [r6, #2064]	; 0x810
 8000aee:	07d9      	lsls	r1, r3, #31
 8000af0:	d408      	bmi.n	8000b04 <otg_epin_handler.constprop.0+0x34>
  if ((epint & DIEPINT_TXFE) &&
 8000af2:	062b      	lsls	r3, r5, #24
 8000af4:	d505      	bpl.n	8000b02 <otg_epin_handler.constprop.0+0x32>
      (otgp->DIEPEMPMSK & DIEPEMPMSK_INEPTXFEM(ep))) {
 8000af6:	2301      	movs	r3, #1
 8000af8:	f8d6 2834 	ldr.w	r2, [r6, #2100]	; 0x834
 8000afc:	40a3      	lsls	r3, r4
  if ((epint & DIEPINT_TXFE) &&
 8000afe:	4213      	tst	r3, r2
 8000b00:	d115      	bne.n	8000b2e <otg_epin_handler.constprop.0+0x5e>
}
 8000b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBInEndpointState *isp = usbp->epc[ep]->in_state;
 8000b04:	eb02 0384 	add.w	r3, r2, r4, lsl #2
 8000b08:	68d8      	ldr	r0, [r3, #12]
 8000b0a:	6943      	ldr	r3, [r0, #20]
    if (isp->txsize < isp->totsize) {
 8000b0c:	681f      	ldr	r7, [r3, #0]
 8000b0e:	68d9      	ldr	r1, [r3, #12]
 8000b10:	428f      	cmp	r7, r1
 8000b12:	d311      	bcc.n	8000b38 <otg_epin_handler.constprop.0+0x68>
      _usb_isr_invoke_in_cb(usbp, ep);
 8000b14:	2101      	movs	r1, #1
 8000b16:	8913      	ldrh	r3, [r2, #8]
 8000b18:	6887      	ldr	r7, [r0, #8]
 8000b1a:	40a1      	lsls	r1, r4
 8000b1c:	ea23 0301 	bic.w	r3, r3, r1
 8000b20:	8113      	strh	r3, [r2, #8]
 8000b22:	2f00      	cmp	r7, #0
 8000b24:	d0e5      	beq.n	8000af2 <otg_epin_handler.constprop.0+0x22>
 8000b26:	4610      	mov	r0, r2
 8000b28:	4621      	mov	r1, r4
 8000b2a:	47b8      	blx	r7
 8000b2c:	e7e1      	b.n	8000af2 <otg_epin_handler.constprop.0+0x22>
    otg_txfifo_handler(usbp, ep);
 8000b2e:	4620      	mov	r0, r4
}
 8000b30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    otg_txfifo_handler(usbp, ep);
 8000b34:	f7ff bcd4 	b.w	80004e0 <otg_txfifo_handler.constprop.0>
      isp->txsize = isp->totsize - isp->txsize;
 8000b38:	1bc9      	subs	r1, r1, r7
      isp->txcnt  = 0;
 8000b3a:	2700      	movs	r7, #0
 8000b3c:	2020      	movs	r0, #32
 8000b3e:	e9c3 1700 	strd	r1, r7, [r3]
 8000b42:	f380 8811 	msr	BASEPRI, r0
      usb_lld_start_in(usbp, ep);
 8000b46:	4610      	mov	r0, r2
 8000b48:	4621      	mov	r1, r4
 8000b4a:	f7ff ff69 	bl	8000a20 <usb_lld_start_in>
 8000b4e:	f387 8811 	msr	BASEPRI, r7
 8000b52:	e7ce      	b.n	8000af2 <otg_epin_handler.constprop.0+0x22>
 8000b54:	240007a8 	.word	0x240007a8
	...

08000b60 <usb_lld_start_out>:
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000b60:	eb00 0381 	add.w	r3, r0, r1, lsl #2
void usb_lld_start_out(USBDriver *usbp, usbep_t ep) {
 8000b64:	b470      	push	{r4, r5, r6}
  USBOutEndpointState *osp = usbp->epc[ep]->out_state;
 8000b66:	68dc      	ldr	r4, [r3, #12]
 8000b68:	69a3      	ldr	r3, [r4, #24]
  osp->totsize = osp->rxsize;
 8000b6a:	681e      	ldr	r6, [r3, #0]
 8000b6c:	60de      	str	r6, [r3, #12]
  if ((ep == 0) && (osp->rxsize > EP0_MAX_OUTSIZE))
 8000b6e:	b909      	cbnz	r1, 8000b74 <usb_lld_start_out+0x14>
 8000b70:	2e40      	cmp	r6, #64	; 0x40
 8000b72:	d824      	bhi.n	8000bbe <usb_lld_start_out+0x5e>
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000b74:	8a63      	ldrh	r3, [r4, #18]
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000b76:	6824      	ldr	r4, [r4, #0]
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000b78:	1e5a      	subs	r2, r3, #1
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000b7a:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000b7e:	f004 0403 	and.w	r4, r4, #3
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000b82:	4432      	add	r2, r6
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000b84:	eb00 1541 	add.w	r5, r0, r1, lsl #5
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000b88:	2c01      	cmp	r4, #1
  pcnt   = (osp->rxsize + usbp->epc[ep]->out_maxsize - 1U) /
 8000b8a:	fbb2 f2f3 	udiv	r2, r2, r3
  rxsize = (pcnt * usbp->epc[ep]->out_maxsize + 3U) & 0xFFFFFFFCU;
 8000b8e:	fb02 f303 	mul.w	r3, r2, r3
 8000b92:	f103 0303 	add.w	r3, r3, #3
 8000b96:	f023 0303 	bic.w	r3, r3, #3
  usbp->otg->oe[ep].DOEPTSIZ = DOEPTSIZ_STUPCNT(3) | DOEPTSIZ_PKTCNT(pcnt) |
 8000b9a:	ea43 43c2 	orr.w	r3, r3, r2, lsl #19
 8000b9e:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8000ba2:	f8c5 3b10 	str.w	r3, [r5, #2832]	; 0xb10
  if ((usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) == USB_EP_MODE_TYPE_ISOC) {
 8000ba6:	d00e      	beq.n	8000bc6 <usb_lld_start_out+0x66>
 8000ba8:	b209      	sxth	r1, r1
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8000baa:	eb00 1141 	add.w	r1, r0, r1, lsl #5
 8000bae:	f8d1 3b00 	ldr.w	r3, [r1, #2816]	; 0xb00
 8000bb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
}
 8000bb6:	bc70      	pop	{r4, r5, r6}
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_EPENA | DOEPCTL_CNAK;
 8000bb8:	f8c1 3b00 	str.w	r3, [r1, #2816]	; 0xb00
}
 8000bbc:	4770      	bx	lr
      osp->rxsize = EP0_MAX_OUTSIZE;
 8000bbe:	2240      	movs	r2, #64	; 0x40
 8000bc0:	4616      	mov	r6, r2
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	e7d6      	b.n	8000b74 <usb_lld_start_out+0x14>
    if (usbp->otg->DSTS & DSTS_FNSOF_ODD)
 8000bc6:	f8d0 3808 	ldr.w	r3, [r0, #2056]	; 0x808
 8000bca:	eb00 1241 	add.w	r2, r0, r1, lsl #5
 8000bce:	b209      	sxth	r1, r1
 8000bd0:	f413 7f80 	tst.w	r3, #256	; 0x100
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SEVNFRM;
 8000bd4:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8000bd8:	bf14      	ite	ne
 8000bda:	f043 5380 	orrne.w	r3, r3, #268435456	; 0x10000000
      usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_SODDFRM;
 8000bde:	f043 5300 	orreq.w	r3, r3, #536870912	; 0x20000000
 8000be2:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8000be6:	e7e0      	b.n	8000baa <usb_lld_start_out+0x4a>
	...

08000bf0 <otg_epout_handler.constprop.0>:
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8000bf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  stm32_otg_t *otgp = usbp->otg;
 8000bf4:	4f24      	ldr	r7, [pc, #144]	; (8000c88 <otg_epout_handler.constprop.0+0x98>)
static void otg_epout_handler(USBDriver *usbp, usbep_t ep) {
 8000bf6:	4604      	mov	r4, r0
  stm32_otg_t *otgp = usbp->otg;
 8000bf8:	f8d7 6090 	ldr.w	r6, [r7, #144]	; 0x90
  uint32_t epint = otgp->oe[ep].DOEPINT;
 8000bfc:	eb06 1340 	add.w	r3, r6, r0, lsl #5
 8000c00:	f8d3 5b08 	ldr.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8000c04:	0728      	lsls	r0, r5, #28
  otgp->oe[ep].DOEPINT = epint;
 8000c06:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  if ((epint & DOEPINT_STUP) && (otgp->DOEPMSK & DOEPMSK_STUPM)) {
 8000c0a:	d503      	bpl.n	8000c14 <otg_epout_handler.constprop.0+0x24>
 8000c0c:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8000c10:	0719      	lsls	r1, r3, #28
 8000c12:	d431      	bmi.n	8000c78 <otg_epout_handler.constprop.0+0x88>
  if ((epint & DOEPINT_XFRC) && (otgp->DOEPMSK & DOEPMSK_XFRCM)) {
 8000c14:	07ea      	lsls	r2, r5, #31
 8000c16:	d52d      	bpl.n	8000c74 <otg_epout_handler.constprop.0+0x84>
 8000c18:	f8d6 3814 	ldr.w	r3, [r6, #2068]	; 0x814
 8000c1c:	07db      	lsls	r3, r3, #31
 8000c1e:	d529      	bpl.n	8000c74 <otg_epout_handler.constprop.0+0x84>
    osp = usbp->epc[ep]->out_state;
 8000c20:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8000c24:	68d9      	ldr	r1, [r3, #12]
    if (ep == 0) {
 8000c26:	b95c      	cbnz	r4, 8000c40 <otg_epout_handler.constprop.0+0x50>
    osp = usbp->epc[ep]->out_state;
 8000c28:	698a      	ldr	r2, [r1, #24]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8000c2a:	8a48      	ldrh	r0, [r1, #18]
 8000c2c:	6855      	ldr	r5, [r2, #4]
 8000c2e:	fbb5 f3f0 	udiv	r3, r5, r0
 8000c32:	fb00 5313 	mls	r3, r0, r3, r5
 8000c36:	b91b      	cbnz	r3, 8000c40 <otg_epout_handler.constprop.0+0x50>
          (osp->rxsize < osp->totsize)) {
 8000c38:	6810      	ldr	r0, [r2, #0]
 8000c3a:	68d3      	ldr	r3, [r2, #12]
      if (((osp->rxcnt % usbp->epc[ep]->out_maxsize) == 0) &&
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d30d      	bcc.n	8000c5c <otg_epout_handler.constprop.0+0x6c>
    _usb_isr_invoke_out_cb(usbp, ep);
 8000c40:	2201      	movs	r2, #1
 8000c42:	897b      	ldrh	r3, [r7, #10]
 8000c44:	68cd      	ldr	r5, [r1, #12]
 8000c46:	40a2      	lsls	r2, r4
 8000c48:	ea23 0302 	bic.w	r3, r3, r2
 8000c4c:	817b      	strh	r3, [r7, #10]
 8000c4e:	b18d      	cbz	r5, 8000c74 <otg_epout_handler.constprop.0+0x84>
 8000c50:	4621      	mov	r1, r4
 8000c52:	462b      	mov	r3, r5
 8000c54:	480c      	ldr	r0, [pc, #48]	; (8000c88 <otg_epout_handler.constprop.0+0x98>)
}
 8000c56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _usb_isr_invoke_out_cb(usbp, ep);
 8000c5a:	4718      	bx	r3
        osp->rxsize = osp->totsize - osp->rxsize;
 8000c5c:	1a1b      	subs	r3, r3, r0
        osp->rxcnt  = 0;
 8000c5e:	6054      	str	r4, [r2, #4]
 8000c60:	2120      	movs	r1, #32
        osp->rxsize = osp->totsize - osp->rxsize;
 8000c62:	6013      	str	r3, [r2, #0]
 8000c64:	f381 8811 	msr	BASEPRI, r1
        usb_lld_start_out(usbp, ep);
 8000c68:	4807      	ldr	r0, [pc, #28]	; (8000c88 <otg_epout_handler.constprop.0+0x98>)
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	f7ff ff78 	bl	8000b60 <usb_lld_start_out>
 8000c70:	f384 8811 	msr	BASEPRI, r4
}
 8000c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    _usb_isr_invoke_setup_cb(usbp, ep);
 8000c78:	eb07 0384 	add.w	r3, r7, r4, lsl #2
 8000c7c:	4621      	mov	r1, r4
 8000c7e:	4638      	mov	r0, r7
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	4798      	blx	r3
 8000c86:	e7c5      	b.n	8000c14 <otg_epout_handler.constprop.0+0x24>
 8000c88:	240007a8 	.word	0x240007a8
 8000c8c:	00000000 	.word	0x00000000

08000c90 <_usb_ep0out>:
 * @param[in] usbp      pointer to the @p USBDriver object
 * @param[in] ep        endpoint number, always zero
 *
 * @notapi
 */
void _usb_ep0out(USBDriver *usbp, usbep_t ep) {
 8000c90:	b538      	push	{r3, r4, r5, lr}
 8000c92:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8000c96:	4604      	mov	r4, r0
 8000c98:	2b15      	cmp	r3, #21
 8000c9a:	d816      	bhi.n	8000cca <_usb_ep0out+0x3a>
 8000c9c:	e8df f003 	tbb	[pc, r3]
 8000ca0:	15151516 	.word	0x15151516
 8000ca4:	15161515 	.word	0x15161515
 8000ca8:	16161615 	.word	0x16161615
 8000cac:	15151515 	.word	0x15151515
 8000cb0:	15151515 	.word	0x15151515
 8000cb4:	2d0b      	.short	0x2d0b
    return;
  case USB_EP0_OUT_WAITING_STS:
    /* Status packet received, it must be zero sized, invoking the callback
       if defined.*/
#if (USB_EP0_STATUS_STAGE == USB_EP0_STATUS_STAGE_SW)
    if (usbGetReceiveTransactionSizeX(usbp, 0) != 0U) {
 8000cb6:	68c3      	ldr	r3, [r0, #12]
 8000cb8:	699b      	ldr	r3, [r3, #24]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	b92b      	cbnz	r3, 8000cca <_usb_ep0out+0x3a>
      break;
    }
#endif
    if (usbp->ep0endcb != NULL) {
 8000cbe:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8000cc0:	b103      	cbz	r3, 8000cc4 <_usb_ep0out+0x34>
      usbp->ep0endcb(usbp);
 8000cc2:	4798      	blx	r3
    }
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
    usbp->ep0state = USB_EP0_ERROR;
    return;
  default:
    osalDbgAssert(false, "EP0 state machine invalid state");
  }
}
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 *
 * @notapi
 */
void usb_lld_stall_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8000ccc:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000cd0:	6841      	ldr	r1, [r0, #4]
 8000cd2:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000cd6:	680d      	ldr	r5, [r1, #0]
 8000cd8:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000cdc:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8000ce0:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8000ce4:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000ce8:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8000cec:	b10d      	cbz	r5, 8000cf2 <_usb_ep0out+0x62>
 8000cee:	2106      	movs	r1, #6
 8000cf0:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000cf2:	2306      	movs	r3, #6
 8000cf4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8000cf8:	bd38      	pop	{r3, r4, r5, pc}
    usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8000cfa:	220b      	movs	r2, #11
 8000cfc:	2320      	movs	r3, #32
 8000cfe:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
 8000d02:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000d06:	8902      	ldrh	r2, [r0, #8]
  isp->txbuf  = buf;
 8000d08:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8000d0a:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_in(usbp, ep);
 8000d10:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
 8000d12:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000d14:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8000d16:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000d18:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000d1c:	f7ff fe80 	bl	8000a20 <usb_lld_start_in>
 8000d20:	f385 8811 	msr	BASEPRI, r5
}
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop
	...

08000d30 <_usb_ep0in>:
void _usb_ep0in(USBDriver *usbp, usbep_t ep) {
 8000d30:	b538      	push	{r3, r4, r5, lr}
 8000d32:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8000d36:	4604      	mov	r4, r0
 8000d38:	2b15      	cmp	r3, #21
 8000d3a:	d822      	bhi.n	8000d82 <_usb_ep0in+0x52>
 8000d3c:	e8df f003 	tbb	[pc, r3]
 8000d40:	2121210b 	.word	0x2121210b
 8000d44:	210b2121 	.word	0x210b2121
 8000d48:	49322221 	.word	0x49322221
 8000d4c:	21212121 	.word	0x21212121
 8000d50:	21212121 	.word	0x21212121
 8000d54:	0b0b      	.short	0x0b0b
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8000d56:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
    _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8000d5a:	6841      	ldr	r1, [r0, #4]
 8000d5c:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 8000d60:	680d      	ldr	r5, [r1, #0]
 8000d62:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d66:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8000d6a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 8000d6e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d72:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8000d76:	b10d      	cbz	r5, 8000d7c <_usb_ep0in+0x4c>
 8000d78:	2106      	movs	r1, #6
 8000d7a:	47a8      	blx	r5
    usbp->ep0state = USB_EP0_ERROR;
 8000d7c:	2306      	movs	r3, #6
 8000d7e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8000d82:	bd38      	pop	{r3, r4, r5, pc}
  hw |= (uint16_t)*p << 8U;
 8000d84:	f890 2087 	ldrb.w	r2, [r0, #135]	; 0x87
 8000d88:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    if ((usbp->ep0n < max) &&
 8000d8c:	6f81      	ldr	r1, [r0, #120]	; 0x78
    max = (size_t)get_hword(&usbp->setup[6]);
 8000d8e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    if ((usbp->ep0n < max) &&
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d206      	bcs.n	8000da4 <_usb_ep0in+0x74>
        ((usbp->ep0n % usbp->epc[0]->in_maxsize) == 0U)) {
 8000d96:	68c3      	ldr	r3, [r0, #12]
 8000d98:	8a1b      	ldrh	r3, [r3, #16]
 8000d9a:	fbb1 f5f3 	udiv	r5, r1, r3
 8000d9e:	fb03 1515 	mls	r5, r3, r5, r1
    if ((usbp->ep0n < max) &&
 8000da2:	b1ed      	cbz	r5, 8000de0 <_usb_ep0in+0xb0>
    usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 8000da4:	2214      	movs	r2, #20
 8000da6:	2320      	movs	r3, #32
 8000da8:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8000dac:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000db0:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
 8000db2:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8000db4:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
 8000db6:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000db8:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_out(usbp, ep);
 8000dbc:	4629      	mov	r1, r5
  osp = usbp->epc[ep]->out_state;
 8000dbe:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000dc0:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
 8000dc2:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 8000dc4:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 8000dc8:	f7ff feca 	bl	8000b60 <usb_lld_start_out>
 8000dcc:	f385 8811 	msr	BASEPRI, r5
}
 8000dd0:	bd38      	pop	{r3, r4, r5, pc}
    if (usbp->ep0endcb != NULL) {
 8000dd2:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8000dd4:	b103      	cbz	r3, 8000dd8 <_usb_ep0in+0xa8>
      usbp->ep0endcb(usbp);
 8000dd6:	4798      	blx	r3
    usbp->ep0state = USB_EP0_STP_WAITING;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	2320      	movs	r3, #32
 8000de2:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000de6:	8902      	ldrh	r2, [r0, #8]
  usb_lld_start_in(usbp, ep);
 8000de8:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
 8000dea:	68c3      	ldr	r3, [r0, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000dec:	f042 0201 	orr.w	r2, r2, #1
  isp = usbp->epc[ep]->in_state;
 8000df0:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000df2:	8102      	strh	r2, [r0, #8]
  isp->txbuf  = buf;
 8000df4:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8000df6:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8000dfa:	f7ff fe11 	bl	8000a20 <usb_lld_start_in>
 8000dfe:	f385 8811 	msr	BASEPRI, r5
      usbp->ep0state = USB_EP0_IN_WAITING_TX0;
 8000e02:	230a      	movs	r3, #10
 8000e04:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8000e08:	bd38      	pop	{r3, r4, r5, pc}
 8000e0a:	bf00      	nop
 8000e0c:	0000      	movs	r0, r0
	...

08000e10 <usbStartTransmitI>:
                       const uint8_t *buf, size_t n) {
 8000e10:	b5f0      	push	{r4, r5, r6, r7, lr}
  isp = usbp->epc[ep]->in_state;
 8000e12:	eb00 0e81 	add.w	lr, r0, r1, lsl #2
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e16:	2501      	movs	r5, #1
 8000e18:	f8b0 c008 	ldrh.w	ip, [r0, #8]
  isp->txcnt  = 0;
 8000e1c:	2700      	movs	r7, #0
  isp = usbp->epc[ep]->in_state;
 8000e1e:	f8de 600c 	ldr.w	r6, [lr, #12]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e22:	408d      	lsls	r5, r1
  isp = usbp->epc[ep]->in_state;
 8000e24:	6976      	ldr	r6, [r6, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000e26:	ea45 050c 	orr.w	r5, r5, ip
 8000e2a:	8105      	strh	r5, [r0, #8]
  isp->txbuf  = buf;
 8000e2c:	60b2      	str	r2, [r6, #8]
  isp->txcnt  = 0;
 8000e2e:	e9c6 3700 	strd	r3, r7, [r6]
}
 8000e32:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  usb_lld_start_in(usbp, ep);
 8000e36:	f7ff bdf3 	b.w	8000a20 <usb_lld_start_in>
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <sduInterruptTransmitted>:
 */
void sduInterruptTransmitted(USBDriver *usbp, usbep_t ep) {

  (void)usbp;
  (void)ep;
}
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
	...

08000e50 <sduRequestsHook>:
  if ((usbp->setup[0] & USB_RTYPE_TYPE_MASK) == USB_RTYPE_TYPE_CLASS) {
 8000e50:	f890 2080 	ldrb.w	r2, [r0, #128]	; 0x80
 8000e54:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8000e58:	2a20      	cmp	r2, #32
 8000e5a:	d001      	beq.n	8000e60 <sduRequestsHook+0x10>
  return false;
 8000e5c:	2000      	movs	r0, #0
}
 8000e5e:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000e60:	f890 2081 	ldrb.w	r2, [r0, #129]	; 0x81
 8000e64:	4603      	mov	r3, r0
 8000e66:	2a21      	cmp	r2, #33	; 0x21
 8000e68:	d80b      	bhi.n	8000e82 <sduRequestsHook+0x32>
 8000e6a:	2a1f      	cmp	r2, #31
 8000e6c:	d9f6      	bls.n	8000e5c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000e6e:	2107      	movs	r1, #7
 8000e70:	2200      	movs	r2, #0
      return true;
 8000e72:	2001      	movs	r0, #1
bool sduRequestsHook(USBDriver *usbp) {
 8000e74:	b410      	push	{r4}
      usbSetupTransfer(usbp, (uint8_t *)&linecoding, sizeof(linecoding), NULL);
 8000e76:	4c07      	ldr	r4, [pc, #28]	; (8000e94 <sduRequestsHook+0x44>)
 8000e78:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e7a:	e9c3 411d 	strd	r4, r1, [r3, #116]	; 0x74
}
 8000e7e:	bc10      	pop	{r4}
 8000e80:	4770      	bx	lr
    switch (usbp->setup[1]) {
 8000e82:	2a22      	cmp	r2, #34	; 0x22
 8000e84:	d1ea      	bne.n	8000e5c <sduRequestsHook+0xc>
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e86:	2200      	movs	r2, #0
      return true;
 8000e88:	2001      	movs	r0, #1
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8000e8a:	e9c3 221d 	strd	r2, r2, [r3, #116]	; 0x74
 8000e8e:	67da      	str	r2, [r3, #124]	; 0x7c
      return true;
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	24000000 	.word	0x24000000
	...

08000ea0 <_ctl.lto_priv.0>:
#else
    break;
#endif
  }
  return MSG_OK;
}
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	4770      	bx	lr
	...

08000eb0 <_ctl.lto_priv.1>:
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	4770      	bx	lr
	...

08000ec0 <sdu_start_receive>:
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000ec0:	f8d0 148c 	ldr.w	r1, [r0, #1164]	; 0x48c
 8000ec4:	680a      	ldr	r2, [r1, #0]
static bool sdu_start_receive(SerialUSBDriver *sdup) {
 8000ec6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8000ec8:	7813      	ldrb	r3, [r2, #0]
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d102      	bne.n	8000ed4 <sdu_start_receive+0x14>
 8000ece:	7a03      	ldrb	r3, [r0, #8]
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d001      	beq.n	8000ed8 <sdu_start_receive+0x18>
    return true;
 8000ed4:	2001      	movs	r0, #1
}
 8000ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (usbGetReceiveStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 8000ed8:	790c      	ldrb	r4, [r1, #4]
 8000eda:	2301      	movs	r3, #1
 8000edc:	8955      	ldrh	r5, [r2, #10]
 8000ede:	fa03 f404 	lsl.w	r4, r3, r4
 8000ee2:	4225      	tst	r5, r4
 8000ee4:	d1f6      	bne.n	8000ed4 <sdu_start_receive+0x14>
 */
uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {

  osalDbgCheckClassI();

  if (ibqIsFullI(ibqp)) {
 8000ee6:	e9d0 4607 	ldrd	r4, r6, [r0, #28]
 8000eea:	42b4      	cmp	r4, r6
 8000eec:	d014      	beq.n	8000f18 <sdu_start_receive+0x58>
  usbStartReceiveI(sdup->config->usbp, sdup->config->bulk_out,
 8000eee:	7949      	ldrb	r1, [r1, #5]
    return NULL;
  }

  return ibqp->bwrptr + sizeof (size_t);
 8000ef0:	1d23      	adds	r3, r4, #4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000ef2:	2001      	movs	r0, #1
  osp->rxsize = n;
 8000ef4:	f44f 7780 	mov.w	r7, #256	; 0x100
  osp = usbp->epc[ep]->out_state;
 8000ef8:	eb02 0481 	add.w	r4, r2, r1, lsl #2
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000efc:	4088      	lsls	r0, r1
  osp = usbp->epc[ep]->out_state;
 8000efe:	68e6      	ldr	r6, [r4, #12]
  osp->rxcnt  = 0;
 8000f00:	2400      	movs	r4, #0
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000f02:	4305      	orrs	r5, r0
  usb_lld_start_out(usbp, ep);
 8000f04:	4610      	mov	r0, r2
  osp = usbp->epc[ep]->out_state;
 8000f06:	69b6      	ldr	r6, [r6, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8000f08:	8155      	strh	r5, [r2, #10]
  osp->rxbuf  = buf;
 8000f0a:	60b3      	str	r3, [r6, #8]
  osp->rxcnt  = 0;
 8000f0c:	e9c6 7400 	strd	r7, r4, [r6]
  usb_lld_start_out(usbp, ep);
 8000f10:	f7ff fe26 	bl	8000b60 <usb_lld_start_out>
  return false;
 8000f14:	4620      	mov	r0, r4
}
 8000f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (ibqIsFullI(ibqp)) {
 8000f18:	6980      	ldr	r0, [r0, #24]
 8000f1a:	2800      	cmp	r0, #0
 8000f1c:	d0e7      	beq.n	8000eee <sdu_start_receive+0x2e>
 8000f1e:	e7d9      	b.n	8000ed4 <sdu_start_receive+0x14>

08000f20 <ibnotify>:
  (void) sdu_start_receive(sdup);
 8000f20:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8000f22:	f7ff bfcd 	b.w	8000ec0 <sdu_start_receive>
 8000f26:	bf00      	nop
	...

08000f30 <sduDataReceived>:
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000f30:	3113      	adds	r1, #19
void sduDataReceived(USBDriver *usbp, usbep_t ep) {
 8000f32:	b538      	push	{r3, r4, r5, lr}
  SerialUSBDriver *sdup = usbp->out_params[ep - 1U];
 8000f34:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
  if (sdup == NULL) {
 8000f38:	b194      	cbz	r4, 8000f60 <sduDataReceived+0x30>
 8000f3a:	2320      	movs	r3, #32
 8000f3c:	f383 8811 	msr	BASEPRI, r3
  size = usbGetReceiveTransactionSizeX(sdup->config->usbp,
 8000f40:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8000f44:	6813      	ldr	r3, [r2, #0]
 8000f46:	7952      	ldrb	r2, [r2, #5]
 8000f48:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	699b      	ldr	r3, [r3, #24]
 8000f50:	685d      	ldr	r5, [r3, #4]
  if (size > (size_t)0) {
 8000f52:	b935      	cbnz	r5, 8000f62 <sduDataReceived+0x32>
  (void) sdu_start_receive(sdup);
 8000f54:	4620      	mov	r0, r4
 8000f56:	f7ff ffb3 	bl	8000ec0 <sdu_start_receive>
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f383 8811 	msr	BASEPRI, r3
}
 8000f60:	bd38      	pop	{r3, r4, r5, pc}
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
 8000f62:	2104      	movs	r1, #4
 8000f64:	1860      	adds	r0, r4, r1
 8000f66:	f7ff fc33 	bl	80007d0 <chEvtBroadcastFlagsI>

  osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
  osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");

  /* Writing size field in the buffer.*/
  *((size_t *)ibqp->bwrptr) = size;
 8000f6a:	69e3      	ldr	r3, [r4, #28]

  /* Posting the buffer in the queue.*/
  ibqp->bcounter++;
  ibqp->bwrptr += ibqp->bsize;
  if (ibqp->bwrptr >= ibqp->btop) {
 8000f6c:	6a61      	ldr	r1, [r4, #36]	; 0x24
    ibqPostFullBufferI(&sdup->ibqueue, size);
 8000f6e:	f104 000c 	add.w	r0, r4, #12
  *((size_t *)ibqp->bwrptr) = size;
 8000f72:	601d      	str	r5, [r3, #0]
  ibqp->bwrptr += ibqp->bsize;
 8000f74:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  ibqp->bcounter++;
 8000f76:	69a2      	ldr	r2, [r4, #24]
  ibqp->bwrptr += ibqp->bsize;
 8000f78:	442b      	add	r3, r5
  ibqp->bcounter++;
 8000f7a:	3201      	adds	r2, #1
  if (ibqp->bwrptr >= ibqp->btop) {
 8000f7c:	428b      	cmp	r3, r1
  ibqp->bwrptr += ibqp->bsize;
 8000f7e:	61e3      	str	r3, [r4, #28]
  ibqp->bcounter++;
 8000f80:	61a2      	str	r2, [r4, #24]
  if (ibqp->bwrptr >= ibqp->btop) {
 8000f82:	d301      	bcc.n	8000f88 <sduDataReceived+0x58>
    ibqp->bwrptr = ibqp->buffers;
 8000f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000f86:	61e3      	str	r3, [r4, #28]
  chThdDequeueNextI(tqp, msg);
 8000f88:	f7ff fc12 	bl	80007b0 <chThdDequeueNextI.constprop.0>
 8000f8c:	e7e2      	b.n	8000f54 <sduDataReceived+0x24>
 8000f8e:	bf00      	nop

08000f90 <sdcGetInfo>:
 */
bool sdcGetInfo(SDCDriver *sdcp, BlockDeviceInfo *bdip) {

  osalDbgCheck((sdcp != NULL) && (bdip != NULL));

  if (sdcp->state != BLK_READY) {
 8000f90:	7903      	ldrb	r3, [r0, #4]
 8000f92:	2b05      	cmp	r3, #5
 8000f94:	d106      	bne.n	8000fa4 <sdcGetInfo+0x14>
    return HAL_FAILED;
  }

  bdip->blk_num = sdcp->capacity;
 8000f96:	6a82      	ldr	r2, [r0, #40]	; 0x28
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8000f98:	f44f 7300 	mov.w	r3, #512	; 0x200

  return HAL_SUCCESS;
 8000f9c:	2000      	movs	r0, #0
  bdip->blk_size = MMCSD_BLOCK_SIZE;
 8000f9e:	e9c1 3200 	strd	r3, r2, [r1]
  return HAL_SUCCESS;
 8000fa2:	4770      	bx	lr
    return HAL_FAILED;
 8000fa4:	2001      	movs	r0, #1
}
 8000fa6:	4770      	bx	lr
	...

08000fb0 <sdcSync>:
  if (sdcp->state != BLK_READY) {
 8000fb0:	7900      	ldrb	r0, [r0, #4]
}
 8000fb2:	3805      	subs	r0, #5
 8000fb4:	bf18      	it	ne
 8000fb6:	2001      	movne	r0, #1
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	0000      	movs	r0, r0
	...

08000fc0 <_mmcsd_get_capacity>:
  /* One or two pieces?*/
  if (startidx < endidx) {
    return (data[startidx] >> startoff) |               /* Two pieces case. */
           ((data[endidx] & endmask) << (32U - startoff));
  }
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8000fc0:	68c3      	ldr	r3, [r0, #12]
uint32_t _mmcsd_get_capacity(const uint32_t *csd) {
  uint32_t a, b, c;

  osalDbgCheck(NULL != csd);

  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8000fc2:	0f9b      	lsrs	r3, r3, #30
 8000fc4:	d00c      	beq.n	8000fe0 <_mmcsd_get_capacity+0x20>
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d108      	bne.n	8000fdc <_mmcsd_get_capacity+0x1c>
           ((data[endidx] & endmask) << (32U - startoff));
 8000fca:	6883      	ldr	r3, [r0, #8]
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000fcc:	88c2      	ldrh	r2, [r0, #6]
           ((data[endidx] & endmask) << (32U - startoff));
 8000fce:	0418      	lsls	r0, r3, #16
 8000fd0:	f400 107c 	and.w	r0, r0, #4128768	; 0x3f0000
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000fd4:	4310      	orrs	r0, r2
    b = _mmcsd_get_slice(csd, MMCSD_CSD_10_C_SIZE_MULT_SLICE);
    c = _mmcsd_get_slice(csd, MMCSD_CSD_10_READ_BL_LEN_SLICE);
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
  case 1:
    /* CSD version 2.0.*/
    return 1024U * (_mmcsd_get_slice(csd, MMCSD_CSD_20_C_SIZE_SLICE) + 1U);
 8000fd6:	3001      	adds	r0, #1
 8000fd8:	0280      	lsls	r0, r0, #10
  default:
    /* Reserved value detected.*/
    break;
  }
  return 0U;
}
 8000fda:	4770      	bx	lr
  switch (_mmcsd_get_slice(csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8000fdc:	2000      	movs	r0, #0
 8000fde:	4770      	bx	lr
           ((data[endidx] & endmask) << (32U - startoff));
 8000fe0:	6882      	ldr	r2, [r0, #8]
 8000fe2:	f640 73fc 	movw	r3, #4092	; 0xffc
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000fe6:	6841      	ldr	r1, [r0, #4]
           ((data[endidx] & endmask) << (32U - startoff));
 8000fe8:	ea03 0082 	and.w	r0, r3, r2, lsl #2
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8000fec:	f3c2 4203 	ubfx	r2, r2, #16, #4
 8000ff0:	f3c1 33c2 	ubfx	r3, r1, #15, #3
    return (data[startidx] >> startoff) |               /* Two pieces case. */
 8000ff4:	ea40 7091 	orr.w	r0, r0, r1, lsr #30
    return ((a + 1U) << (b + 2U)) << (c - 9U);  /* 2^9 == MMCSD_BLOCK_SIZE. */
 8000ff8:	3a09      	subs	r2, #9
 8000ffa:	3302      	adds	r3, #2
 8000ffc:	3001      	adds	r0, #1
 8000ffe:	4098      	lsls	r0, r3
 8001000:	4090      	lsls	r0, r2
 8001002:	4770      	bx	lr
	...

08001010 <obqGetFullBufferI>:
 * @retval NULL         if the queue is empty.
 *
 * @iclass
 */
uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
                           size_t *sizep) {
 8001010:	4603      	mov	r3, r0

  osalDbgCheckClassI();

  if (obqIsEmptyI(obqp)) {
 8001012:	e9d0 2004 	ldrd	r2, r0, [r0, #16]
 8001016:	4282      	cmp	r2, r0
 8001018:	d003      	beq.n	8001022 <obqGetFullBufferI+0x12>
    return NULL;
  }

  /* Buffer size.*/
  *sizep = *((size_t *)obqp->brdptr);
 800101a:	f850 3b04 	ldr.w	r3, [r0], #4
 800101e:	600b      	str	r3, [r1, #0]

  return obqp->brdptr + sizeof (size_t);
}
 8001020:	4770      	bx	lr
  if (obqIsEmptyI(obqp)) {
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d0f8      	beq.n	800101a <obqGetFullBufferI+0xa>
    return NULL;
 8001028:	2000      	movs	r0, #0
 800102a:	4770      	bx	lr
 800102c:	0000      	movs	r0, r0
	...

08001030 <obnotify>:
static void obnotify(io_buffers_queue_t *bqp) {
 8001030:	b510      	push	{r4, lr}
  SerialUSBDriver *sdup = bqGetLinkX(bqp);
 8001032:	6b44      	ldr	r4, [r0, #52]	; 0x34
static void obnotify(io_buffers_queue_t *bqp) {
 8001034:	b082      	sub	sp, #8
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 8001036:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 800103a:	6813      	ldr	r3, [r2, #0]
 800103c:	7819      	ldrb	r1, [r3, #0]
 800103e:	2904      	cmp	r1, #4
 8001040:	d102      	bne.n	8001048 <obnotify+0x18>
 8001042:	7a21      	ldrb	r1, [r4, #8]
 8001044:	2902      	cmp	r1, #2
 8001046:	d001      	beq.n	800104c <obnotify+0x1c>
}
 8001048:	b002      	add	sp, #8
 800104a:	bd10      	pop	{r4, pc}
  if (!usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 800104c:	7910      	ldrb	r0, [r2, #4]
 800104e:	2201      	movs	r2, #1
 8001050:	8919      	ldrh	r1, [r3, #8]
 8001052:	fa02 f300 	lsl.w	r3, r2, r0
 8001056:	420b      	tst	r3, r1
 8001058:	d1f6      	bne.n	8001048 <obnotify+0x18>
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800105a:	a901      	add	r1, sp, #4
 800105c:	f104 0044 	add.w	r0, r4, #68	; 0x44
 8001060:	f7ff ffd6 	bl	8001010 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 8001064:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001068:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 800106a:	9b01      	ldr	r3, [sp, #4]
 800106c:	7921      	ldrb	r1, [r4, #4]
 800106e:	6820      	ldr	r0, [r4, #0]
 8001070:	f7ff fece 	bl	8000e10 <usbStartTransmitI>
 8001074:	e7e8      	b.n	8001048 <obnotify+0x18>
 8001076:	bf00      	nop
	...

08001080 <sof_handler>:
}

/*
 * Handles the USB driver global events.
 */
static void sof_handler(USBDriver *usbp) {
 8001080:	b510      	push	{r4, lr}
 8001082:	2320      	movs	r3, #32
 8001084:	b082      	sub	sp, #8
 8001086:	f383 8811 	msr	BASEPRI, r3
  if ((usbGetDriverStateI(sdup->config->usbp) != USB_ACTIVE) ||
 800108a:	4c1f      	ldr	r4, [pc, #124]	; (8001108 <sof_handler+0x88>)
 800108c:	f8d4 248c 	ldr.w	r2, [r4, #1164]	; 0x48c
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	7819      	ldrb	r1, [r3, #0]
 8001094:	2904      	cmp	r1, #4
 8001096:	d102      	bne.n	800109e <sof_handler+0x1e>
 8001098:	7a21      	ldrb	r1, [r4, #8]
 800109a:	2902      	cmp	r1, #2
 800109c:	d004      	beq.n	80010a8 <sof_handler+0x28>
 800109e:	2300      	movs	r3, #0
 80010a0:	f383 8811 	msr	BASEPRI, r3
  (void)usbp;

  osalSysLockFromISR();
  sduSOFHookI(&SDU1);
  osalSysUnlockFromISR();
}
 80010a4:	b002      	add	sp, #8
 80010a6:	bd10      	pop	{r4, pc}
  if (usbGetTransmitStatusI(sdup->config->usbp, sdup->config->bulk_in)) {
 80010a8:	7910      	ldrb	r0, [r2, #4]
 80010aa:	2201      	movs	r2, #1
 80010ac:	8919      	ldrh	r1, [r3, #8]
 80010ae:	fa02 f300 	lsl.w	r3, r2, r0
 80010b2:	420b      	tst	r3, r1
 80010b4:	d1f3      	bne.n	800109e <sof_handler+0x1e>

  osalDbgCheckClassI();

  /* If queue is empty and there is a buffer partially filled and
     it is not being written.*/
  if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 80010b6:	e9d4 3215 	ldrd	r3, r2, [r4, #84]	; 0x54
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d1ef      	bne.n	800109e <sof_handler+0x1e>
 80010be:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80010c0:	2a00      	cmp	r2, #0
 80010c2:	d0ec      	beq.n	800109e <sof_handler+0x1e>
 80010c4:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 80010c6:	2a00      	cmp	r2, #0
 80010c8:	d0e9      	beq.n	800109e <sof_handler+0x1e>
    size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 80010ca:	3a04      	subs	r2, #4

    if (size > 0U) {
 80010cc:	1ad2      	subs	r2, r2, r3
 80010ce:	d0e6      	beq.n	800109e <sof_handler+0x1e>

      /* Writing size field in the buffer.*/
      *((size_t *)obqp->bwrptr) = size;
 80010d0:	601a      	str	r2, [r3, #0]

      /* Posting the buffer in the queue.*/
      obqp->bcounter--;
      obqp->bwrptr += obqp->bsize;
 80010d2:	6e20      	ldr	r0, [r4, #96]	; 0x60
      obqp->bcounter--;
 80010d4:	6d22      	ldr	r2, [r4, #80]	; 0x50
      obqp->bwrptr += obqp->bsize;
 80010d6:	4403      	add	r3, r0
      if (obqp->bwrptr >= obqp->btop) {
 80010d8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
      obqp->bcounter--;
 80010da:	3a01      	subs	r2, #1
      if (obqp->bwrptr >= obqp->btop) {
 80010dc:	428b      	cmp	r3, r1
      obqp->bwrptr += obqp->bsize;
 80010de:	6563      	str	r3, [r4, #84]	; 0x54
      obqp->bcounter--;
 80010e0:	6522      	str	r2, [r4, #80]	; 0x50
      if (obqp->bwrptr >= obqp->btop) {
 80010e2:	d301      	bcc.n	80010e8 <sof_handler+0x68>
        obqp->bwrptr = obqp->buffers;
 80010e4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80010e6:	6563      	str	r3, [r4, #84]	; 0x54
      }

      /* No "current" buffer.*/
      obqp->ptr = NULL;
 80010e8:	2300      	movs	r3, #0
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80010ea:	a901      	add	r1, sp, #4
 80010ec:	4807      	ldr	r0, [pc, #28]	; (800110c <sof_handler+0x8c>)
 80010ee:	66e3      	str	r3, [r4, #108]	; 0x6c
 80010f0:	f7ff ff8e 	bl	8001010 <obqGetFullBufferI>
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80010f4:	f8d4 448c 	ldr.w	r4, [r4, #1164]	; 0x48c
    uint8_t *buf = obqGetFullBufferI(&sdup->obqueue, &n);
 80010f8:	4602      	mov	r2, r0
    usbStartTransmitI(sdup->config->usbp, sdup->config->bulk_in, buf, n);
 80010fa:	9b01      	ldr	r3, [sp, #4]
 80010fc:	7921      	ldrb	r1, [r4, #4]
 80010fe:	6820      	ldr	r0, [r4, #0]
 8001100:	f7ff fe86 	bl	8000e10 <usbStartTransmitI>
 8001104:	e7cb      	b.n	800109e <sof_handler+0x1e>
 8001106:	bf00      	nop
 8001108:	240002b0 	.word	0x240002b0
 800110c:	240002f4 	.word	0x240002f4

08001110 <sduDataTransmitted>:
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001110:	f101 030b 	add.w	r3, r1, #11
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 8001114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  SerialUSBDriver *sdup = usbp->in_params[ep - 1U];
 8001118:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
void sduDataTransmitted(USBDriver *usbp, usbep_t ep) {
 800111c:	b082      	sub	sp, #8
  if (sdup == NULL) {
 800111e:	b1f5      	cbz	r5, 800115e <sduDataTransmitted+0x4e>
 8001120:	460e      	mov	r6, r1
 8001122:	4604      	mov	r4, r0
 8001124:	2320      	movs	r3, #32
 8001126:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800112a:	eb00 0781 	add.w	r7, r0, r1, lsl #2
 800112e:	1d28      	adds	r0, r5, #4
 8001130:	2108      	movs	r1, #8
 8001132:	f7ff fb4d 	bl	80007d0 <chEvtBroadcastFlagsI>
  if (usbp->epc[ep]->in_state->txsize > 0U) {
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	b993      	cbnz	r3, 8001164 <sduDataTransmitted+0x54>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 800113e:	f105 0844 	add.w	r8, r5, #68	; 0x44
 8001142:	a901      	add	r1, sp, #4
 8001144:	4640      	mov	r0, r8
 8001146:	f7ff ff63 	bl	8001010 <obqGetFullBufferI>
  if (buf != NULL) {
 800114a:	4602      	mov	r2, r0
 800114c:	b310      	cbz	r0, 8001194 <sduDataTransmitted+0x84>
    usbStartTransmitI(usbp, ep, buf, n);
 800114e:	4631      	mov	r1, r6
 8001150:	4620      	mov	r0, r4
 8001152:	9b01      	ldr	r3, [sp, #4]
 8001154:	f7ff fe5c 	bl	8000e10 <usbStartTransmitI>
 8001158:	2300      	movs	r3, #0
 800115a:	f383 8811 	msr	BASEPRI, r3
}
 800115e:	b002      	add	sp, #8
 8001160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  obqp->brdptr += obqp->bsize;
 8001164:	6dab      	ldr	r3, [r5, #88]	; 0x58
    obqReleaseEmptyBufferI(&sdup->obqueue);
 8001166:	f105 0844 	add.w	r8, r5, #68	; 0x44
 800116a:	6e29      	ldr	r1, [r5, #96]	; 0x60
  obqp->bcounter++;
 800116c:	6d2a      	ldr	r2, [r5, #80]	; 0x50
  obqp->brdptr += obqp->bsize;
 800116e:	440b      	add	r3, r1
  if (obqp->brdptr >= obqp->btop) {
 8001170:	6de9      	ldr	r1, [r5, #92]	; 0x5c
  obqp->bcounter++;
 8001172:	3201      	adds	r2, #1
  if (obqp->brdptr >= obqp->btop) {
 8001174:	428b      	cmp	r3, r1
  obqp->brdptr += obqp->bsize;
 8001176:	65ab      	str	r3, [r5, #88]	; 0x58
  obqp->bcounter++;
 8001178:	652a      	str	r2, [r5, #80]	; 0x50
  if (obqp->brdptr >= obqp->btop) {
 800117a:	d301      	bcc.n	8001180 <sduDataTransmitted+0x70>
    obqp->brdptr = obqp->buffers;
 800117c:	6eab      	ldr	r3, [r5, #104]	; 0x68
 800117e:	65ab      	str	r3, [r5, #88]	; 0x58
  chThdDequeueNextI(tqp, msg);
 8001180:	4640      	mov	r0, r8
 8001182:	f7ff fb15 	bl	80007b0 <chThdDequeueNextI.constprop.0>
  buf = obqGetFullBufferI(&sdup->obqueue, &n);
 8001186:	4640      	mov	r0, r8
 8001188:	a901      	add	r1, sp, #4
 800118a:	f7ff ff41 	bl	8001010 <obqGetFullBufferI>
  if (buf != NULL) {
 800118e:	4602      	mov	r2, r0
 8001190:	2800      	cmp	r0, #0
 8001192:	d1dc      	bne.n	800114e <sduDataTransmitted+0x3e>
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	695a      	ldr	r2, [r3, #20]
 8001198:	6812      	ldr	r2, [r2, #0]
 800119a:	2a00      	cmp	r2, #0
 800119c:	d0dc      	beq.n	8001158 <sduDataTransmitted+0x48>
            ((size_t)usbp->epc[ep]->in_maxsize - 1U)) == 0U)) {
 800119e:	8a1b      	ldrh	r3, [r3, #16]
 80011a0:	3b01      	subs	r3, #1
  else if ((usbp->epc[ep]->in_state->txsize > 0U) &&
 80011a2:	4013      	ands	r3, r2
 80011a4:	d1d8      	bne.n	8001158 <sduDataTransmitted+0x48>
    usbStartTransmitI(usbp, ep, usbp->setup, 0);
 80011a6:	4631      	mov	r1, r6
 80011a8:	f104 0280 	add.w	r2, r4, #128	; 0x80
 80011ac:	4620      	mov	r0, r4
 80011ae:	f7ff fe2f 	bl	8000e10 <usbStartTransmitI>
 80011b2:	e7d1      	b.n	8001158 <sduDataTransmitted+0x48>
	...

080011c0 <chSchWakeupS.constprop.0>:
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  thread_t *otp = currp;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <chSchWakeupS.constprop.0+0x68>)
  ntp->u.rdymsg = msg;
 80011c4:	2100      	movs	r1, #0
  if (ntp->prio <= otp->prio) {
 80011c6:	6884      	ldr	r4, [r0, #8]
void chSchWakeupS(thread_t *ntp, msg_t msg) {
 80011c8:	4605      	mov	r5, r0
  thread_t *otp = currp;
 80011ca:	699f      	ldr	r7, [r3, #24]
  if (ntp->prio <= otp->prio) {
 80011cc:	68be      	ldr	r6, [r7, #8]
  ntp->u.rdymsg = msg;
 80011ce:	6241      	str	r1, [r0, #36]	; 0x24
  if (ntp->prio <= otp->prio) {
 80011d0:	42b4      	cmp	r4, r6
 80011d2:	d80b      	bhi.n	80011ec <chSchWakeupS.constprop.0+0x2c>
  tp->state = CH_STATE_READY;
 80011d4:	f880 1020 	strb.w	r1, [r0, #32]
    cp = cp->queue.next;
 80011d8:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio >= tp->prio);
 80011da:	689a      	ldr	r2, [r3, #8]
 80011dc:	4294      	cmp	r4, r2
 80011de:	d9fb      	bls.n	80011d8 <chSchWakeupS.constprop.0+0x18>
  tp->queue.prev             = cp->queue.prev;
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 80011e6:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 80011e8:	605d      	str	r5, [r3, #4]
}
 80011ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  cp = (thread_t *)&ch.rlist.queue;
 80011ec:	461a      	mov	r2, r3
  tp->state = CH_STATE_READY;
 80011ee:	f887 1020 	strb.w	r1, [r7, #32]
    cp = cp->queue.next;
 80011f2:	6812      	ldr	r2, [r2, #0]
  } while (cp->prio > tp->prio);
 80011f4:	6894      	ldr	r4, [r2, #8]
 80011f6:	42a6      	cmp	r6, r4
 80011f8:	d3fb      	bcc.n	80011f2 <chSchWakeupS.constprop.0+0x32>
  tp->queue.prev             = cp->queue.prev;
 80011fa:	6851      	ldr	r1, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 80011fc:	2001      	movs	r0, #1
  tp->queue.prev             = cp->queue.prev;
 80011fe:	e9c7 2100 	strd	r2, r1, [r7]
  tp->queue.prev->queue.next = tp;
 8001202:	600f      	str	r7, [r1, #0]
  cp->queue.prev             = tp;
 8001204:	6057      	str	r7, [r2, #4]
    ntp->state = CH_STATE_CURRENT;
 8001206:	f885 0020 	strb.w	r0, [r5, #32]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 800120a:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
    currp = ntp;
 800120c:	619d      	str	r5, [r3, #24]
 800120e:	07d3      	lsls	r3, r2, #31
 8001210:	d505      	bpl.n	800121e <chSchWakeupS.constprop.0+0x5e>
    chSysSwitch(ntp, otp);
 8001212:	4639      	mov	r1, r7
 8001214:	4628      	mov	r0, r5
}
 8001216:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    chSysSwitch(ntp, otp);
 800121a:	f7ff b8b1 	b.w	8000380 <_port_switch>
 800121e:	4638      	mov	r0, r7
 8001220:	f7ff fb26 	bl	8000870 <_trace_switch.part.0>
 8001224:	e7f5      	b.n	8001212 <chSchWakeupS.constprop.0+0x52>
 8001226:	bf00      	nop
 8001228:	24000888 	.word	0x24000888
 800122c:	00000000 	.word	0x00000000

08001230 <chSchGoSleepS>:
void chSchGoSleepS(tstate_t newstate) {
 8001230:	b538      	push	{r3, r4, r5, lr}
  thread_t *otp = currp;
 8001232:	4c0f      	ldr	r4, [pc, #60]	; (8001270 <chSchGoSleepS+0x40>)
  currp->state = CH_STATE_CURRENT;
 8001234:	2101      	movs	r1, #1
  thread_t *tp = tqp->next;
 8001236:	6823      	ldr	r3, [r4, #0]
  thread_t *otp = currp;
 8001238:	69a5      	ldr	r5, [r4, #24]
  otp->state = newstate;
 800123a:	f885 0020 	strb.w	r0, [r5, #32]
  tqp->next             = tp->queue.next;
 800123e:	681a      	ldr	r2, [r3, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 8001240:	6054      	str	r4, [r2, #4]
  currp->state = CH_STATE_CURRENT;
 8001242:	f883 1020 	strb.w	r1, [r3, #32]
 8001246:	8e21      	ldrh	r1, [r4, #48]	; 0x30
  tqp->next             = tp->queue.next;
 8001248:	6022      	str	r2, [r4, #0]
 800124a:	07ca      	lsls	r2, r1, #31
  currp = queue_fifo_remove(&ch.rlist.queue);
 800124c:	61a3      	str	r3, [r4, #24]
 800124e:	d505      	bpl.n	800125c <chSchGoSleepS+0x2c>
  chSysSwitch(currp, otp);
 8001250:	4629      	mov	r1, r5
 8001252:	4618      	mov	r0, r3
}
 8001254:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 8001258:	f7ff b892 	b.w	8000380 <_port_switch>
 800125c:	4628      	mov	r0, r5
 800125e:	f7ff fb07 	bl	8000870 <_trace_switch.part.0>
 8001262:	69a3      	ldr	r3, [r4, #24]
 8001264:	4629      	mov	r1, r5
 8001266:	4618      	mov	r0, r3
}
 8001268:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSysSwitch(currp, otp);
 800126c:	f7ff b888 	b.w	8000380 <_port_switch>
 8001270:	24000888 	.word	0x24000888
	...

08001280 <chSchGoSleepTimeoutS>:
  if (TIME_INFINITE != timeout) {
 8001280:	1c4b      	adds	r3, r1, #1
msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 8001282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001284:	b087      	sub	sp, #28
  if (TIME_INFINITE != timeout) {
 8001286:	d048      	beq.n	800131a <chSchGoSleepTimeoutS+0x9a>
    chVTDoSetI(&vt, timeout, wakeup, currp);
 8001288:	4c3f      	ldr	r4, [pc, #252]	; (8001388 <chSchGoSleepTimeoutS+0x108>)
 800128a:	2902      	cmp	r1, #2

  chDbgCheckClassI();
  chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));

  vtp->par = par;
  vtp->func = vtfunc;
 800128c:	4b3f      	ldr	r3, [pc, #252]	; (800138c <chSchGoSleepTimeoutS+0x10c>)
 800128e:	4605      	mov	r5, r0
    if (delay < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
      delay = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
    }

    /* Special case where the timers list is empty.*/
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001290:	4626      	mov	r6, r4
  vtp->par = par;
 8001292:	69a2      	ldr	r2, [r4, #24]
  vtp->func = vtfunc;
 8001294:	9304      	str	r3, [sp, #16]
 8001296:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800129a:	f856 3f1c 	ldr.w	r3, [r6, #28]!
 800129e:	bf38      	it	cc
 80012a0:	2102      	movcc	r1, #2
  vtp->par = par;
 80012a2:	9205      	str	r2, [sp, #20]
    if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 80012a4:	42b3      	cmp	r3, r6
 80012a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80012a8:	d05a      	beq.n	8001360 <chSchGoSleepTimeoutS+0xe0>
    /* Pointer to the first element in the delta list, which is non-empty.*/
    p = ch.vtlist.next;

    /* Delay as delta from 'lasttime'. Note, it can overflow and the value
       becomes lower than 'now'.*/
    delta = chTimeDiffX(ch.vtlist.lasttime, now) + delay;
 80012aa:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 */
static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {

  /*lint -save -e9033 [10.8] This cast is required by the operation, it is
    known that the destination type can be wider.*/
  return (sysinterval_t)((systime_t)(end - start));
 80012ac:	1bd2      	subs	r2, r2, r7
 80012ae:	1889      	adds	r1, r1, r2

    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
      /* Scenario where a very large delay excedeed the numeric range, it
         requires a special handling. We need to skip the first element and
         adjust the delta to wrap back in the previous numeric range.*/
      delta -= p->delta;
 80012b0:	689a      	ldr	r2, [r3, #8]
    if (delta < chTimeDiffX(ch.vtlist.lasttime, now)) {
 80012b2:	d32d      	bcc.n	8001310 <chSchGoSleepTimeoutS+0x90>
      p = p->next;
 80012b4:	681b      	ldr	r3, [r3, #0]
      delta -= p->delta;
 80012b6:	1a89      	subs	r1, r1, r2
 80012b8:	689a      	ldr	r2, [r3, #8]
  p = ch.vtlist.next;
#endif /* CH_CFG_ST_TIMEDELTA == 0 */

  /* The delta list is scanned in order to find the correct position for
     this timer. */
  while (p->delta < delta) {
 80012ba:	4291      	cmp	r1, r2
 80012bc:	d904      	bls.n	80012c8 <chSchGoSleepTimeoutS+0x48>
    /* Debug assert if the timer is already in the list.*/
    chDbgAssert(p != vtp, "timer already armed");

    delta -= p->delta;
    p = p->next;
 80012be:	681b      	ldr	r3, [r3, #0]
    delta -= p->delta;
 80012c0:	1a89      	subs	r1, r1, r2
  while (p->delta < delta) {
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	428a      	cmp	r2, r1
 80012c6:	d3fa      	bcc.n	80012be <chSchGoSleepTimeoutS+0x3e>
  }

  /* The timer is inserted in the delta list.*/
  vtp->next = p;
  vtp->prev = vtp->next->prev;
 80012c8:	685a      	ldr	r2, [r3, #4]
  vtp->prev->next = vtp;
 80012ca:	af01      	add	r7, sp, #4
  vtp->next = p;
 80012cc:	9301      	str	r3, [sp, #4]
  /* Calculate new delta for the following entry.*/
  p->delta -= delta;

  /* Special case when the timer is in last position in the list, the
     value in the header must be restored.*/
  ch.vtlist.delta = (sysinterval_t)-1;
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  vtp->prev = vtp->next->prev;
 80012d2:	9202      	str	r2, [sp, #8]
  vtp->prev->next = vtp;
 80012d4:	6017      	str	r7, [r2, #0]
  p->prev = vtp;
 80012d6:	605f      	str	r7, [r3, #4]
  vtp->delta = delta;
 80012d8:	9103      	str	r1, [sp, #12]
  p->delta -= delta;
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	1a51      	subs	r1, r2, r1
 80012de:	6099      	str	r1, [r3, #8]
  ch.vtlist.delta = (sysinterval_t)-1;
 80012e0:	6260      	str	r0, [r4, #36]	; 0x24
    chSchGoSleepS(newstate);
 80012e2:	4628      	mov	r0, r5
 80012e4:	f7ff ffa4 	bl	8001230 <chSchGoSleepS>
    if (chVTIsArmedI(&vt)) {
 80012e8:	9b04      	ldr	r3, [sp, #16]
 80012ea:	b16b      	cbz	r3, 8001308 <chSchGoSleepTimeoutS+0x88>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  sysinterval_t nowdelta, delta;

  /* If the timer is not the first of the list then it is simply unlinked
     else the operation is more complex.*/
  if (ch.vtlist.next != vtp) {
 80012ec:	69e3      	ldr	r3, [r4, #28]
 80012ee:	42bb      	cmp	r3, r7
 80012f0:	d01a      	beq.n	8001328 <chSchGoSleepTimeoutS+0xa8>
    /* Removing the element from the delta list.*/
    vtp->prev->next = vtp->next;
 80012f2:	e9dd 3201 	ldrd	r3, r2, [sp, #4]
 80012f6:	6013      	str	r3, [r2, #0]
    vtp->next->prev = vtp->prev;
 80012f8:	9b01      	ldr	r3, [sp, #4]
    vtp->func = NULL;

    /* Adding delta to the next element, if it is not the last one.*/
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80012fa:	42b3      	cmp	r3, r6
    vtp->next->prev = vtp->prev;
 80012fc:	605a      	str	r2, [r3, #4]
    if (&ch.vtlist != (virtual_timers_list_t *)vtp->next)
 80012fe:	d003      	beq.n	8001308 <chSchGoSleepTimeoutS+0x88>
      vtp->next->delta += vtp->delta;
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	9903      	ldr	r1, [sp, #12]
 8001304:	440a      	add	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
  return currp->u.rdymsg;
 8001308:	69a3      	ldr	r3, [r4, #24]
}
 800130a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800130c:	b007      	add	sp, #28
 800130e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    else if (delta < p->delta) {
 8001310:	4291      	cmp	r1, r2
 8001312:	d2d2      	bcs.n	80012ba <chSchGoSleepTimeoutS+0x3a>
  return systime + (systime_t)interval;
 8001314:	440f      	add	r7, r1
 *
 * @notapi
 */
static inline void st_lld_set_alarm(systime_t abstime) {

  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001316:	6347      	str	r7, [r0, #52]	; 0x34
 8001318:	e7cf      	b.n	80012ba <chSchGoSleepTimeoutS+0x3a>
    chSchGoSleepS(newstate);
 800131a:	4c1b      	ldr	r4, [pc, #108]	; (8001388 <chSchGoSleepTimeoutS+0x108>)
 800131c:	f7ff ff88 	bl	8001230 <chSchGoSleepS>
  return currp->u.rdymsg;
 8001320:	69a3      	ldr	r3, [r4, #24]
}
 8001322:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001324:	b007      	add	sp, #28
 8001326:	bdf0      	pop	{r4, r5, r6, r7, pc}

    return;
  }

  /* Removing the first timer from the list.*/
  ch.vtlist.next = vtp->next;
 8001328:	9b01      	ldr	r3, [sp, #4]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
  vtp->func = NULL;
 800132a:	2200      	movs	r2, #0

  /* If the list become empty then the alarm timer is stopped and done.*/
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 800132c:	42b3      	cmp	r3, r6
  ch.vtlist.next = vtp->next;
 800132e:	61e3      	str	r3, [r4, #28]
  ch.vtlist.next->prev = (virtual_timer_t *)&ch.vtlist;
 8001330:	605e      	str	r6, [r3, #4]
  vtp->func = NULL;
 8001332:	9204      	str	r2, [sp, #16]
  if (&ch.vtlist == (virtual_timers_list_t *)ch.vtlist.next) {
 8001334:	d024      	beq.n	8001380 <chSchGoSleepTimeoutS+0x100>

    return;
  }

  /* The delta of the removed timer is added to the new first timer.*/
  ch.vtlist.next->delta += vtp->delta;
 8001336:	689a      	ldr	r2, [r3, #8]
  return (systime_t)STM32_ST_TIM->CNT;
 8001338:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800133c:	9d03      	ldr	r5, [sp, #12]
/*  if (ch.vtlist.next->delta == 0) {
    return;
  }*/

  /* Distance in ticks between the last alarm event and current time.*/
  nowdelta = chTimeDiffX(ch.vtlist.lasttime, chVTGetSystemTimeX());
 800133e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  ch.vtlist.next->delta += vtp->delta;
 8001340:	442a      	add	r2, r5
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	6a43      	ldr	r3, [r0, #36]	; 0x24
  return (sysinterval_t)((systime_t)(end - start));
 8001346:	1a58      	subs	r0, r3, r1

  /* If the current time surpassed the time of the next element in list
     then the event interrupt is already pending, just return.*/
  if (nowdelta >= ch.vtlist.next->delta) {
 8001348:	4282      	cmp	r2, r0
 800134a:	d9dd      	bls.n	8001308 <chSchGoSleepTimeoutS+0x88>
    return;
  }

  /* Distance from the next scheduled event and now.*/
  delta = ch.vtlist.next->delta - nowdelta;
 800134c:	1acb      	subs	r3, r1, r3
 800134e:	4413      	add	r3, r2

  /* Making sure to not schedule an event closer than CH_CFG_ST_TIMEDELTA
     ticks from now.*/
  if (delta < (sysinterval_t)CH_CFG_ST_TIMEDELTA) {
 8001350:	2b01      	cmp	r3, #1
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    delta = nowdelta + (sysinterval_t)CH_CFG_ST_TIMEDELTA;
 8001356:	bf98      	it	ls
 8001358:	1c82      	addls	r2, r0, #2
  return systime + (systime_t)interval;
 800135a:	440a      	add	r2, r1
 800135c:	635a      	str	r2, [r3, #52]	; 0x34
 800135e:	e7d3      	b.n	8001308 <chSchGoSleepTimeoutS+0x88>
      ch.vtlist.lasttime = now;
 8001360:	62a2      	str	r2, [r4, #40]	; 0x28
 8001362:	eb01 0c02 	add.w	ip, r1, r2
      ch.vtlist.next = vtp;
 8001366:	af01      	add	r7, sp, #4
  STM32_ST_TIM->SR     = 0;
 8001368:	2200      	movs	r2, #0
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800136a:	2302      	movs	r3, #2
      vtp->delta = delay;
 800136c:	9103      	str	r1, [sp, #12]
      vtp->prev = (virtual_timer_t *)&ch.vtlist;
 800136e:	e9cd 6601 	strd	r6, r6, [sp, #4]
      ch.vtlist.prev = vtp;
 8001372:	e9c4 7707 	strd	r7, r7, [r4, #28]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8001376:	f8c0 c034 	str.w	ip, [r0, #52]	; 0x34
  STM32_ST_TIM->SR     = 0;
 800137a:	6102      	str	r2, [r0, #16]
  STM32_ST_TIM->DIER   = STM32_TIM_DIER_CC1IE;
 800137c:	60c3      	str	r3, [r0, #12]
 800137e:	e7b0      	b.n	80012e2 <chSchGoSleepTimeoutS+0x62>
  STM32_ST_TIM->DIER = 0U;
 8001380:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001384:	60da      	str	r2, [r3, #12]
    return;
 8001386:	e7bf      	b.n	8001308 <chSchGoSleepTimeoutS+0x88>
 8001388:	24000888 	.word	0x24000888
 800138c:	080006e1 	.word	0x080006e1

08001390 <chThdEnqueueTimeoutS>:
  if (TIME_IMMEDIATE == timeout) {
 8001390:	b161      	cbz	r1, 80013ac <chThdEnqueueTimeoutS+0x1c>
 8001392:	4603      	mov	r3, r0
  queue_insert(currp, tqp);
 8001394:	4a07      	ldr	r2, [pc, #28]	; (80013b4 <chThdEnqueueTimeoutS+0x24>)
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 8001396:	2004      	movs	r0, #4
  queue_insert(currp, tqp);
 8001398:	6992      	ldr	r2, [r2, #24]
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 800139a:	b410      	push	{r4}
  tp->queue.prev             = tqp->prev;
 800139c:	685c      	ldr	r4, [r3, #4]
 800139e:	e9c2 3400 	strd	r3, r4, [r2]
  tp->queue.prev->queue.next = tp;
 80013a2:	6022      	str	r2, [r4, #0]
}
 80013a4:	bc10      	pop	{r4}
  tqp->prev                  = tp;
 80013a6:	605a      	str	r2, [r3, #4]
  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 80013a8:	f7ff bf6a 	b.w	8001280 <chSchGoSleepTimeoutS>
}
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	24000888 	.word	0x24000888
	...

080013c0 <oqPutTimeout>:
 * @retval MSG_TIMEOUT  if the specified time expired.
 * @retval MSG_RESET    if the queue has been reset.
 *
 * @api
 */
msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 80013c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c2:	2320      	movs	r3, #32
 80013c4:	4604      	mov	r4, r0
 80013c6:	460f      	mov	r7, r1
 80013c8:	4616      	mov	r6, r2
 80013ca:	f383 8811 	msr	BASEPRI, r3
 */
static inline void chSysLock(void) {

  port_lock();
  _stats_start_measure_crit_thd();
  _dbg_check_lock();
 80013ce:	e003      	b.n	80013d8 <oqPutTimeout+0x18>
  return chThdEnqueueTimeoutS(tqp, timeout);
 80013d0:	f7ff ffde 	bl	8001390 <chThdEnqueueTimeoutS>
  osalSysLock();

  /* Waiting until there is a slot available or a timeout occurs.*/
  while (oqIsFullI(oqp)) {
    msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
    if (msg < MSG_OK) {
 80013d4:	2800      	cmp	r0, #0
 80013d6:	db19      	blt.n	800140c <oqPutTimeout+0x4c>
  while (oqIsFullI(oqp)) {
 80013d8:	68a5      	ldr	r5, [r4, #8]
 80013da:	4631      	mov	r1, r6
 80013dc:	4620      	mov	r0, r4
 80013de:	2d00      	cmp	r5, #0
 80013e0:	d0f6      	beq.n	80013d0 <oqPutTimeout+0x10>
    }
  }

  /* Putting the character into the queue.*/
  oqp->q_counter--;
  *oqp->q_wrptr++ = b;
 80013e2:	6962      	ldr	r2, [r4, #20]
  oqp->q_counter--;
 80013e4:	68a3      	ldr	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013e6:	1c51      	adds	r1, r2, #1
  oqp->q_counter--;
 80013e8:	3b01      	subs	r3, #1
  *oqp->q_wrptr++ = b;
 80013ea:	6161      	str	r1, [r4, #20]
  oqp->q_counter--;
 80013ec:	60a3      	str	r3, [r4, #8]
  *oqp->q_wrptr++ = b;
 80013ee:	7017      	strb	r7, [r2, #0]
  if (oqp->q_wrptr >= oqp->q_top) {
 80013f0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d301      	bcc.n	80013fc <oqPutTimeout+0x3c>
    oqp->q_wrptr = oqp->q_buffer;
 80013f8:	68e3      	ldr	r3, [r4, #12]
 80013fa:	6163      	str	r3, [r4, #20]
  }

  /* Inform the low side that the queue has at least one character available.*/
  if (oqp->q_notify != NULL) {
 80013fc:	69e3      	ldr	r3, [r4, #28]
 80013fe:	b10b      	cbz	r3, 8001404 <oqPutTimeout+0x44>
    oqp->q_notify(oqp);
 8001400:	4620      	mov	r0, r4
 8001402:	4798      	blx	r3
 8001404:	2000      	movs	r0, #0
 8001406:	f380 8811 	msr	BASEPRI, r0
  }

  osalSysUnlock();

  return MSG_OK;
}
 800140a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800140c:	f385 8811 	msr	BASEPRI, r5
 8001410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001412:	bf00      	nop
	...

08001420 <_putt.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, timeout);
 8001420:	3030      	adds	r0, #48	; 0x30
 8001422:	f7ff bfcd 	b.w	80013c0 <oqPutTimeout>
 8001426:	bf00      	nop
	...

08001430 <_put.lto_priv.0>:
  return oqPutTimeout(&((SerialDriver *)ip)->oqueue, b, TIME_INFINITE);
 8001430:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001434:	3030      	adds	r0, #48	; 0x30
 8001436:	f7ff bfc3 	b.w	80013c0 <oqPutTimeout>
 800143a:	bf00      	nop
 800143c:	0000      	movs	r0, r0
	...

08001440 <iqGetTimeout>:
msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 8001440:	b570      	push	{r4, r5, r6, lr}
 8001442:	2320      	movs	r3, #32
 8001444:	4605      	mov	r5, r0
 8001446:	460e      	mov	r6, r1
 8001448:	f383 8811 	msr	BASEPRI, r3
 800144c:	e003      	b.n	8001456 <iqGetTimeout+0x16>
 800144e:	f7ff ff9f 	bl	8001390 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001452:	2800      	cmp	r0, #0
 8001454:	db19      	blt.n	800148a <iqGetTimeout+0x4a>
  while (iqIsEmptyI(iqp)) {
 8001456:	68ac      	ldr	r4, [r5, #8]
 8001458:	4631      	mov	r1, r6
 800145a:	4628      	mov	r0, r5
 800145c:	2c00      	cmp	r4, #0
 800145e:	d0f6      	beq.n	800144e <iqGetTimeout+0xe>
  b = *iqp->q_rdptr++;
 8001460:	69a9      	ldr	r1, [r5, #24]
  iqp->q_counter--;
 8001462:	68ab      	ldr	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001464:	1c4a      	adds	r2, r1, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 8001466:	6928      	ldr	r0, [r5, #16]
  iqp->q_counter--;
 8001468:	3b01      	subs	r3, #1
  if (iqp->q_rdptr >= iqp->q_top) {
 800146a:	4282      	cmp	r2, r0
  b = *iqp->q_rdptr++;
 800146c:	61aa      	str	r2, [r5, #24]
  iqp->q_counter--;
 800146e:	60ab      	str	r3, [r5, #8]
  b = *iqp->q_rdptr++;
 8001470:	780c      	ldrb	r4, [r1, #0]
  if (iqp->q_rdptr >= iqp->q_top) {
 8001472:	d301      	bcc.n	8001478 <iqGetTimeout+0x38>
    iqp->q_rdptr = iqp->q_buffer;
 8001474:	68eb      	ldr	r3, [r5, #12]
 8001476:	61ab      	str	r3, [r5, #24]
  if (iqp->q_notify != NULL) {
 8001478:	69eb      	ldr	r3, [r5, #28]
 800147a:	b10b      	cbz	r3, 8001480 <iqGetTimeout+0x40>
    iqp->q_notify(iqp);
 800147c:	4628      	mov	r0, r5
 800147e:	4798      	blx	r3
 8001480:	2300      	movs	r3, #0
 8001482:	f383 8811 	msr	BASEPRI, r3
  return (msg_t)b;
 8001486:	4620      	mov	r0, r4
}
 8001488:	bd70      	pop	{r4, r5, r6, pc}
 800148a:	f384 8811 	msr	BASEPRI, r4
 800148e:	bd70      	pop	{r4, r5, r6, pc}

08001490 <_gett.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, timeout);
 8001490:	300c      	adds	r0, #12
 8001492:	f7ff bfd5 	b.w	8001440 <iqGetTimeout>
 8001496:	bf00      	nop
	...

080014a0 <_get.lto_priv.0>:
  return iqGetTimeout(&((SerialDriver *)ip)->iqueue, TIME_INFINITE);
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014a4:	300c      	adds	r0, #12
 80014a6:	f7ff bfcb 	b.w	8001440 <iqGetTimeout>
 80014aa:	bf00      	nop
 80014ac:	0000      	movs	r0, r0
	...

080014b0 <obqGetEmptyBufferTimeoutS>:
                                sysinterval_t timeout) {
 80014b0:	b538      	push	{r3, r4, r5, lr}
 80014b2:	4604      	mov	r4, r0
 80014b4:	460d      	mov	r5, r1
 80014b6:	e005      	b.n	80014c4 <obqGetEmptyBufferTimeoutS+0x14>
    if (obqp->suspended) {
 80014b8:	7a23      	ldrb	r3, [r4, #8]
 80014ba:	b983      	cbnz	r3, 80014de <obqGetEmptyBufferTimeoutS+0x2e>
 80014bc:	f7ff ff68 	bl	8001390 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 80014c0:	2800      	cmp	r0, #0
 80014c2:	db0b      	blt.n	80014dc <obqGetEmptyBufferTimeoutS+0x2c>
  while (obqIsFullI(obqp)) {
 80014c4:	68e3      	ldr	r3, [r4, #12]
 80014c6:	4629      	mov	r1, r5
 80014c8:	4620      	mov	r0, r4
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d0f4      	beq.n	80014b8 <obqGetEmptyBufferTimeoutS+0x8>
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80014ce:	6923      	ldr	r3, [r4, #16]
  obqp->top = obqp->bwrptr + obqp->bsize;
 80014d0:	2000      	movs	r0, #0
 80014d2:	69e1      	ldr	r1, [r4, #28]
  obqp->ptr = obqp->bwrptr + sizeof (size_t);
 80014d4:	1d1a      	adds	r2, r3, #4
  obqp->top = obqp->bwrptr + obqp->bsize;
 80014d6:	440b      	add	r3, r1
 80014d8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 80014dc:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80014de:	f06f 0001 	mvn.w	r0, #1
}
 80014e2:	bd38      	pop	{r3, r4, r5, pc}
	...

080014f0 <obqPutTimeout>:
                    sysinterval_t timeout) {
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	2320      	movs	r3, #32
 80014f4:	460d      	mov	r5, r1
 80014f6:	4604      	mov	r4, r0
 80014f8:	f383 8811 	msr	BASEPRI, r3
  if (obqp->ptr == NULL) {
 80014fc:	6a86      	ldr	r6, [r0, #40]	; 0x28
 80014fe:	b1fe      	cbz	r6, 8001540 <obqPutTimeout+0x50>
  *obqp->ptr = b;
 8001500:	7035      	strb	r5, [r6, #0]
  if (obqp->ptr >= obqp->top) {
 8001502:	e9d4 320a 	ldrd	r3, r2, [r4, #40]	; 0x28
  obqp->ptr++;
 8001506:	3301      	adds	r3, #1
  if (obqp->ptr >= obqp->top) {
 8001508:	4293      	cmp	r3, r2
  obqp->ptr++;
 800150a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (obqp->ptr >= obqp->top) {
 800150c:	d314      	bcc.n	8001538 <obqPutTimeout+0x48>
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 800150e:	69e2      	ldr	r2, [r4, #28]
  *((size_t *)obqp->bwrptr) = size;
 8001510:	6923      	ldr	r3, [r4, #16]
    obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8001512:	3a04      	subs	r2, #4
  if (obqp->bwrptr >= obqp->btop) {
 8001514:	69a1      	ldr	r1, [r4, #24]
  *((size_t *)obqp->bwrptr) = size;
 8001516:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 8001518:	69e0      	ldr	r0, [r4, #28]
  obqp->bcounter--;
 800151a:	68e2      	ldr	r2, [r4, #12]
  obqp->bwrptr += obqp->bsize;
 800151c:	4403      	add	r3, r0
  obqp->bcounter--;
 800151e:	3a01      	subs	r2, #1
  if (obqp->bwrptr >= obqp->btop) {
 8001520:	428b      	cmp	r3, r1
  obqp->bwrptr += obqp->bsize;
 8001522:	6123      	str	r3, [r4, #16]
  obqp->bcounter--;
 8001524:	60e2      	str	r2, [r4, #12]
  if (obqp->bwrptr >= obqp->btop) {
 8001526:	d301      	bcc.n	800152c <obqPutTimeout+0x3c>
    obqp->bwrptr = obqp->buffers;
 8001528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800152a:	6123      	str	r3, [r4, #16]
  obqp->ptr = NULL;
 800152c:	2200      	movs	r2, #0
  if (obqp->notify != NULL) {
 800152e:	6b23      	ldr	r3, [r4, #48]	; 0x30
  obqp->ptr = NULL;
 8001530:	62a2      	str	r2, [r4, #40]	; 0x28
  if (obqp->notify != NULL) {
 8001532:	b10b      	cbz	r3, 8001538 <obqPutTimeout+0x48>
    obqp->notify(obqp);
 8001534:	4620      	mov	r0, r4
 8001536:	4798      	blx	r3
 8001538:	2000      	movs	r0, #0
 800153a:	f380 8811 	msr	BASEPRI, r0
}
 800153e:	bd70      	pop	{r4, r5, r6, pc}
    msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 8001540:	4611      	mov	r1, r2
 8001542:	f7ff ffb5 	bl	80014b0 <obqGetEmptyBufferTimeoutS>
    if (msg != MSG_OK) {
 8001546:	b908      	cbnz	r0, 800154c <obqPutTimeout+0x5c>
 8001548:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800154a:	e7d9      	b.n	8001500 <obqPutTimeout+0x10>
 800154c:	f386 8811 	msr	BASEPRI, r6
}
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	bf00      	nop
	...

08001560 <_putt.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, timeout);
 8001560:	3044      	adds	r0, #68	; 0x44
 8001562:	f7ff bfc5 	b.w	80014f0 <obqPutTimeout>
 8001566:	bf00      	nop
	...

08001570 <_put.lto_priv.1>:
  return obqPutTimeout(&((SerialUSBDriver *)ip)->obqueue, b, TIME_INFINITE);
 8001570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001574:	3044      	adds	r0, #68	; 0x44
 8001576:	f7ff bfbb 	b.w	80014f0 <obqPutTimeout>
 800157a:	bf00      	nop
 800157c:	0000      	movs	r0, r0
	...

08001580 <ibqGetFullBufferTimeoutS>:
                                 sysinterval_t timeout) {
 8001580:	b538      	push	{r3, r4, r5, lr}
 8001582:	4604      	mov	r4, r0
 8001584:	460d      	mov	r5, r1
 8001586:	e005      	b.n	8001594 <ibqGetFullBufferTimeoutS+0x14>
    if (ibqp->suspended) {
 8001588:	7a23      	ldrb	r3, [r4, #8]
 800158a:	b983      	cbnz	r3, 80015ae <ibqGetFullBufferTimeoutS+0x2e>
 800158c:	f7ff ff00 	bl	8001390 <chThdEnqueueTimeoutS>
    if (msg < MSG_OK) {
 8001590:	2800      	cmp	r0, #0
 8001592:	db0b      	blt.n	80015ac <ibqGetFullBufferTimeoutS+0x2c>
  while (ibqIsEmptyI(ibqp)) {
 8001594:	68e3      	ldr	r3, [r4, #12]
 8001596:	4629      	mov	r1, r5
 8001598:	4620      	mov	r0, r4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d0f4      	beq.n	8001588 <ibqGetFullBufferTimeoutS+0x8>
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 800159e:	6963      	ldr	r3, [r4, #20]
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80015a0:	2000      	movs	r0, #0
  ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 80015a2:	1d1a      	adds	r2, r3, #4
  ibqp->top = ibqp->ptr + *((size_t *)ibqp->brdptr);
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4413      	add	r3, r2
 80015a8:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
}
 80015ac:	bd38      	pop	{r3, r4, r5, pc}
      return MSG_RESET;
 80015ae:	f06f 0001 	mvn.w	r0, #1
}
 80015b2:	bd38      	pop	{r3, r4, r5, pc}
	...

080015c0 <ibqGetTimeout>:
msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 80015c0:	b570      	push	{r4, r5, r6, lr}
 80015c2:	2320      	movs	r3, #32
 80015c4:	4604      	mov	r4, r0
 80015c6:	f383 8811 	msr	BASEPRI, r3
  if (ibqp->ptr == NULL) {
 80015ca:	6a85      	ldr	r5, [r0, #40]	; 0x28
 80015cc:	b1e5      	cbz	r5, 8001608 <ibqGetTimeout+0x48>
  msg = (msg_t)*ibqp->ptr;
 80015ce:	f815 6b01 	ldrb.w	r6, [r5], #1
  if (ibqp->ptr >= ibqp->top) {
 80015d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  ibqp->ptr++;
 80015d4:	62a5      	str	r5, [r4, #40]	; 0x28
  if (ibqp->ptr >= ibqp->top) {
 80015d6:	4295      	cmp	r5, r2
 80015d8:	d311      	bcc.n	80015fe <ibqGetTimeout+0x3e>
  ibqp->brdptr += ibqp->bsize;
 80015da:	6963      	ldr	r3, [r4, #20]
 80015dc:	69e0      	ldr	r0, [r4, #28]
  ibqp->bcounter--;
 80015de:	68e2      	ldr	r2, [r4, #12]
  ibqp->brdptr += ibqp->bsize;
 80015e0:	4403      	add	r3, r0
  if (ibqp->brdptr >= ibqp->btop) {
 80015e2:	69a1      	ldr	r1, [r4, #24]
  ibqp->bcounter--;
 80015e4:	3a01      	subs	r2, #1
  if (ibqp->brdptr >= ibqp->btop) {
 80015e6:	428b      	cmp	r3, r1
  ibqp->brdptr += ibqp->bsize;
 80015e8:	6163      	str	r3, [r4, #20]
  ibqp->bcounter--;
 80015ea:	60e2      	str	r2, [r4, #12]
  if (ibqp->brdptr >= ibqp->btop) {
 80015ec:	d301      	bcc.n	80015f2 <ibqGetTimeout+0x32>
    ibqp->brdptr = ibqp->buffers;
 80015ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f0:	6163      	str	r3, [r4, #20]
  ibqp->ptr = NULL;
 80015f2:	2200      	movs	r2, #0
  if (ibqp->notify != NULL) {
 80015f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
  ibqp->ptr = NULL;
 80015f6:	62a2      	str	r2, [r4, #40]	; 0x28
  if (ibqp->notify != NULL) {
 80015f8:	b10b      	cbz	r3, 80015fe <ibqGetTimeout+0x3e>
    ibqp->notify(ibqp);
 80015fa:	4620      	mov	r0, r4
 80015fc:	4798      	blx	r3
 80015fe:	2300      	movs	r3, #0
 8001600:	f383 8811 	msr	BASEPRI, r3
}
 8001604:	4630      	mov	r0, r6
 8001606:	bd70      	pop	{r4, r5, r6, pc}
    msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 8001608:	f7ff ffba 	bl	8001580 <ibqGetFullBufferTimeoutS>
    if (msg != MSG_OK) {
 800160c:	4606      	mov	r6, r0
 800160e:	b908      	cbnz	r0, 8001614 <ibqGetTimeout+0x54>
 8001610:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8001612:	e7dc      	b.n	80015ce <ibqGetTimeout+0xe>
 8001614:	f385 8811 	msr	BASEPRI, r5
      return msg;
 8001618:	e7f4      	b.n	8001604 <ibqGetTimeout+0x44>
 800161a:	bf00      	nop
 800161c:	0000      	movs	r0, r0
	...

08001620 <_gett.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, timeout);
 8001620:	300c      	adds	r0, #12
 8001622:	f7ff bfcd 	b.w	80015c0 <ibqGetTimeout>
 8001626:	bf00      	nop
	...

08001630 <_get.lto_priv.1>:
  return ibqGetTimeout(&((SerialUSBDriver *)ip)->ibqueue, TIME_INFINITE);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001634:	300c      	adds	r0, #12
 8001636:	f7ff bfc3 	b.w	80015c0 <ibqGetTimeout>
 800163a:	bf00      	nop
 800163c:	0000      	movs	r0, r0
	...

08001640 <chThdSleep>:
void chThdSleep(sysinterval_t time) {
 8001640:	b508      	push	{r3, lr}
 8001642:	4601      	mov	r1, r0
 8001644:	2320      	movs	r3, #32
 8001646:	f383 8811 	msr	BASEPRI, r3
  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 800164a:	2008      	movs	r0, #8
 800164c:	f7ff fe18 	bl	8001280 <chSchGoSleepTimeoutS>
 8001650:	2300      	movs	r3, #0
 8001652:	f383 8811 	msr	BASEPRI, r3
}
 8001656:	bd08      	pop	{r3, pc}
	...

08001660 <Thread1>:
 * @api
 */
static inline void chRegSetThreadName(const char *name) {

#if CH_CFG_USE_REGISTRY == TRUE
  ch.rlist.current->name = name;
 8001660:	4b16      	ldr	r3, [pc, #88]	; (80016bc <Thread1+0x5c>)
 8001662:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <Thread1+0x60>)
 8001664:	699b      	ldr	r3, [r3, #24]
static THD_FUNCTION(Thread1, arg) {

  (void)arg;
  chRegSetThreadName("blinker");
  while (true) {
    palSetLine(LINE_LED1);
 8001666:	4c17      	ldr	r4, [pc, #92]	; (80016c4 <Thread1+0x64>)
    chThdSleepMilliseconds(50);
    palSetLine(LINE_LED2);
 8001668:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80016c8 <Thread1+0x68>
static THD_FUNCTION(Thread1, arg) {
 800166c:	b580      	push	{r7, lr}
 800166e:	619a      	str	r2, [r3, #24]
    palSetLine(LINE_LED1);
 8001670:	2701      	movs	r7, #1
    palSetLine(LINE_LED2);
 8001672:	2602      	movs	r6, #2
    chThdSleepMilliseconds(50);
    palSetLine(LINE_LED3);
 8001674:	f44f 4580 	mov.w	r5, #16384	; 0x4000
    chThdSleepMilliseconds(50);
 8001678:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    palSetLine(LINE_LED1);
 800167c:	8327      	strh	r7, [r4, #24]
    chThdSleepMilliseconds(50);
 800167e:	f7ff ffdf 	bl	8001640 <chThdSleep>
    chThdSleepMilliseconds(50);
 8001682:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    palSetLine(LINE_LED2);
 8001686:	f8a8 6018 	strh.w	r6, [r8, #24]
    chThdSleepMilliseconds(50);
 800168a:	f7ff ffd9 	bl	8001640 <chThdSleep>
    chThdSleepMilliseconds(200);
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    palSetLine(LINE_LED3);
 8001692:	8325      	strh	r5, [r4, #24]
    chThdSleepMilliseconds(200);
 8001694:	f7ff ffd4 	bl	8001640 <chThdSleep>
    palClearLine(LINE_LED1);
    chThdSleepMilliseconds(50);
 8001698:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    palClearLine(LINE_LED1);
 800169c:	8367      	strh	r7, [r4, #26]
    chThdSleepMilliseconds(50);
 800169e:	f7ff ffcf 	bl	8001640 <chThdSleep>
    palClearLine(LINE_LED2);
    chThdSleepMilliseconds(50);
 80016a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    palClearLine(LINE_LED2);
 80016a6:	f8a8 601a 	strh.w	r6, [r8, #26]
    chThdSleepMilliseconds(50);
 80016aa:	f7ff ffc9 	bl	8001640 <chThdSleep>
    palClearLine(LINE_LED3);
    chThdSleepMilliseconds(200);
 80016ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
    palClearLine(LINE_LED3);
 80016b2:	8365      	strh	r5, [r4, #26]
    chThdSleepMilliseconds(200);
 80016b4:	f7ff ffc4 	bl	8001640 <chThdSleep>
  while (true) {
 80016b8:	e7da      	b.n	8001670 <Thread1+0x10>
 80016ba:	bf00      	nop
 80016bc:	24000888 	.word	0x24000888
 80016c0:	08004b4c 	.word	0x08004b4c
 80016c4:	58020400 	.word	0x58020400
 80016c8:	58021000 	.word	0x58021000
 80016cc:	00000000 	.word	0x00000000

080016d0 <_sdc_wait_for_transfer_state>:
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 80016d0:	b530      	push	{r4, r5, lr}
        MMCSD_R1_ERROR(resp[0])) {
 80016d2:	4d10      	ldr	r5, [pc, #64]	; (8001714 <_sdc_wait_for_transfer_state+0x44>)
bool _sdc_wait_for_transfer_state(SDCDriver *sdcp) {
 80016d4:	b083      	sub	sp, #12
 80016d6:	4604      	mov	r4, r0
 80016d8:	e003      	b.n	80016e2 <_sdc_wait_for_transfer_state+0x12>
    switch (MMCSD_R1_STS(resp[0])) {
 80016da:	2a02      	cmp	r2, #2
 80016dc:	d816      	bhi.n	800170c <_sdc_wait_for_transfer_state+0x3c>
  chThdSleep(delay);
 80016de:	f7ff ffaf 	bl	8001640 <chThdSleep>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_STATUS,
 80016e2:	ab01      	add	r3, sp, #4
 80016e4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80016e6:	210d      	movs	r1, #13
 80016e8:	4620      	mov	r0, r4
 80016ea:	f7ff f969 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 80016ee:	4603      	mov	r3, r0
 80016f0:	200a      	movs	r0, #10
 80016f2:	b943      	cbnz	r3, 8001706 <_sdc_wait_for_transfer_state+0x36>
        MMCSD_R1_ERROR(resp[0])) {
 80016f4:	9a01      	ldr	r2, [sp, #4]
    switch (MMCSD_R1_STS(resp[0])) {
 80016f6:	f3c2 2143 	ubfx	r1, r2, #9, #4
                                   sdcp->rca, resp) ||
 80016fa:	422a      	tst	r2, r5
    switch (MMCSD_R1_STS(resp[0])) {
 80016fc:	f1a1 0205 	sub.w	r2, r1, #5
                                   sdcp->rca, resp) ||
 8001700:	d104      	bne.n	800170c <_sdc_wait_for_transfer_state+0x3c>
    switch (MMCSD_R1_STS(resp[0])) {
 8001702:	2904      	cmp	r1, #4
 8001704:	d1e9      	bne.n	80016da <_sdc_wait_for_transfer_state+0xa>
}
 8001706:	4618      	mov	r0, r3
 8001708:	b003      	add	sp, #12
 800170a:	bd30      	pop	{r4, r5, pc}
    switch (MMCSD_R1_STS(resp[0])) {
 800170c:	2301      	movs	r3, #1
}
 800170e:	4618      	mov	r0, r3
 8001710:	b003      	add	sp, #12
 8001712:	bd30      	pop	{r4, r5, pc}
 8001714:	fdffe008 	.word	0xfdffe008
	...

08001720 <sdcDisconnect>:
bool sdcDisconnect(SDCDriver *sdcp) {
 8001720:	b538      	push	{r3, r4, r5, lr}
 8001722:	2320      	movs	r3, #32
 8001724:	f383 8811 	msr	BASEPRI, r3
  if (sdcp->state == BLK_ACTIVE) {
 8001728:	7903      	ldrb	r3, [r0, #4]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d012      	beq.n	8001754 <sdcDisconnect+0x34>
  sdcp->state = BLK_DISCONNECTING;
 800172e:	2304      	movs	r3, #4
 8001730:	4604      	mov	r4, r0
 8001732:	2500      	movs	r5, #0
 8001734:	7103      	strb	r3, [r0, #4]
 8001736:	f385 8811 	msr	BASEPRI, r5
  if (_sdc_wait_for_transfer_state(sdcp)) {
 800173a:	f7ff ffc9 	bl	80016d0 <_sdc_wait_for_transfer_state>
  sdcp->sdmmc->CLKCR = 0;
 800173e:	6c23      	ldr	r3, [r4, #64]	; 0x40
    sdcp->state = BLK_ACTIVE;
 8001740:	2202      	movs	r2, #2
  if (_sdc_wait_for_transfer_state(sdcp)) {
 8001742:	b918      	cbnz	r0, 800174c <sdcDisconnect+0x2c>
 8001744:	6058      	str	r0, [r3, #4]
  sdcp->sdmmc->POWER = 0;
 8001746:	6018      	str	r0, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 8001748:	7122      	strb	r2, [r4, #4]
}
 800174a:	bd38      	pop	{r3, r4, r5, pc}
  sdcp->sdmmc->CLKCR = 0;
 800174c:	605d      	str	r5, [r3, #4]
  sdcp->sdmmc->POWER = 0;
 800174e:	601d      	str	r5, [r3, #0]
    sdcp->state = BLK_ACTIVE;
 8001750:	7122      	strb	r2, [r4, #4]
}
 8001752:	bd38      	pop	{r3, r4, r5, pc}
 8001754:	2000      	movs	r0, #0
 8001756:	f380 8811 	msr	BASEPRI, r0
 800175a:	bd38      	pop	{r3, r4, r5, pc}
 800175c:	0000      	movs	r0, r0
	...

08001760 <chprintf.constprop.0>:
 * @return              The number of bytes that would have been
 *                      written to @p chp if no stream error occurs
 *
 * @api
 */
int chprintf(BaseSequentialStream *chp, const char *fmt, ...) {
 8001760:	b40e      	push	{r1, r2, r3}
 8001762:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001766:	b086      	sub	sp, #24
    c = *fmt++;
 8001768:	4ac0      	ldr	r2, [pc, #768]	; (8001a6c <chprintf.constprop.0+0x30c>)
  int n = 0;
 800176a:	2600      	movs	r6, #0
    c = *fmt++;
 800176c:	2148      	movs	r1, #72	; 0x48
  va_list ap;
  int formatted_bytes;

  va_start(ap, fmt);
 800176e:	ab10      	add	r3, sp, #64	; 0x40
 8001770:	f102 3bff 	add.w	fp, r2, #4294967295	; 0xffffffff
 8001774:	4fbe      	ldr	r7, [pc, #760]	; (8001a70 <chprintf.constprop.0+0x310>)
 8001776:	4614      	mov	r4, r2
 8001778:	469a      	mov	sl, r3
 800177a:	9302      	str	r3, [sp, #8]
 800177c:	e00b      	b.n	8001796 <chprintf.constprop.0+0x36>
      streamPut(chp, (uint8_t)c);
 800177e:	683b      	ldr	r3, [r7, #0]
      n++;
 8001780:	3601      	adds	r6, #1
      streamPut(chp, (uint8_t)c);
 8001782:	48bb      	ldr	r0, [pc, #748]	; (8001a70 <chprintf.constprop.0+0x310>)
      n++;
 8001784:	46a3      	mov	fp, r4
      streamPut(chp, (uint8_t)c);
 8001786:	68db      	ldr	r3, [r3, #12]
 8001788:	4798      	blx	r3
    c = *fmt++;
 800178a:	465c      	mov	r4, fp
 800178c:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0) {
 8001790:	2900      	cmp	r1, #0
 8001792:	f000 80ba 	beq.w	800190a <chprintf.constprop.0+0x1aa>
    if (c != '%') {
 8001796:	2925      	cmp	r1, #37	; 0x25
 8001798:	d1f1      	bne.n	800177e <chprintf.constprop.0+0x1e>
    if (*fmt == '-') {
 800179a:	f89b 3001 	ldrb.w	r3, [fp, #1]
 800179e:	2b2d      	cmp	r3, #45	; 0x2d
 80017a0:	f000 8149 	beq.w	8001a36 <chprintf.constprop.0+0x2d6>
    if (*fmt == '+') {
 80017a4:	7823      	ldrb	r3, [r4, #0]
    left_align = false;
 80017a6:	f04f 0e00 	mov.w	lr, #0
    if (*fmt == '+') {
 80017aa:	2b2b      	cmp	r3, #43	; 0x2b
 80017ac:	f000 814c 	beq.w	8001a48 <chprintf.constprop.0+0x2e8>
    do_sign = false;
 80017b0:	2500      	movs	r5, #0
    if (*fmt == '0') {
 80017b2:	2b30      	cmp	r3, #48	; 0x30
 80017b4:	f000 813b 	beq.w	8001a2e <chprintf.constprop.0+0x2ce>
    filler = ' ';
 80017b8:	2220      	movs	r2, #32
 80017ba:	9200      	str	r2, [sp, #0]
    if ( *fmt == '*') {
 80017bc:	2b2a      	cmp	r3, #42	; 0x2a
 80017be:	f040 8121 	bne.w	8001a04 <chprintf.constprop.0+0x2a4>
      c = *fmt++;
 80017c2:	f104 0b02 	add.w	fp, r4, #2
 80017c6:	7863      	ldrb	r3, [r4, #1]
      width = va_arg(ap, int);
 80017c8:	f85a 1b04 	ldr.w	r1, [sl], #4
    if (c == '.') {
 80017cc:	2b2e      	cmp	r3, #46	; 0x2e
 80017ce:	f000 813f 	beq.w	8001a50 <chprintf.constprop.0+0x2f0>
    precision = 0;
 80017d2:	2400      	movs	r4, #0
    if (c == 'l' || c == 'L') {
 80017d4:	f003 00df 	and.w	r0, r3, #223	; 0xdf
 80017d8:	284c      	cmp	r0, #76	; 0x4c
 80017da:	f040 809f 	bne.w	800191c <chprintf.constprop.0+0x1bc>
      c = *fmt++;
 80017de:	f81b 3b01 	ldrb.w	r3, [fp], #1
      if (c == 0) {
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	f000 8091 	beq.w	800190a <chprintf.constprop.0+0x1aa>
 80017e8:	f1a3 0044 	sub.w	r0, r3, #68	; 0x44
 80017ec:	2834      	cmp	r0, #52	; 0x34
 80017ee:	f200 81a3 	bhi.w	8001b38 <chprintf.constprop.0+0x3d8>
 80017f2:	e8df f010 	tbh	[pc, r0, lsl #1]
 80017f6:	016f      	.short	0x016f
 80017f8:	01a101a1 	.word	0x01a101a1
 80017fc:	01a101a1 	.word	0x01a101a1
 8001800:	01a1016f 	.word	0x01a1016f
 8001804:	01a101a1 	.word	0x01a101a1
 8001808:	01a101a1 	.word	0x01a101a1
 800180c:	009001a5 	.word	0x009001a5
 8001810:	01a101a1 	.word	0x01a101a1
 8001814:	01a101a1 	.word	0x01a101a1
 8001818:	01a10035 	.word	0x01a10035
 800181c:	009001a1 	.word	0x009001a1
 8001820:	01a101a1 	.word	0x01a101a1
 8001824:	01a101a1 	.word	0x01a101a1
 8001828:	01a101a1 	.word	0x01a101a1
 800182c:	01a101a1 	.word	0x01a101a1
 8001830:	01a101a1 	.word	0x01a101a1
 8001834:	016f015c 	.word	0x016f015c
 8001838:	01a101a1 	.word	0x01a101a1
 800183c:	01a101a1 	.word	0x01a101a1
 8001840:	01a1016f 	.word	0x01a1016f
 8001844:	01a101a1 	.word	0x01a101a1
 8001848:	01a101a1 	.word	0x01a101a1
 800184c:	009001a5 	.word	0x009001a5
 8001850:	01a101a1 	.word	0x01a101a1
 8001854:	01a1013f 	.word	0x01a1013f
 8001858:	01a10035 	.word	0x01a10035
 800185c:	009001a1 	.word	0x009001a1
 8001860:	f04f 0c0a 	mov.w	ip, #10
        l = va_arg(ap, unsigned int);
 8001864:	f85a 5b04 	ldr.w	r5, [sl], #4
  q = p + MAX_FILLER;
 8001868:	f10d 0317 	add.w	r3, sp, #23
 800186c:	e000      	b.n	8001870 <chprintf.constprop.0+0x110>
  } while ((ll /= radix) != 0);
 800186e:	4623      	mov	r3, r4
    i = (int)(l % radix);
 8001870:	462a      	mov	r2, r5
    *--q = i;
 8001872:	1e5c      	subs	r4, r3, #1
    i = (int)(l % radix);
 8001874:	fbb5 f5fc 	udiv	r5, r5, ip
 8001878:	fb0c 2815 	mls	r8, ip, r5, r2
    i += '0';
 800187c:	f108 0030 	add.w	r0, r8, #48	; 0x30
    if (i > '9') {
 8001880:	2839      	cmp	r0, #57	; 0x39
      i += 'A' - '0' - 10;
 8001882:	bfc8      	it	gt
 8001884:	f108 0037 	addgt.w	r0, r8, #55	; 0x37
  } while ((ll /= radix) != 0);
 8001888:	4562      	cmp	r2, ip
    *--q = i;
 800188a:	b2c0      	uxtb	r0, r0
 800188c:	f803 0c01 	strb.w	r0, [r3, #-1]
  } while ((ll /= radix) != 0);
 8001890:	d2ed      	bcs.n	800186e <chprintf.constprop.0+0x10e>
  i = (int)(p + MAX_FILLER - q);
 8001892:	f10d 0217 	add.w	r2, sp, #23
 8001896:	ad03      	add	r5, sp, #12
 8001898:	1b14      	subs	r4, r2, r4
 800189a:	4690      	mov	r8, r2
 800189c:	46ac      	mov	ip, r5
 800189e:	e001      	b.n	80018a4 <chprintf.constprop.0+0x144>
 80018a0:	f813 0b01 	ldrb.w	r0, [r3], #1
  while (--i);
 80018a4:	4543      	cmp	r3, r8
    *p++ = *q++;
 80018a6:	f80c 0b01 	strb.w	r0, [ip], #1
  while (--i);
 80018aa:	d1f9      	bne.n	80018a0 <chprintf.constprop.0+0x140>
 80018ac:	1b09      	subs	r1, r1, r4
 80018ae:	3c01      	subs	r4, #1
 80018b0:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
    if (left_align == false) {
 80018b4:	f1be 0f00 	cmp.w	lr, #0
 80018b8:	d104      	bne.n	80018c4 <chprintf.constprop.0+0x164>
    if (width < 0) {
 80018ba:	2900      	cmp	r1, #0
      width = -width;
 80018bc:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 80018c0:	f300 8153 	bgt.w	8001b6a <chprintf.constprop.0+0x40a>
    while (--i >= 0) {
 80018c4:	2c00      	cmp	r4, #0
 80018c6:	db0c      	blt.n	80018e2 <chprintf.constprop.0+0x182>
 80018c8:	f104 0901 	add.w	r9, r4, #1
 80018cc:	44a9      	add	r9, r5
      streamPut(chp, (uint8_t)*s++);
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	4638      	mov	r0, r7
 80018d2:	f815 1b01 	ldrb.w	r1, [r5], #1
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	4798      	blx	r3
    while (--i >= 0) {
 80018da:	454d      	cmp	r5, r9
 80018dc:	d1f7      	bne.n	80018ce <chprintf.constprop.0+0x16e>
 80018de:	3601      	adds	r6, #1
 80018e0:	4426      	add	r6, r4
    while (width) {
 80018e2:	f1b8 0f00 	cmp.w	r8, #0
 80018e6:	f43f af50 	beq.w	800178a <chprintf.constprop.0+0x2a>
 80018ea:	4644      	mov	r4, r8
 80018ec:	9d00      	ldr	r5, [sp, #0]
      streamPut(chp, (uint8_t)filler);
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	4629      	mov	r1, r5
 80018f2:	4638      	mov	r0, r7
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	4798      	blx	r3
    while (width) {
 80018f8:	3c01      	subs	r4, #1
 80018fa:	d1f8      	bne.n	80018ee <chprintf.constprop.0+0x18e>
    c = *fmt++;
 80018fc:	465c      	mov	r4, fp
 80018fe:	4446      	add	r6, r8
 8001900:	f814 1b01 	ldrb.w	r1, [r4], #1
    if (c == 0) {
 8001904:	2900      	cmp	r1, #0
 8001906:	f47f af46 	bne.w	8001796 <chprintf.constprop.0+0x36>
  formatted_bytes = chvprintf(chp, fmt, ap);
  va_end(ap);

  return formatted_bytes;
}
 800190a:	4630      	mov	r0, r6
 800190c:	b006      	add	sp, #24
 800190e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001912:	b003      	add	sp, #12
 8001914:	4770      	bx	lr
      if (c == 0) {
 8001916:	f04f 0c10 	mov.w	ip, #16
 800191a:	e7a3      	b.n	8001864 <chprintf.constprop.0+0x104>
 800191c:	f1a3 0c44 	sub.w	ip, r3, #68	; 0x44
 8001920:	f1bc 0f34 	cmp.w	ip, #52	; 0x34
 8001924:	f200 8108 	bhi.w	8001b38 <chprintf.constprop.0+0x3d8>
 8001928:	a201      	add	r2, pc, #4	; (adr r2, 8001930 <chprintf.constprop.0+0x1d0>)
 800192a:	f852 f02c 	ldr.w	pc, [r2, ip, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001ad5 	.word	0x08001ad5
 8001934:	08001b39 	.word	0x08001b39
 8001938:	08001b39 	.word	0x08001b39
 800193c:	08001b39 	.word	0x08001b39
 8001940:	08001b39 	.word	0x08001b39
 8001944:	08001ad5 	.word	0x08001ad5
 8001948:	08001b39 	.word	0x08001b39
 800194c:	08001b39 	.word	0x08001b39
 8001950:	08001b39 	.word	0x08001b39
 8001954:	08001b39 	.word	0x08001b39
 8001958:	08001b39 	.word	0x08001b39
 800195c:	08001b41 	.word	0x08001b41
 8001960:	08001917 	.word	0x08001917
 8001964:	08001b39 	.word	0x08001b39
 8001968:	08001b39 	.word	0x08001b39
 800196c:	08001b39 	.word	0x08001b39
 8001970:	08001b39 	.word	0x08001b39
 8001974:	08001861 	.word	0x08001861
 8001978:	08001b39 	.word	0x08001b39
 800197c:	08001b39 	.word	0x08001b39
 8001980:	08001917 	.word	0x08001917
 8001984:	08001b39 	.word	0x08001b39
 8001988:	08001b39 	.word	0x08001b39
 800198c:	08001b39 	.word	0x08001b39
 8001990:	08001b39 	.word	0x08001b39
 8001994:	08001b39 	.word	0x08001b39
 8001998:	08001b39 	.word	0x08001b39
 800199c:	08001b39 	.word	0x08001b39
 80019a0:	08001b39 	.word	0x08001b39
 80019a4:	08001b39 	.word	0x08001b39
 80019a8:	08001b39 	.word	0x08001b39
 80019ac:	08001aaf 	.word	0x08001aaf
 80019b0:	08001ad5 	.word	0x08001ad5
 80019b4:	08001b39 	.word	0x08001b39
 80019b8:	08001b39 	.word	0x08001b39
 80019bc:	08001b39 	.word	0x08001b39
 80019c0:	08001b39 	.word	0x08001b39
 80019c4:	08001ad5 	.word	0x08001ad5
 80019c8:	08001b39 	.word	0x08001b39
 80019cc:	08001b39 	.word	0x08001b39
 80019d0:	08001b39 	.word	0x08001b39
 80019d4:	08001b39 	.word	0x08001b39
 80019d8:	08001b39 	.word	0x08001b39
 80019dc:	08001b41 	.word	0x08001b41
 80019e0:	08001917 	.word	0x08001917
 80019e4:	08001b39 	.word	0x08001b39
 80019e8:	08001b39 	.word	0x08001b39
 80019ec:	08001a75 	.word	0x08001a75
 80019f0:	08001b39 	.word	0x08001b39
 80019f4:	08001861 	.word	0x08001861
 80019f8:	08001b39 	.word	0x08001b39
 80019fc:	08001b39 	.word	0x08001b39
 8001a00:	08001917 	.word	0x08001917
        c = *fmt++;
 8001a04:	f104 0b01 	add.w	fp, r4, #1
        if (c == 0) {
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f43f af7e 	beq.w	800190a <chprintf.constprop.0+0x1aa>
      width = 0;
 8001a0e:	2100      	movs	r1, #0
        if (c >= '0' && c <= '9') {
 8001a10:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
          width = width * 10 + c;
 8001a14:	eb01 0081 	add.w	r0, r1, r1, lsl #2
        if (c >= '0' && c <= '9') {
 8001a18:	b2d2      	uxtb	r2, r2
 8001a1a:	2a09      	cmp	r2, #9
 8001a1c:	f63f aed6 	bhi.w	80017cc <chprintf.constprop.0+0x6c>
        c = *fmt++;
 8001a20:	f81b 3b01 	ldrb.w	r3, [fp], #1
          width = width * 10 + c;
 8001a24:	eb02 0140 	add.w	r1, r2, r0, lsl #1
        if (c == 0) {
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f1      	bne.n	8001a10 <chprintf.constprop.0+0x2b0>
 8001a2c:	e76d      	b.n	800190a <chprintf.constprop.0+0x1aa>
      filler = '0';
 8001a2e:	9300      	str	r3, [sp, #0]
      fmt++;
 8001a30:	3401      	adds	r4, #1
 8001a32:	7823      	ldrb	r3, [r4, #0]
 8001a34:	e6c2      	b.n	80017bc <chprintf.constprop.0+0x5c>
    if (*fmt == '+') {
 8001a36:	f89b 3002 	ldrb.w	r3, [fp, #2]
      fmt++;
 8001a3a:	f10b 0402 	add.w	r4, fp, #2
      left_align = true;
 8001a3e:	f04f 0e01 	mov.w	lr, #1
    if (*fmt == '+') {
 8001a42:	2b2b      	cmp	r3, #43	; 0x2b
 8001a44:	f47f aeb4 	bne.w	80017b0 <chprintf.constprop.0+0x50>
      do_sign = true;
 8001a48:	2501      	movs	r5, #1
 8001a4a:	7863      	ldrb	r3, [r4, #1]
      fmt++;
 8001a4c:	442c      	add	r4, r5
 8001a4e:	e6b0      	b.n	80017b2 <chprintf.constprop.0+0x52>
      c = *fmt++;
 8001a50:	f89b 3000 	ldrb.w	r3, [fp]
      if (c == 0) {
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f43f af58 	beq.w	800190a <chprintf.constprop.0+0x1aa>
      if (c == '*') {
 8001a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8001a5c:	d173      	bne.n	8001b46 <chprintf.constprop.0+0x3e6>
        c = *fmt++;
 8001a5e:	f89b 3001 	ldrb.w	r3, [fp, #1]
 8001a62:	f10b 0b02 	add.w	fp, fp, #2
        precision = va_arg(ap, int);
 8001a66:	f85a 4b04 	ldr.w	r4, [sl], #4
 8001a6a:	e6b3      	b.n	80017d4 <chprintf.constprop.0+0x74>
 8001a6c:	08004b55 	.word	0x08004b55
 8001a70:	240002b0 	.word	0x240002b0
      if ((s = va_arg(ap, char *)) == 0) {
 8001a74:	f85a 5b04 	ldr.w	r5, [sl], #4
 8001a78:	2d00      	cmp	r5, #0
 8001a7a:	f000 80ba 	beq.w	8001bf2 <chprintf.constprop.0+0x492>
 8001a7e:	782b      	ldrb	r3, [r5, #0]
      if (precision == 0) {
 8001a80:	2c00      	cmp	r4, #0
 8001a82:	f040 8099 	bne.w	8001bb8 <chprintf.constprop.0+0x458>
      for (p = s; *p && (--precision >= 0); p++)
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 809a 	beq.w	8001bc0 <chprintf.constprop.0+0x460>
 8001a8c:	f647 74fe 	movw	r4, #32766	; 0x7ffe
 8001a90:	462b      	mov	r3, r5
 8001a92:	e001      	b.n	8001a98 <chprintf.constprop.0+0x338>
 8001a94:	42e2      	cmn	r2, r4
 8001a96:	d404      	bmi.n	8001aa2 <chprintf.constprop.0+0x342>
 8001a98:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8001a9c:	1aea      	subs	r2, r5, r3
 8001a9e:	2800      	cmp	r0, #0
 8001aa0:	d1f8      	bne.n	8001a94 <chprintf.constprop.0+0x334>
 8001aa2:	1b5c      	subs	r4, r3, r5
      filler = ' ';
 8001aa4:	2320      	movs	r3, #32
 8001aa6:	1b09      	subs	r1, r1, r4
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	3c01      	subs	r4, #1
 8001aac:	e700      	b.n	80018b0 <chprintf.constprop.0+0x150>
      filler = ' ';
 8001aae:	2320      	movs	r3, #32
 8001ab0:	3901      	subs	r1, #1
 8001ab2:	9300      	str	r3, [sp, #0]
      *p++ = va_arg(ap, int);
 8001ab4:	f85a 3b04 	ldr.w	r3, [sl], #4
 8001ab8:	f88d 300c 	strb.w	r3, [sp, #12]
 8001abc:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
    if (left_align == false) {
 8001ac0:	f1be 0f00 	cmp.w	lr, #0
 8001ac4:	d103      	bne.n	8001ace <chprintf.constprop.0+0x36e>
    if (width < 0) {
 8001ac6:	2900      	cmp	r1, #0
      width = -width;
 8001ac8:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8001acc:	dc70      	bgt.n	8001bb0 <chprintf.constprop.0+0x450>
    if (left_align == false) {
 8001ace:	2400      	movs	r4, #0
 8001ad0:	ad03      	add	r5, sp, #12
 8001ad2:	e6f9      	b.n	80018c8 <chprintf.constprop.0+0x168>
        l = va_arg(ap, int);
 8001ad4:	f85a 0b04 	ldr.w	r0, [sl], #4
      if (l < 0) {
 8001ad8:	2800      	cmp	r0, #0
 8001ada:	db61      	blt.n	8001ba0 <chprintf.constprop.0+0x440>
        if (do_sign) {
 8001adc:	2d00      	cmp	r5, #0
 8001ade:	f000 808d 	beq.w	8001bfc <chprintf.constprop.0+0x49c>
          *p++ = '+';
 8001ae2:	232b      	movs	r3, #43	; 0x2b
 8001ae4:	f10d 040d 	add.w	r4, sp, #13
 8001ae8:	ad03      	add	r5, sp, #12
 8001aea:	f88d 300c 	strb.w	r3, [sp, #12]
  q = p + MAX_FILLER;
 8001aee:	f104 030b 	add.w	r3, r4, #11
    i = (int)(l % radix);
 8001af2:	4a49      	ldr	r2, [pc, #292]	; (8001c18 <chprintf.constprop.0+0x4b8>)
  q = p + MAX_FILLER;
 8001af4:	469c      	mov	ip, r3
 8001af6:	9301      	str	r3, [sp, #4]
    i = (int)(l % radix);
 8001af8:	fba2 8300 	umull	r8, r3, r2, r0
 8001afc:	4680      	mov	r8, r0
 8001afe:	08db      	lsrs	r3, r3, #3
  } while ((ll /= radix) != 0);
 8001b00:	f1b8 0f09 	cmp.w	r8, #9
    i = (int)(l % radix);
 8001b04:	eb03 0983 	add.w	r9, r3, r3, lsl #2
 8001b08:	4618      	mov	r0, r3
 8001b0a:	eba8 0349 	sub.w	r3, r8, r9, lsl #1
    i += '0';
 8001b0e:	f103 0330 	add.w	r3, r3, #48	; 0x30
    *--q = i;
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	f80c 3d01 	strb.w	r3, [ip, #-1]!
  } while ((ll /= radix) != 0);
 8001b18:	dcee      	bgt.n	8001af8 <chprintf.constprop.0+0x398>
  i = (int)(p + MAX_FILLER - q);
 8001b1a:	9a01      	ldr	r2, [sp, #4]
 8001b1c:	eba2 000c 	sub.w	r0, r2, ip
 8001b20:	4420      	add	r0, r4
 8001b22:	e001      	b.n	8001b28 <chprintf.constprop.0+0x3c8>
 8001b24:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    *p++ = *q++;
 8001b28:	f804 3b01 	strb.w	r3, [r4], #1
  while (--i);
 8001b2c:	4284      	cmp	r4, r0
 8001b2e:	d1f9      	bne.n	8001b24 <chprintf.constprop.0+0x3c4>
 8001b30:	1b64      	subs	r4, r4, r5
 8001b32:	1b09      	subs	r1, r1, r4
 8001b34:	3c01      	subs	r4, #1
 8001b36:	e6bb      	b.n	80018b0 <chprintf.constprop.0+0x150>
 8001b38:	3901      	subs	r1, #1
      *p++ = c;
 8001b3a:	f88d 300c 	strb.w	r3, [sp, #12]
 8001b3e:	e7bd      	b.n	8001abc <chprintf.constprop.0+0x35c>
      if (c == 0) {
 8001b40:	f04f 0c08 	mov.w	ip, #8
 8001b44:	e68e      	b.n	8001864 <chprintf.constprop.0+0x104>
      c = *fmt++;
 8001b46:	f10b 0b01 	add.w	fp, fp, #1
    precision = 0;
 8001b4a:	2400      	movs	r4, #0
        while (c >= '0' && c <= '9') {
 8001b4c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
          precision = precision * 10 + c;
 8001b50:	eb04 0084 	add.w	r0, r4, r4, lsl #2
        while (c >= '0' && c <= '9') {
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	2a09      	cmp	r2, #9
 8001b58:	f63f ae3c 	bhi.w	80017d4 <chprintf.constprop.0+0x74>
          c = *fmt++;
 8001b5c:	f81b 3b01 	ldrb.w	r3, [fp], #1
          precision = precision * 10 + c;
 8001b60:	eb02 0440 	add.w	r4, r2, r0, lsl #1
          if (c == 0) {
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1f1      	bne.n	8001b4c <chprintf.constprop.0+0x3ec>
 8001b68:	e6cf      	b.n	800190a <chprintf.constprop.0+0x1aa>
      width = -width;
 8001b6a:	46c1      	mov	r9, r8
      if (*s == '-' && filler == '0') {
 8001b6c:	782b      	ldrb	r3, [r5, #0]
 8001b6e:	2b2d      	cmp	r3, #45	; 0x2d
 8001b70:	d102      	bne.n	8001b78 <chprintf.constprop.0+0x418>
 8001b72:	9b00      	ldr	r3, [sp, #0]
 8001b74:	2b30      	cmp	r3, #48	; 0x30
 8001b76:	d02f      	beq.n	8001bd8 <chprintf.constprop.0+0x478>
 8001b78:	4633      	mov	r3, r6
 8001b7a:	4626      	mov	r6, r4
 8001b7c:	4644      	mov	r4, r8
 8001b7e:	4698      	mov	r8, r3
        streamPut(chp, (uint8_t)filler);
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	4638      	mov	r0, r7
 8001b84:	9900      	ldr	r1, [sp, #0]
 8001b86:	68d2      	ldr	r2, [r2, #12]
 8001b88:	4790      	blx	r2
      } while (++width != 0);
 8001b8a:	3401      	adds	r4, #1
 8001b8c:	d1f8      	bne.n	8001b80 <chprintf.constprop.0+0x420>
 8001b8e:	4643      	mov	r3, r8
 8001b90:	46a0      	mov	r8, r4
 8001b92:	4634      	mov	r4, r6
 8001b94:	eba3 0609 	sub.w	r6, r3, r9
    while (--i >= 0) {
 8001b98:	2c00      	cmp	r4, #0
 8001b9a:	f6bf ae95 	bge.w	80018c8 <chprintf.constprop.0+0x168>
 8001b9e:	e5f4      	b.n	800178a <chprintf.constprop.0+0x2a>
        *p++ = '-';
 8001ba0:	232d      	movs	r3, #45	; 0x2d
        l = -l;
 8001ba2:	4240      	negs	r0, r0
        *p++ = '-';
 8001ba4:	f10d 040d 	add.w	r4, sp, #13
 8001ba8:	ad03      	add	r5, sp, #12
 8001baa:	f88d 300c 	strb.w	r3, [sp, #12]
 8001bae:	e79e      	b.n	8001aee <chprintf.constprop.0+0x38e>
    if (width < 0) {
 8001bb0:	4674      	mov	r4, lr
      width = -width;
 8001bb2:	46c1      	mov	r9, r8
    if (width < 0) {
 8001bb4:	ad03      	add	r5, sp, #12
 8001bb6:	e7d9      	b.n	8001b6c <chprintf.constprop.0+0x40c>
      for (p = s; *p && (--precision >= 0); p++)
 8001bb8:	b113      	cbz	r3, 8001bc0 <chprintf.constprop.0+0x460>
 8001bba:	3c01      	subs	r4, #1
 8001bbc:	f57f af68 	bpl.w	8001a90 <chprintf.constprop.0+0x330>
 8001bc0:	ea21 78e1 	bic.w	r8, r1, r1, asr #31
    if (left_align == false) {
 8001bc4:	f1be 0f00 	cmp.w	lr, #0
 8001bc8:	d103      	bne.n	8001bd2 <chprintf.constprop.0+0x472>
    if (width < 0) {
 8001bca:	2900      	cmp	r1, #0
      width = -width;
 8001bcc:	f1c8 0800 	rsb	r8, r8, #0
    if (width < 0) {
 8001bd0:	dc17      	bgt.n	8001c02 <chprintf.constprop.0+0x4a2>
    if (left_align == false) {
 8001bd2:	2320      	movs	r3, #32
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	e684      	b.n	80018e2 <chprintf.constprop.0+0x182>
        streamPut(chp, (uint8_t)*s++);
 8001bd8:	683b      	ldr	r3, [r7, #0]
        n++;
 8001bda:	3601      	adds	r6, #1
        streamPut(chp, (uint8_t)*s++);
 8001bdc:	212d      	movs	r1, #45	; 0x2d
 8001bde:	480f      	ldr	r0, [pc, #60]	; (8001c1c <chprintf.constprop.0+0x4bc>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	3c01      	subs	r4, #1
 8001be4:	4798      	blx	r3
 8001be6:	4633      	mov	r3, r6
 8001be8:	3501      	adds	r5, #1
 8001bea:	4626      	mov	r6, r4
 8001bec:	4644      	mov	r4, r8
 8001bee:	4698      	mov	r8, r3
 8001bf0:	e7c6      	b.n	8001b80 <chprintf.constprop.0+0x420>
        s = "(null)";
 8001bf2:	4d0b      	ldr	r5, [pc, #44]	; (8001c20 <chprintf.constprop.0+0x4c0>)
      if (precision == 0) {
 8001bf4:	2c00      	cmp	r4, #0
 8001bf6:	f43f af49 	beq.w	8001a8c <chprintf.constprop.0+0x32c>
 8001bfa:	e7de      	b.n	8001bba <chprintf.constprop.0+0x45a>
    p = tmpbuf;
 8001bfc:	ad03      	add	r5, sp, #12
 8001bfe:	462c      	mov	r4, r5
 8001c00:	e775      	b.n	8001aee <chprintf.constprop.0+0x38e>
    if (width < 0) {
 8001c02:	2320      	movs	r3, #32
 8001c04:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
      width = -width;
 8001c08:	46c1      	mov	r9, r8
    if (width < 0) {
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	4633      	mov	r3, r6
 8001c0e:	4626      	mov	r6, r4
 8001c10:	4644      	mov	r4, r8
 8001c12:	4698      	mov	r8, r3
 8001c14:	e7b4      	b.n	8001b80 <chprintf.constprop.0+0x420>
 8001c16:	bf00      	nop
 8001c18:	cccccccd 	.word	0xcccccccd
 8001c1c:	240002b0 	.word	0x240002b0
 8001c20:	08004b6c 	.word	0x08004b6c
	...

08001c30 <sdc_lld_wait_transaction_end>:
                                         uint32_t *resp) {
 8001c30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c34:	2420      	movs	r4, #32
 8001c36:	4605      	mov	r5, r0
 8001c38:	460f      	mov	r7, r1
 8001c3a:	4616      	mov	r6, r2
 8001c3c:	f384 8811 	msr	BASEPRI, r4
  if (sdcp->sdmmc->MASK != 0)
 8001c40:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001c42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c44:	b9b0      	cbnz	r0, 8001c74 <sdc_lld_wait_transaction_end+0x44>
  sdcp->sdmmc->IDMACTRL = 0;
 8001c46:	2200      	movs	r2, #0
 8001c48:	6522      	str	r2, [r4, #80]	; 0x50
  sdcp->sdmmc->MASK     = 0;
 8001c4a:	63e2      	str	r2, [r4, #60]	; 0x3c
  sdcp->sdmmc->DCTRL    = 0;
 8001c4c:	62e2      	str	r2, [r4, #44]	; 0x2c
  if ((sdcp->sdmmc->STA & SDMMC_STA_DATAEND) == 0) {
 8001c4e:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001c50:	f410 7080 	ands.w	r0, r0, #256	; 0x100
 8001c54:	d009      	beq.n	8001c6a <sdc_lld_wait_transaction_end+0x3a>
  sdcp->sdmmc->ICR      = SDMMC_ICR_ALL_FLAGS;
 8001c56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c5a:	63a3      	str	r3, [r4, #56]	; 0x38
 8001c5c:	f382 8811 	msr	BASEPRI, r2
  if (n > 1)
 8001c60:	2f01      	cmp	r7, #1
 8001c62:	d812      	bhi.n	8001c8a <sdc_lld_wait_transaction_end+0x5a>
  return HAL_SUCCESS;
 8001c64:	4610      	mov	r0, r2
}
 8001c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c6a:	f380 8811 	msr	BASEPRI, r0
    return HAL_FAILED;
 8001c6e:	2001      	movs	r0, #1
}
 8001c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ch.rlist.current;
 8001c74:	4a08      	ldr	r2, [pc, #32]	; (8001c98 <sdc_lld_wait_transaction_end+0x68>)
  *trp = tp;
 8001c76:	462b      	mov	r3, r5
    chSchGoSleepS(newstate);
 8001c78:	2003      	movs	r0, #3
 8001c7a:	6992      	ldr	r2, [r2, #24]
 8001c7c:	f843 2f3c 	str.w	r2, [r3, #60]!
  tp->u.wttrp = trp;
 8001c80:	6253      	str	r3, [r2, #36]	; 0x24
 8001c82:	f7ff fad5 	bl	8001230 <chSchGoSleepS>
 8001c86:	6c2c      	ldr	r4, [r5, #64]	; 0x40
 8001c88:	e7dd      	b.n	8001c46 <sdc_lld_wait_transaction_end+0x16>
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8001c8a:	4633      	mov	r3, r6
 8001c8c:	4628      	mov	r0, r5
 8001c8e:	210c      	movs	r1, #12
}
 8001c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_STOP_TRANSMISSION, 0, resp);
 8001c94:	f7fe be94 	b.w	80009c0 <sdc_lld_send_cmd_short_crc>
 8001c98:	24000888 	.word	0x24000888
 8001c9c:	00000000 	.word	0x00000000

08001ca0 <sdc_lld_write_aligned.part.0>:
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ca2:	461d      	mov	r5, r3
 8001ca4:	4604      	mov	r4, r0
 8001ca6:	4613      	mov	r3, r2
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001ca8:	6c00      	ldr	r0, [r0, #64]	; 0x40
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001caa:	f44f 768d 	mov.w	r6, #282	; 0x11a
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001cae:	460a      	mov	r2, r1
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001cb0:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DBLOCKSIZE_3 |
 8001cb4:	2190      	movs	r1, #144	; 0x90
  sdcp->sdmmc->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8001cb6:	026f      	lsls	r7, r5, #9
bool sdc_lld_write_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001cb8:	b083      	sub	sp, #12
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001cba:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001cbe:	63c6      	str	r6, [r0, #60]	; 0x3c
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001cc0:	2601      	movs	r6, #1
  sdcp->sdmmc->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8001cc2:	6287      	str	r7, [r0, #40]	; 0x28
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DBLOCKSIZE_3 |
 8001cc4:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001cc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
  sdcp->sdmmc->IDMABASE0 = (uint32_t)buf;
 8001cc8:	6583      	str	r3, [r0, #88]	; 0x58
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001cca:	06cb      	lsls	r3, r1, #27
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001ccc:	6506      	str	r6, [r0, #80]	; 0x50
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8001cce:	ae01      	add	r6, sp, #4
    startblk *= MMCSD_BLOCK_SIZE;
 8001cd0:	bf58      	it	pl
 8001cd2:	0252      	lslpl	r2, r2, #9
  if (n > 1) {
 8001cd4:	2d01      	cmp	r5, #1
 8001cd6:	d917      	bls.n	8001d08 <sdc_lld_write_aligned.part.0+0x68>
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_WRITE_MULTIPLE_BLOCK,
 8001cd8:	2159      	movs	r1, #89	; 0x59
 8001cda:	4620      	mov	r0, r4
 8001cdc:	4633      	mov	r3, r6
 8001cde:	f7fe fe6f 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8001ce2:	b948      	cbnz	r0, 8001cf8 <sdc_lld_write_aligned.part.0+0x58>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001ce4:	9a01      	ldr	r2, [sp, #4]
 8001ce6:	4b0f      	ldr	r3, [pc, #60]	; (8001d24 <sdc_lld_write_aligned.part.0+0x84>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	b92b      	cbnz	r3, 8001cf8 <sdc_lld_write_aligned.part.0+0x58>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8001cec:	4632      	mov	r2, r6
 8001cee:	4629      	mov	r1, r5
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff9d 	bl	8001c30 <sdc_lld_wait_transaction_end>
 8001cf6:	b128      	cbz	r0, 8001d04 <sdc_lld_write_aligned.part.0+0x64>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8001cf8:	4620      	mov	r0, r4
 8001cfa:	4632      	mov	r2, r6
 8001cfc:	4629      	mov	r1, r5
 8001cfe:	f7fe fe77 	bl	80009f0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8001d02:	2001      	movs	r0, #1
}
 8001d04:	b003      	add	sp, #12
 8001d06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_WRITE_BLOCK,
 8001d08:	2158      	movs	r1, #88	; 0x58
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	4633      	mov	r3, r6
 8001d0e:	f7fe fe57 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8001d12:	2800      	cmp	r0, #0
 8001d14:	d1f0      	bne.n	8001cf8 <sdc_lld_write_aligned.part.0+0x58>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001d16:	9a01      	ldr	r2, [sp, #4]
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <sdc_lld_write_aligned.part.0+0x84>)
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0e5      	beq.n	8001cec <sdc_lld_write_aligned.part.0+0x4c>
 8001d20:	e7ea      	b.n	8001cf8 <sdc_lld_write_aligned.part.0+0x58>
 8001d22:	bf00      	nop
 8001d24:	fdffe008 	.word	0xfdffe008
	...

08001d30 <sdc_lld_read_aligned.part.0>:
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d32:	461d      	mov	r5, r3
 8001d34:	4604      	mov	r4, r0
 8001d36:	4613      	mov	r3, r2
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001d38:	6c00      	ldr	r0, [r0, #64]	; 0x40
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001d3a:	f44f 7695 	mov.w	r6, #298	; 0x12a
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001d3e:	460a      	mov	r2, r1
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001d40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DTDIR |
 8001d44:	2192      	movs	r1, #146	; 0x92
  sdcp->sdmmc->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8001d46:	026f      	lsls	r7, r5, #9
bool sdc_lld_read_aligned(SDCDriver *sdcp, uint32_t startblk,
 8001d48:	b083      	sub	sp, #12
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001d4a:	f8c0 c038 	str.w	ip, [r0, #56]	; 0x38
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001d4e:	63c6      	str	r6, [r0, #60]	; 0x3c
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001d50:	2601      	movs	r6, #1
  sdcp->sdmmc->DLEN  = blocks * MMCSD_BLOCK_SIZE;
 8001d52:	6287      	str	r7, [r0, #40]	; 0x28
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DTDIR |
 8001d54:	62c1      	str	r1, [r0, #44]	; 0x2c
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001d56:	6b21      	ldr	r1, [r4, #48]	; 0x30
  sdcp->sdmmc->IDMABASE0 = (uint32_t)buf;
 8001d58:	6583      	str	r3, [r0, #88]	; 0x58
  if (!(sdcp->cardmode & SDC_MODE_HIGH_CAPACITY))
 8001d5a:	06cb      	lsls	r3, r1, #27
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001d5c:	6506      	str	r6, [r0, #80]	; 0x50
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8001d5e:	ae01      	add	r6, sp, #4
    startblk *= MMCSD_BLOCK_SIZE;
 8001d60:	bf58      	it	pl
 8001d62:	0252      	lslpl	r2, r2, #9
  if (n > 1) {
 8001d64:	2d01      	cmp	r5, #1
 8001d66:	d917      	bls.n	8001d98 <sdc_lld_read_aligned.part.0+0x68>
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_READ_MULTIPLE_BLOCK,
 8001d68:	2152      	movs	r1, #82	; 0x52
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	4633      	mov	r3, r6
 8001d6e:	f7fe fe27 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8001d72:	b948      	cbnz	r0, 8001d88 <sdc_lld_read_aligned.part.0+0x58>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001d74:	9a01      	ldr	r2, [sp, #4]
 8001d76:	4b0f      	ldr	r3, [pc, #60]	; (8001db4 <sdc_lld_read_aligned.part.0+0x84>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	b92b      	cbnz	r3, 8001d88 <sdc_lld_read_aligned.part.0+0x58>
  if (sdc_lld_wait_transaction_end(sdcp, blocks, resp) == true)
 8001d7c:	4632      	mov	r2, r6
 8001d7e:	4629      	mov	r1, r5
 8001d80:	4620      	mov	r0, r4
 8001d82:	f7ff ff55 	bl	8001c30 <sdc_lld_wait_transaction_end>
 8001d86:	b128      	cbz	r0, 8001d94 <sdc_lld_read_aligned.part.0+0x64>
  sdc_lld_error_cleanup(sdcp, blocks, resp);
 8001d88:	4620      	mov	r0, r4
 8001d8a:	4632      	mov	r2, r6
 8001d8c:	4629      	mov	r1, r5
 8001d8e:	f7fe fe2f 	bl	80009f0 <sdc_lld_error_cleanup>
  return HAL_FAILED;
 8001d92:	2001      	movs	r0, #1
}
 8001d94:	b003      	add	sp, #12
 8001d96:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | MMCSD_CMD_READ_SINGLE_BLOCK,
 8001d98:	2151      	movs	r1, #81	; 0x51
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	4633      	mov	r3, r6
 8001d9e:	f7fe fe0f 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1f0      	bne.n	8001d88 <sdc_lld_read_aligned.part.0+0x58>
                                   startblk, resp) || MMCSD_R1_ERROR(resp[0]))
 8001da6:	9a01      	ldr	r2, [sp, #4]
 8001da8:	4b02      	ldr	r3, [pc, #8]	; (8001db4 <sdc_lld_read_aligned.part.0+0x84>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d0e5      	beq.n	8001d7c <sdc_lld_read_aligned.part.0+0x4c>
 8001db0:	e7ea      	b.n	8001d88 <sdc_lld_read_aligned.part.0+0x58>
 8001db2:	bf00      	nop
 8001db4:	fdffe008 	.word	0xfdffe008
	...

08001dc0 <sdc_lld_read_special>:
                          uint8_t cmd, uint32_t arg) {
 8001dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8001dc4:	4f1c      	ldr	r7, [pc, #112]	; (8001e38 <sdc_lld_read_special+0x78>)
                          uint8_t cmd, uint32_t arg) {
 8001dc6:	4616      	mov	r6, r2
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8001dc8:	6c02      	ldr	r2, [r0, #64]	; 0x40
                          uint8_t cmd, uint32_t arg) {
 8001dca:	b082      	sub	sp, #8
 8001dcc:	4604      	mov	r4, r0
 8001dce:	460d      	mov	r5, r1
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8001dd0:	6257      	str	r7, [r2, #36]	; 0x24
                          uint8_t cmd, uint32_t arg) {
 8001dd2:	4698      	mov	r8, r3
  if (_sdc_wait_for_transfer_state(sdcp))
 8001dd4:	f7ff fc7c 	bl	80016d0 <_sdc_wait_for_transfer_state>
 8001dd8:	b9c0      	cbnz	r0, 8001e0c <sdc_lld_read_special+0x4c>
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001dda:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8001ddc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001de0:	f44f 7295 	mov.w	r2, #298	; 0x12a
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DTDIR |
 8001de4:	2306      	movs	r3, #6
  sdcp->sdmmc->ICR   = SDMMC_ICR_ALL_FLAGS;
 8001de6:	6387      	str	r7, [r0, #56]	; 0x38
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001de8:	2701      	movs	r7, #1
  sdcp->sdmmc->MASK  = SDMMC_MASK_DCRCFAILIE |
 8001dea:	63c2      	str	r2, [r0, #60]	; 0x3c
  if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | cmd, arg, resp) ||
 8001dec:	f048 0140 	orr.w	r1, r8, #64	; 0x40
  sdcp->sdmmc->DLEN  = bytes;
 8001df0:	6286      	str	r6, [r0, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | cmd, arg, resp) ||
 8001df2:	9a08      	ldr	r2, [sp, #32]
  sdcp->sdmmc->DCTRL = SDMMC_DCTRL_DTDIR |
 8001df4:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | cmd, arg, resp) ||
 8001df6:	ab01      	add	r3, sp, #4
  sdcp->sdmmc->IDMABASE0 = (uint32_t)buf;
 8001df8:	6585      	str	r5, [r0, #88]	; 0x58
  sdcp->sdmmc->IDMACTRL  = SDMMC_IDMA_IDMAEN;
 8001dfa:	6507      	str	r7, [r0, #80]	; 0x50
  if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | cmd, arg, resp) ||
 8001dfc:	4620      	mov	r0, r4
 8001dfe:	f7fe fddf 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8001e02:	b918      	cbnz	r0, 8001e0c <sdc_lld_read_special+0x4c>
      MMCSD_R1_ERROR(resp[0]))
 8001e04:	9a01      	ldr	r2, [sp, #4]
 8001e06:	4b0d      	ldr	r3, [pc, #52]	; (8001e3c <sdc_lld_read_special+0x7c>)
 8001e08:	4013      	ands	r3, r2
  if (sdc_lld_send_cmd_short_crc(sdcp, SDMMC_CMD_CMDTRANS | cmd, arg, resp) ||
 8001e0a:	b15b      	cbz	r3, 8001e24 <sdc_lld_read_special+0x64>
  uint32_t sta = sdcp->sdmmc->STA;
 8001e0c:	6c23      	ldr	r3, [r4, #64]	; 0x40
  sdc_lld_collect_errors(sdcp, sta);
 8001e0e:	f104 0034 	add.w	r0, r4, #52	; 0x34
  uint32_t sta = sdcp->sdmmc->STA;
 8001e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  sta = sdcp->sdmmc->STA;
 8001e14:	6b59      	ldr	r1, [r3, #52]	; 0x34
  sdcp->sdmmc->ICR = sta;
 8001e16:	6399      	str	r1, [r3, #56]	; 0x38
  sdc_lld_collect_errors(sdcp, sta);
 8001e18:	f7fe fd92 	bl	8000940 <sdc_lld_collect_errors.isra.0>
  return HAL_FAILED;
 8001e1c:	2001      	movs	r0, #1
}
 8001e1e:	b002      	add	sp, #8
 8001e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (sdc_lld_wait_transaction_end(sdcp, 1, resp))
 8001e24:	aa01      	add	r2, sp, #4
 8001e26:	4639      	mov	r1, r7
 8001e28:	4620      	mov	r0, r4
 8001e2a:	f7ff ff01 	bl	8001c30 <sdc_lld_wait_transaction_end>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d1ec      	bne.n	8001e0c <sdc_lld_read_special+0x4c>
}
 8001e32:	b002      	add	sp, #8
 8001e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e38:	000f4240 	.word	0x000f4240
 8001e3c:	fdffe008 	.word	0xfdffe008

08001e40 <_usb_ep0setup>:
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001e42:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
void _usb_ep0setup(USBDriver *usbp, usbep_t ep) {
 8001e46:	4604      	mov	r4, r0
  if (usbp->ep0state != USB_EP0_STP_WAITING) {
 8001e48:	b113      	cbz	r3, 8001e50 <_usb_ep0setup+0x10>
    usbp->ep0state = USB_EP0_STP_WAITING;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
  memcpy(buf, usbp->epc[ep]->setup_buf, 8);
 8001e50:	eb04 0181 	add.w	r1, r4, r1, lsl #2
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001e54:	6862      	ldr	r2, [r4, #4]
 8001e56:	68cb      	ldr	r3, [r1, #12]
 8001e58:	6a1b      	ldr	r3, [r3, #32]
 8001e5a:	6819      	ldr	r1, [r3, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
 8001e62:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8001e66:	6893      	ldr	r3, [r2, #8]
 8001e68:	b36b      	cbz	r3, 8001ec6 <_usb_ep0setup+0x86>
      !(usbp->config->requests_hook_cb(usbp))) {
 8001e6a:	4620      	mov	r0, r4
 8001e6c:	4798      	blx	r3
  if ((usbp->config->requests_hook_cb == NULL) ||
 8001e6e:	b350      	cbz	r0, 8001ec6 <_usb_ep0setup+0x86>
 8001e70:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001e72:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
  hw |= (uint16_t)*p << 8U;
 8001e76:	f894 1087 	ldrb.w	r1, [r4, #135]	; 0x87
 8001e7a:	f894 2086 	ldrb.w	r2, [r4, #134]	; 0x86
  max = (size_t)get_hword(&usbp->setup[6]);
 8001e7e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  if (usbp->ep0n > max) {
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d201      	bcs.n	8001e8a <_usb_ep0setup+0x4a>
    usbp->ep0n = max;
 8001e86:	4613      	mov	r3, r2
 8001e88:	67a2      	str	r2, [r4, #120]	; 0x78
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001e8a:	0602      	lsls	r2, r0, #24
 8001e8c:	f100 80e5 	bmi.w	800205a <_usb_ep0setup+0x21a>
    if (usbp->ep0n != 0U) {
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 8093 	beq.w	8001fbc <_usb_ep0setup+0x17c>
      usbp->ep0state = USB_EP0_OUT_RX;
 8001e96:	2215      	movs	r2, #21
 8001e98:	2320      	movs	r3, #32
 8001e9a:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8001e9e:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001ea2:	8962      	ldrh	r2, [r4, #10]
  osp->rxcnt  = 0;
 8001ea4:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 8001ea6:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
 8001ea8:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001eae:	6f66      	ldr	r6, [r4, #116]	; 0x74
  osp = usbp->epc[ep]->out_state;
 8001eb0:	699b      	ldr	r3, [r3, #24]
  usb_lld_start_out(usbp, ep);
 8001eb2:	4629      	mov	r1, r5
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001eb4:	8162      	strh	r2, [r4, #10]
      usbStartReceiveI(usbp, 0, (uint8_t *)usbp->ep0next, usbp->ep0n);
 8001eb6:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  osp->rxcnt  = 0;
 8001eb8:	e883 0064 	stmia.w	r3, {r2, r5, r6}
  usb_lld_start_out(usbp, ep);
 8001ebc:	f7fe fe50 	bl	8000b60 <usb_lld_start_out>
 8001ec0:	f385 8811 	msr	BASEPRI, r5
}
 8001ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((usbp->setup[0] & USB_RTYPE_TYPE_MASK) != USB_RTYPE_TYPE_STD) ||
 8001ec6:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8001eca:	f010 0660 	ands.w	r6, r0, #96	; 0x60
 8001ece:	d11c      	bne.n	8001f0a <_usb_ep0setup+0xca>
           ((uint32_t)usbp->setup[1] << 8U))) {
 8001ed0:	f894 1081 	ldrb.w	r1, [r4, #129]	; 0x81
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ed4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 8001ed8:	f240 3202 	movw	r2, #770	; 0x302
                                        USB_RTYPE_TYPE_MASK)) |
 8001edc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	f000 8199 	beq.w	8002218 <_usb_ep0setup+0x3d8>
 8001ee6:	d848      	bhi.n	8001f7a <_usb_ep0setup+0x13a>
 8001ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eec:	f000 8143 	beq.w	8002176 <_usb_ep0setup+0x336>
 8001ef0:	d923      	bls.n	8001f3a <_usb_ep0setup+0xfa>
 8001ef2:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8001ef6:	f000 814d 	beq.w	8002194 <_usb_ep0setup+0x354>
 8001efa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001efe:	d104      	bne.n	8001f0a <_usb_ep0setup+0xca>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8001f00:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	f000 80df 	beq.w	80020c8 <_usb_ep0setup+0x288>
 8001f0a:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8001f0e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
      _usb_isr_invoke_event_cb(usbp, USB_EVENT_STALLED);
 8001f12:	6861      	ldr	r1, [r4, #4]
 8001f14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f18:	680d      	ldr	r5, [r1, #0]
 8001f1a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 8001f1e:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8001f22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f26:	f8c2 3b00 	str.w	r3, [r2, #2816]	; 0xb00
 8001f2a:	b115      	cbz	r5, 8001f32 <_usb_ep0setup+0xf2>
 8001f2c:	2106      	movs	r1, #6
 8001f2e:	4620      	mov	r0, r4
 8001f30:	47a8      	blx	r5
      usbp->ep0state = USB_EP0_ERROR;
 8001f32:	2306      	movs	r3, #6
 8001f34:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
}
 8001f38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d063      	beq.n	8002006 <_usb_ep0setup+0x1c6>
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d153      	bne.n	8001fea <_usb_ep0setup+0x1aa>
    if ((usbp->setup[4] & 0x80U) != 0U) {
 8001f42:	f994 1084 	ldrsb.w	r1, [r4, #132]	; 0x84
 8001f46:	f894 2084 	ldrb.w	r2, [r4, #132]	; 0x84
 8001f4a:	2900      	cmp	r1, #0
  ctl = usbp->otg->ie[ep].DIEPCTL;
 8001f4c:	f002 010f 	and.w	r1, r2, #15
 8001f50:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001f54:	f2c0 80b1 	blt.w	80020ba <_usb_ep0setup+0x27a>
  ctl = usbp->otg->oe[ep].DOEPCTL;
 8001f58:	3158      	adds	r1, #88	; 0x58
 8001f5a:	0149      	lsls	r1, r1, #5
 8001f5c:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DOEPCTL_USBAEP))
 8001f5e:	040d      	lsls	r5, r1, #16
 8001f60:	d5d5      	bpl.n	8001f0e <_usb_ep0setup+0xce>
  if (ctl & DOEPCTL_STALL)
 8001f62:	0289      	lsls	r1, r1, #10
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0102 	mov.w	r1, #2
        usbSetupTransfer(usbp, (uint8_t *)halted_status, 2, NULL);
 8001f6c:	bf4c      	ite	mi
 8001f6e:	4dbd      	ldrmi	r5, [pc, #756]	; (8002264 <_usb_ep0setup+0x424>)
        usbSetupTransfer(usbp, (uint8_t *)active_status, 2, NULL);
 8001f70:	4dbd      	ldrpl	r5, [pc, #756]	; (8002268 <_usb_ep0setup+0x428>)
 8001f72:	67e2      	str	r2, [r4, #124]	; 0x7c
 8001f74:	e9c4 511d 	strd	r5, r1, [r4, #116]	; 0x74
        return true;
 8001f78:	e77d      	b.n	8001e76 <_usb_ep0setup+0x36>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001f7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f7e:	f000 8143 	beq.w	8002208 <_usb_ep0setup+0x3c8>
 8001f82:	d948      	bls.n	8002016 <_usb_ep0setup+0x1d6>
 8001f84:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
 8001f88:	d139      	bne.n	8001ffe <_usb_ep0setup+0x1be>
      if (usbp->state == USB_ACTIVE) {
 8001f8a:	7823      	ldrb	r3, [r4, #0]
 8001f8c:	2b04      	cmp	r3, #4
 8001f8e:	f000 80a5 	beq.w	80020dc <_usb_ep0setup+0x29c>
      if (usbp->setup[2] != 0U) {
 8001f92:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8001f96:	b14b      	cbz	r3, 8001fac <_usb_ep0setup+0x16c>
        usbp->state = USB_ACTIVE;
 8001f98:	2104      	movs	r1, #4
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001f9a:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = usbp->setup[2];
 8001f9c:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
        usbp->state = USB_ACTIVE;
 8001fa0:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_CONFIGURED);
 8001fa2:	6813      	ldr	r3, [r2, #0]
 8001fa4:	b113      	cbz	r3, 8001fac <_usb_ep0setup+0x16c>
 8001fa6:	2102      	movs	r1, #2
 8001fa8:	4620      	mov	r0, r4
 8001faa:	4798      	blx	r3
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8001fac:	2300      	movs	r3, #0
 8001fae:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8001fb2:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
 8001fb6:	67e3      	str	r3, [r4, #124]	; 0x7c
  if ((usbp->setup[0] & USB_RTYPE_DIR_MASK) == USB_RTYPE_DIR_DEV2HOST) {
 8001fb8:	0603      	lsls	r3, r0, #24
 8001fba:	d467      	bmi.n	800208c <_usb_ep0setup+0x24c>
      usbp->ep0state = USB_EP0_IN_SENDING_STS;
 8001fbc:	220b      	movs	r2, #11
 8001fbe:	2320      	movs	r3, #32
 8001fc0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8001fc4:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001fc8:	8922      	ldrh	r2, [r4, #8]
  isp->txbuf  = buf;
 8001fca:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 8001fcc:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
 8001fce:	4620      	mov	r0, r4
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001fd0:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_in(usbp, ep);
 8001fd4:	4629      	mov	r1, r5
  isp = usbp->epc[ep]->in_state;
 8001fd6:	695b      	ldr	r3, [r3, #20]
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8001fd8:	8122      	strh	r2, [r4, #8]
  isp->txbuf  = buf;
 8001fda:	609d      	str	r5, [r3, #8]
  isp->txcnt  = 0;
 8001fdc:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_in(usbp, ep);
 8001fe0:	f7fe fd1e 	bl	8000a20 <usb_lld_start_in>
 8001fe4:	f385 8811 	msr	BASEPRI, r5
}
 8001fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d18d      	bne.n	8001f0a <_usb_ep0setup+0xca>
    usbSetupTransfer(usbp, (uint8_t *)&usbp->status, 2, NULL);
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f104 0188 	add.w	r1, r4, #136	; 0x88
 8001ff4:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001ff6:	6761      	str	r1, [r4, #116]	; 0x74
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	67a2      	str	r2, [r4, #120]	; 0x78
    return true;
 8001ffc:	e73b      	b.n	8001e76 <_usb_ep0setup+0x36>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8001ffe:	f640 4202 	movw	r2, #3074	; 0xc02
 8002002:	4293      	cmp	r3, r2
 8002004:	d181      	bne.n	8001f0a <_usb_ep0setup+0xca>
    usbSetupTransfer(usbp, (uint8_t *)zero_status, 2, NULL);
 8002006:	4b99      	ldr	r3, [pc, #612]	; (800226c <_usb_ep0setup+0x42c>)
 8002008:	2202      	movs	r2, #2
 800200a:	2100      	movs	r1, #0
 800200c:	6763      	str	r3, [r4, #116]	; 0x74
 800200e:	4613      	mov	r3, r2
 8002010:	e9c4 211e 	strd	r2, r1, [r4, #120]	; 0x78
    return true;
 8002014:	e72f      	b.n	8001e76 <_usb_ep0setup+0x36>
  switch ((((uint32_t)usbp->setup[0] & (USB_RTYPE_RECIPIENT_MASK |
 8002016:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800201a:	f000 80d7 	beq.w	80021cc <_usb_ep0setup+0x38c>
 800201e:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
 8002022:	2b01      	cmp	r3, #1
 8002024:	f63f af71 	bhi.w	8001f0a <_usb_ep0setup+0xca>
  hw |= (uint16_t)*p << 8U;
 8002028:	f894 2085 	ldrb.w	r2, [r4, #133]	; 0x85
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 800202c:	4620      	mov	r0, r4
 800202e:	6861      	ldr	r1, [r4, #4]
  hw |= (uint16_t)*p << 8U;
 8002030:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
    dp = usbp->config->get_descriptor_cb(usbp, usbp->setup[3],
 8002034:	684d      	ldr	r5, [r1, #4]
 8002036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800203a:	f894 1083 	ldrb.w	r1, [r4, #131]	; 0x83
 800203e:	f894 2082 	ldrb.w	r2, [r4, #130]	; 0x82
 8002042:	47a8      	blx	r5
    if (dp == NULL) {
 8002044:	2800      	cmp	r0, #0
 8002046:	f43f af60 	beq.w	8001f0a <_usb_ep0setup+0xca>
    usbSetupTransfer(usbp, (uint8_t *)dp->ud_string, dp->ud_size, NULL);
 800204a:	e9d0 3200 	ldrd	r3, r2, [r0]
 800204e:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
 8002052:	67e6      	str	r6, [r4, #124]	; 0x7c
 8002054:	e9c4 231d 	strd	r2, r3, [r4, #116]	; 0x74
    return true;
 8002058:	e70d      	b.n	8001e76 <_usb_ep0setup+0x36>
    if (usbp->ep0n != 0U) {
 800205a:	b1bb      	cbz	r3, 800208c <_usb_ep0setup+0x24c>
      usbp->ep0state = USB_EP0_IN_TX;
 800205c:	2209      	movs	r2, #9
 800205e:	2320      	movs	r3, #32
 8002060:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8002064:	f383 8811 	msr	BASEPRI, r3
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002068:	8922      	ldrh	r2, [r4, #8]
  isp->txcnt  = 0;
 800206a:	2500      	movs	r5, #0
  isp = usbp->epc[ep]->in_state;
 800206c:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_in(usbp, ep);
 800206e:	4620      	mov	r0, r4
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002070:	f042 0201 	orr.w	r2, r2, #1
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 8002074:	6f66      	ldr	r6, [r4, #116]	; 0x74
  isp = usbp->epc[ep]->in_state;
 8002076:	695b      	ldr	r3, [r3, #20]
  usb_lld_start_in(usbp, ep);
 8002078:	4629      	mov	r1, r5
  usbp->transmitting |= (uint16_t)((unsigned)1U << (unsigned)ep);
 800207a:	8122      	strh	r2, [r4, #8]
      usbStartTransmitI(usbp, 0, usbp->ep0next, usbp->ep0n);
 800207c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
  isp->txcnt  = 0;
 800207e:	e883 0064 	stmia.w	r3, {r2, r5, r6}
  usb_lld_start_in(usbp, ep);
 8002082:	f7fe fccd 	bl	8000a20 <usb_lld_start_in>
 8002086:	f385 8811 	msr	BASEPRI, r5
}
 800208a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      usbp->ep0state = USB_EP0_OUT_WAITING_STS;
 800208c:	2214      	movs	r2, #20
 800208e:	2320      	movs	r3, #32
 8002090:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8002094:	f383 8811 	msr	BASEPRI, r3
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 8002098:	8962      	ldrh	r2, [r4, #10]
  osp->rxbuf  = buf;
 800209a:	2500      	movs	r5, #0
  osp = usbp->epc[ep]->out_state;
 800209c:	68e3      	ldr	r3, [r4, #12]
  usb_lld_start_out(usbp, ep);
 800209e:	4620      	mov	r0, r4
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80020a0:	f042 0201 	orr.w	r2, r2, #1
  usb_lld_start_out(usbp, ep);
 80020a4:	4629      	mov	r1, r5
  osp = usbp->epc[ep]->out_state;
 80020a6:	699b      	ldr	r3, [r3, #24]
  usbp->receiving |= (uint16_t)((unsigned)1U << (unsigned)ep);
 80020a8:	8162      	strh	r2, [r4, #10]
  osp->rxbuf  = buf;
 80020aa:	609d      	str	r5, [r3, #8]
  osp->rxcnt  = 0;
 80020ac:	e9c3 5500 	strd	r5, r5, [r3]
  usb_lld_start_out(usbp, ep);
 80020b0:	f7fe fd56 	bl	8000b60 <usb_lld_start_out>
 80020b4:	f385 8811 	msr	BASEPRI, r5
}
 80020b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  ctl = usbp->otg->ie[ep].DIEPCTL;
 80020ba:	3148      	adds	r1, #72	; 0x48
 80020bc:	0149      	lsls	r1, r1, #5
 80020be:	5851      	ldr	r1, [r2, r1]
  if (!(ctl & DIEPCTL_USBAEP))
 80020c0:	040e      	lsls	r6, r1, #16
 80020c2:	f57f af24 	bpl.w	8001f0e <_usb_ep0setup+0xce>
 80020c6:	e74c      	b.n	8001f62 <_usb_ep0setup+0x122>
      usbp->status |= 2U;
 80020c8:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80020cc:	6766      	str	r6, [r4, #116]	; 0x74
      usbp->status |= 2U;
 80020ce:	f043 0302 	orr.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 80020d2:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
      usbp->status |= 2U;
 80020d6:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
      return true;
 80020da:	e76d      	b.n	8001fb8 <_usb_ep0setup+0x178>
 80020dc:	2320      	movs	r3, #32
 80020de:	f383 8811 	msr	BASEPRI, r3
  otg_ram_reset(usbp);
 80020e2:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020e6:	4632      	mov	r2, r6
  usbp->transmitting &= 1U;
 80020e8:	68a3      	ldr	r3, [r4, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80020ea:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 80020ee:	6808      	ldr	r0, [r1, #0]
 80020f0:	f003 1301 	and.w	r3, r3, #65537	; 0x10001
    usbp->epc[i] = NULL;
 80020f4:	6126      	str	r6, [r4, #16]
 80020f6:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
  otg_disable_ep(usbp);
 80020fa:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80020fe:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002102:	62e6      	str	r6, [r4, #44]	; 0x2c
  usbp->transmitting &= 1U;
 8002104:	60a3      	str	r3, [r4, #8]
    usbp->epc[i] = NULL;
 8002106:	e9c4 6605 	strd	r6, r6, [r4, #20]
 800210a:	e9c4 6607 	strd	r6, r6, [r4, #28]
 800210e:	e9c4 6609 	strd	r6, r6, [r4, #36]	; 0x24
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8002112:	eb00 1142 	add.w	r1, r0, r2, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002116:	1c56      	adds	r6, r2, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8002118:	f8d1 7900 	ldr.w	r7, [r1, #2304]	; 0x900
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 800211c:	460b      	mov	r3, r1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 800211e:	2f00      	cmp	r7, #0
 8002120:	da05      	bge.n	800212e <_usb_ep0setup+0x2ee>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8002122:	f8d1 7900 	ldr.w	r7, [r1, #2304]	; 0x900
 8002126:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 800212a:	f8c1 7900 	str.w	r7, [r1, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 800212e:	f8d1 7b00 	ldr.w	r7, [r1, #2816]	; 0xb00
 8002132:	2f00      	cmp	r7, #0
 8002134:	da05      	bge.n	8002142 <_usb_ep0setup+0x302>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8002136:	f8d1 7b00 	ldr.w	r7, [r1, #2816]	; 0xb00
 800213a:	f047 4780 	orr.w	r7, r7, #1073741824	; 0x40000000
 800213e:	f8c1 7b00 	str.w	r7, [r1, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002142:	4594      	cmp	ip, r2
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8002144:	f8c3 5908 	str.w	r5, [r3, #2312]	; 0x908
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8002148:	4632      	mov	r2, r6
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800214a:	f8c3 5b08 	str.w	r5, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800214e:	d1e0      	bne.n	8002112 <_usb_ep0setup+0x2d2>
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8002150:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 8002154:	2300      	movs	r3, #0
 8002156:	f8c0 281c 	str.w	r2, [r0, #2076]	; 0x81c
 800215a:	f383 8811 	msr	BASEPRI, r3
        usbp->state = USB_SELECTED;
 800215e:	2103      	movs	r1, #3
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002160:	6862      	ldr	r2, [r4, #4]
        usbp->configuration = 0U;
 8002162:	f884 308b 	strb.w	r3, [r4, #139]	; 0x8b
        usbp->state = USB_SELECTED;
 8002166:	7021      	strb	r1, [r4, #0]
        _usb_isr_invoke_event_cb(usbp, USB_EVENT_UNCONFIGURED);
 8002168:	6813      	ldr	r3, [r2, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	f43f af11 	beq.w	8001f92 <_usb_ep0setup+0x152>
 8002170:	4620      	mov	r0, r4
 8002172:	4798      	blx	r3
 8002174:	e70d      	b.n	8001f92 <_usb_ep0setup+0x152>
    if (usbp->setup[2] == USB_FEATURE_DEVICE_REMOTE_WAKEUP) {
 8002176:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800217a:	2b01      	cmp	r3, #1
 800217c:	f47f aec5 	bne.w	8001f0a <_usb_ep0setup+0xca>
      usbp->status &= ~2U;
 8002180:	f8b4 3088 	ldrh.w	r3, [r4, #136]	; 0x88
      usbSetupTransfer(usbp, NULL, 0, NULL);
 8002184:	6766      	str	r6, [r4, #116]	; 0x74
      usbp->status &= ~2U;
 8002186:	f023 0302 	bic.w	r3, r3, #2
      usbSetupTransfer(usbp, NULL, 0, NULL);
 800218a:	e9c4 661e 	strd	r6, r6, [r4, #120]	; 0x78
      usbp->status &= ~2U;
 800218e:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
      return true;
 8002192:	e711      	b.n	8001fb8 <_usb_ep0setup+0x178>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002194:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 8002198:	2b00      	cmp	r3, #0
 800219a:	f47f aeb6 	bne.w	8001f0a <_usb_ep0setup+0xca>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 800219e:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 80021a2:	f013 020f 	ands.w	r2, r3, #15
 80021a6:	d00c      	beq.n	80021c2 <_usb_ep0setup+0x382>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 80021a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80021ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80021b0:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 80021b4:	d148      	bne.n	8002248 <_usb_ep0setup+0x408>
 *
 * @notapi
 */
void usb_lld_clear_out(USBDriver *usbp, usbep_t ep) {

  usbp->otg->oe[ep].DOEPCTL &= ~DOEPCTL_STALL;
 80021b6:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 80021ba:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80021be:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
    usbSetupTransfer(usbp, NULL, 0, NULL);
 80021c2:	2300      	movs	r3, #0
 80021c4:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
 80021c8:	67e3      	str	r3, [r4, #124]	; 0x7c
    return true;
 80021ca:	e6f5      	b.n	8001fb8 <_usb_ep0setup+0x178>
    if ((usbp->setup[0] == USB_RTYPE_RECIPIENT_DEVICE) &&
 80021cc:	f8b4 3080 	ldrh.w	r3, [r4, #128]	; 0x80
 80021d0:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80021d4:	d1f5      	bne.n	80021c2 <_usb_ep0setup+0x382>
  usbp->address = usbp->setup[2];
 80021d6:	f894 1082 	ldrb.w	r1, [r4, #130]	; 0x82
  stm32_otg_t *otgp = usbp->otg;
 80021da:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80021de:	f884 108a 	strb.w	r1, [r4, #138]	; 0x8a
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(usbp->address);
 80021e2:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_ADDRESS);
 80021e6:	6865      	ldr	r5, [r4, #4]
 80021e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021ec:	682d      	ldr	r5, [r5, #0]
 80021ee:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80021f2:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
 80021f6:	b125      	cbz	r5, 8002202 <_usb_ep0setup+0x3c2>
 80021f8:	4620      	mov	r0, r4
 80021fa:	2101      	movs	r1, #1
 80021fc:	47a8      	blx	r5
 80021fe:	f894 0080 	ldrb.w	r0, [r4, #128]	; 0x80
  usbp->state = USB_SELECTED;
 8002202:	2303      	movs	r3, #3
 8002204:	7023      	strb	r3, [r4, #0]
    usbSetupTransfer(usbp, NULL, 0, NULL);
 8002206:	e7dc      	b.n	80021c2 <_usb_ep0setup+0x382>
    usbSetupTransfer(usbp, &usbp->configuration, 1, NULL);
 8002208:	f104 038b 	add.w	r3, r4, #139	; 0x8b
 800220c:	2201      	movs	r2, #1
 800220e:	67e6      	str	r6, [r4, #124]	; 0x7c
 8002210:	6763      	str	r3, [r4, #116]	; 0x74
 8002212:	4613      	mov	r3, r2
 8002214:	67a2      	str	r2, [r4, #120]	; 0x78
    return true;
 8002216:	e62e      	b.n	8001e76 <_usb_ep0setup+0x36>
    if (usbp->setup[2] != USB_FEATURE_ENDPOINT_HALT) {
 8002218:	f894 3082 	ldrb.w	r3, [r4, #130]	; 0x82
 800221c:	2b00      	cmp	r3, #0
 800221e:	f47f ae74 	bne.w	8001f0a <_usb_ep0setup+0xca>
    if ((usbp->setup[4] & 0x0FU) != 0U) {
 8002222:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
 8002226:	f013 020f 	ands.w	r2, r3, #15
 800222a:	d0ca      	beq.n	80021c2 <_usb_ep0setup+0x382>
      if ((usbp->setup[4] & 0x80U) != 0U) {
 800222c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002230:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002234:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8002238:	d10d      	bne.n	8002256 <_usb_ep0setup+0x416>
  usbp->otg->oe[ep].DOEPCTL |= DOEPCTL_STALL;
 800223a:	f8d3 2b00 	ldr.w	r2, [r3, #2816]	; 0xb00
 800223e:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002242:	f8c3 2b00 	str.w	r2, [r3, #2816]	; 0xb00
 8002246:	e7bc      	b.n	80021c2 <_usb_ep0setup+0x382>
 *
 * @notapi
 */
void usb_lld_clear_in(USBDriver *usbp, usbep_t ep) {

  usbp->otg->ie[ep].DIEPCTL &= ~DIEPCTL_STALL;
 8002248:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800224c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8002250:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002254:	e7b5      	b.n	80021c2 <_usb_ep0setup+0x382>
  usbp->otg->ie[ep].DIEPCTL |= DIEPCTL_STALL;
 8002256:	f8d3 2900 	ldr.w	r2, [r3, #2304]	; 0x900
 800225a:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800225e:	f8c3 2900 	str.w	r2, [r3, #2304]	; 0x900
 8002262:	e7ae      	b.n	80021c2 <_usb_ep0setup+0x382>
 8002264:	08004f20 	.word	0x08004f20
 8002268:	08004e8c 	.word	0x08004e8c
 800226c:	08005124 	.word	0x08005124

08002270 <sdcWrite>:
              const uint8_t *buf, uint32_t n) {
 8002270:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002274:	461f      	mov	r7, r3
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002276:	3b01      	subs	r3, #1
              const uint8_t *buf, uint32_t n) {
 8002278:	4616      	mov	r6, r2
  if ((startblk + n - 1U) > sdcp->capacity) {
 800227a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800227c:	440b      	add	r3, r1
              const uint8_t *buf, uint32_t n) {
 800227e:	4604      	mov	r4, r0
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002280:	4293      	cmp	r3, r2
 8002282:	d906      	bls.n	8002292 <sdcWrite+0x22>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002284:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 8002286:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002288:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800228c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800228e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  sdcp->state = BLK_WRITING;
 8002292:	2307      	movs	r3, #7
 8002294:	460d      	mov	r5, r1
 8002296:	7103      	strb	r3, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 8002298:	07b3      	lsls	r3, r6, #30
 800229a:	d028      	beq.n	80022ee <sdcWrite+0x7e>
    for (i = 0; i < blocks; i++) {
 800229c:	b32f      	cbz	r7, 80022ea <sdcWrite+0x7a>
 800229e:	440f      	add	r7, r1
 80022a0:	f100 0848 	add.w	r8, r0, #72	; 0x48
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_WRITE_TIMEOUT;
 80022a4:	f8df 9064 	ldr.w	r9, [pc, #100]	; 800230c <sdcWrite+0x9c>
 80022a8:	e004      	b.n	80022b4 <sdcWrite+0x44>
 80022aa:	f7ff fcf9 	bl	8001ca0 <sdc_lld_write_aligned.part.0>
      if (sdc_lld_write_aligned(sdcp, startblk, sdcp->buf, 1))
 80022ae:	b9b8      	cbnz	r0, 80022e0 <sdcWrite+0x70>
    for (i = 0; i < blocks; i++) {
 80022b0:	42bd      	cmp	r5, r7
 80022b2:	d01a      	beq.n	80022ea <sdcWrite+0x7a>
      memcpy(sdcp->buf, buf, MMCSD_BLOCK_SIZE);
 80022b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022b8:	4631      	mov	r1, r6
 80022ba:	4640      	mov	r0, r8
      buf += MMCSD_BLOCK_SIZE;
 80022bc:	4416      	add	r6, r2
      memcpy(sdcp->buf, buf, MMCSD_BLOCK_SIZE);
 80022be:	f7fe f875 	bl	80003ac <memcpy>
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_WRITE_TIMEOUT;
 80022c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (_sdc_wait_for_transfer_state(sdcp))
 80022c4:	4620      	mov	r0, r4
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_WRITE_TIMEOUT;
 80022c6:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 80022ca:	f7ff fa01 	bl	80016d0 <_sdc_wait_for_transfer_state>
 80022ce:	4684      	mov	ip, r0
 80022d0:	4629      	mov	r1, r5
 80022d2:	2301      	movs	r3, #1
      startblk++;
 80022d4:	3501      	adds	r5, #1
 80022d6:	4642      	mov	r2, r8
 80022d8:	4620      	mov	r0, r4
  if (_sdc_wait_for_transfer_state(sdcp))
 80022da:	f1bc 0f00 	cmp.w	ip, #0
 80022de:	d0e4      	beq.n	80022aa <sdcWrite+0x3a>
        return HAL_FAILED;
 80022e0:	2001      	movs	r0, #1
  sdcp->state = BLK_READY;
 80022e2:	2305      	movs	r3, #5
 80022e4:	7123      	strb	r3, [r4, #4]
}
 80022e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_SUCCESS;
 80022ea:	2000      	movs	r0, #0
 80022ec:	e7f9      	b.n	80022e2 <sdcWrite+0x72>
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_WRITE_TIMEOUT;
 80022ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80022f0:	4a06      	ldr	r2, [pc, #24]	; (800230c <sdcWrite+0x9c>)
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 80022f4:	f7ff f9ec 	bl	80016d0 <_sdc_wait_for_transfer_state>
 80022f8:	2800      	cmp	r0, #0
 80022fa:	d1f1      	bne.n	80022e0 <sdcWrite+0x70>
 80022fc:	463b      	mov	r3, r7
 80022fe:	4632      	mov	r2, r6
 8002300:	4629      	mov	r1, r5
 8002302:	4620      	mov	r0, r4
 8002304:	f7ff fccc 	bl	8001ca0 <sdc_lld_write_aligned.part.0>
 8002308:	e7eb      	b.n	80022e2 <sdcWrite+0x72>
 800230a:	bf00      	nop
 800230c:	000f4240 	.word	0x000f4240

08002310 <sdcRead>:
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8002310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002314:	461f      	mov	r7, r3
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002316:	3b01      	subs	r3, #1
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 8002318:	4616      	mov	r6, r2
  if ((startblk + n - 1U) > sdcp->capacity) {
 800231a:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800231c:	440b      	add	r3, r1
bool sdcRead(SDCDriver *sdcp, uint32_t startblk, uint8_t *buf, uint32_t n) {
 800231e:	4604      	mov	r4, r0
  if ((startblk + n - 1U) > sdcp->capacity) {
 8002320:	4293      	cmp	r3, r2
 8002322:	d906      	bls.n	8002332 <sdcRead+0x22>
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002324:	6b43      	ldr	r3, [r0, #52]	; 0x34
    return HAL_FAILED;
 8002326:	2001      	movs	r0, #1
    sdcp->errors |= SDC_OVERFLOW_ERROR;
 8002328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800232c:	6363      	str	r3, [r4, #52]	; 0x34
}
 800232e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  sdcp->state = BLK_READING;
 8002332:	2306      	movs	r3, #6
 8002334:	460d      	mov	r5, r1
 8002336:	7103      	strb	r3, [r0, #4]
  if (((unsigned)buf & 3) != 0) {
 8002338:	07b3      	lsls	r3, r6, #30
 800233a:	d029      	beq.n	8002390 <sdcRead+0x80>
    for (i = 0; i < blocks; i++) {
 800233c:	b337      	cbz	r7, 800238c <sdcRead+0x7c>
 800233e:	440f      	add	r7, r1
 8002340:	f100 0848 	add.w	r8, r0, #72	; 0x48
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8002344:	f8df 9064 	ldr.w	r9, [pc, #100]	; 80023ac <sdcRead+0x9c>
 8002348:	e00c      	b.n	8002364 <sdcRead+0x54>
 800234a:	f7ff fcf1 	bl	8001d30 <sdc_lld_read_aligned.part.0>
      memcpy(buf, sdcp->buf, MMCSD_BLOCK_SIZE);
 800234e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002352:	4603      	mov	r3, r0
 8002354:	4641      	mov	r1, r8
 8002356:	4630      	mov	r0, r6
      buf += MMCSD_BLOCK_SIZE;
 8002358:	4416      	add	r6, r2
      if (sdc_lld_read_aligned(sdcp, startblk, sdcp->buf, 1))
 800235a:	b993      	cbnz	r3, 8002382 <sdcRead+0x72>
      memcpy(buf, sdcp->buf, MMCSD_BLOCK_SIZE);
 800235c:	f7fe f826 	bl	80003ac <memcpy>
    for (i = 0; i < blocks; i++) {
 8002360:	42bd      	cmp	r5, r7
 8002362:	d013      	beq.n	800238c <sdcRead+0x7c>
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8002364:	6c23      	ldr	r3, [r4, #64]	; 0x40
  if (_sdc_wait_for_transfer_state(sdcp))
 8002366:	4620      	mov	r0, r4
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8002368:	f8c3 9024 	str.w	r9, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 800236c:	f7ff f9b0 	bl	80016d0 <_sdc_wait_for_transfer_state>
 8002370:	4684      	mov	ip, r0
 8002372:	4629      	mov	r1, r5
 8002374:	2301      	movs	r3, #1
      startblk++;
 8002376:	3501      	adds	r5, #1
 8002378:	4642      	mov	r2, r8
 800237a:	4620      	mov	r0, r4
  if (_sdc_wait_for_transfer_state(sdcp))
 800237c:	f1bc 0f00 	cmp.w	ip, #0
 8002380:	d0e3      	beq.n	800234a <sdcRead+0x3a>
        return HAL_FAILED;
 8002382:	2001      	movs	r0, #1
  sdcp->state = BLK_READY;
 8002384:	2305      	movs	r3, #5
 8002386:	7123      	strb	r3, [r4, #4]
}
 8002388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return HAL_SUCCESS;
 800238c:	2000      	movs	r0, #0
 800238e:	e7f9      	b.n	8002384 <sdcRead+0x74>
  sdcp->sdmmc->DTIMER = STM32_SDC_SDMMC_READ_TIMEOUT;
 8002390:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002392:	4a06      	ldr	r2, [pc, #24]	; (80023ac <sdcRead+0x9c>)
 8002394:	625a      	str	r2, [r3, #36]	; 0x24
  if (_sdc_wait_for_transfer_state(sdcp))
 8002396:	f7ff f99b 	bl	80016d0 <_sdc_wait_for_transfer_state>
 800239a:	2800      	cmp	r0, #0
 800239c:	d1f1      	bne.n	8002382 <sdcRead+0x72>
 800239e:	463b      	mov	r3, r7
 80023a0:	4632      	mov	r2, r6
 80023a2:	4629      	mov	r1, r5
 80023a4:	4620      	mov	r0, r4
 80023a6:	f7ff fcc3 	bl	8001d30 <sdc_lld_read_aligned.part.0>
 80023aa:	e7eb      	b.n	8002384 <sdcRead+0x74>
 80023ac:	000f4240 	.word	0x000f4240

080023b0 <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
 80023b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80023b4:	b085      	sub	sp, #20
  qnotify_t nfy = oqp->q_notify;
 80023b6:	69c7      	ldr	r7, [r0, #28]
 80023b8:	f04f 0920 	mov.w	r9, #32
                      size_t n, sysinterval_t timeout) {
 80023bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80023c0:	f389 8811 	msr	BASEPRI, r9

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
 80023c4:	b39a      	cbz	r2, 800242e <oqWriteTimeout+0x7e>
 80023c6:	4604      	mov	r4, r0
 80023c8:	460e      	mov	r6, r1
 80023ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80023ce:	f04f 0a00 	mov.w	sl, #0
  if (n > oqGetEmptyI(oqp)) {
 80023d2:	68a2      	ldr	r2, [r4, #8]
 80023d4:	4593      	cmp	fp, r2
 80023d6:	d931      	bls.n	800243c <oqWriteTimeout+0x8c>
    n = oqGetEmptyI(oqp);
 80023d8:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 80023da:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
 80023de:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 80023e2:	45a8      	cmp	r8, r5
 80023e4:	d831      	bhi.n	800244a <oqWriteTimeout+0x9a>
  else if (n > s1) {
 80023e6:	d238      	bcs.n	800245a <oqWriteTimeout+0xaa>
    s2 = n - s1;
 80023e8:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80023ec:	4642      	mov	r2, r8
 80023ee:	4631      	mov	r1, r6
    s2 = n - s1;
 80023f0:	9301      	str	r3, [sp, #4]
    memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 80023f2:	f7fd ffdb 	bl	80003ac <memcpy>
    memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 80023f6:	eb06 0108 	add.w	r1, r6, r8
 80023fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80023fe:	68e0      	ldr	r0, [r4, #12]
 8002400:	4642      	mov	r2, r8
 8002402:	f7fd ffd3 	bl	80003ac <memcpy>
  oqp->q_counter -= n;
 8002406:	68a2      	ldr	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002408:	68e1      	ldr	r1, [r4, #12]
 800240a:	4643      	mov	r3, r8
  oqp->q_counter -= n;
 800240c:	1b52      	subs	r2, r2, r5
    oqp->q_wrptr = oqp->q_buffer + s2;
 800240e:	18cb      	adds	r3, r1, r3
  oqp->q_counter -= n;
 8002410:	60a2      	str	r2, [r4, #8]
    oqp->q_wrptr = oqp->q_buffer + s2;
 8002412:	6163      	str	r3, [r4, #20]
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
 8002414:	b10f      	cbz	r7, 800241a <oqWriteTimeout+0x6a>
        nfy(oqp);
 8002416:	4620      	mov	r0, r4
 8002418:	47b8      	blx	r7
 800241a:	f38a 8811 	msr	BASEPRI, sl
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
 800241e:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002422:	442e      	add	r6, r5
 8002424:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002428:	f1bb 0f00 	cmp.w	fp, #0
 800242c:	d1d1      	bne.n	80023d2 <oqWriteTimeout+0x22>
  if (n > oqGetEmptyI(oqp)) {
 800242e:	9803      	ldr	r0, [sp, #12]
 8002430:	2300      	movs	r3, #0
 8002432:	f383 8811 	msr	BASEPRI, r3
    }
  }

  osalSysUnlock();
  return max - n;
}
 8002436:	b005      	add	sp, #20
 8002438:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 800243c:	e9d4 2004 	ldrd	r2, r0, [r4, #16]
  if (n > oqGetEmptyI(oqp)) {
 8002440:	465d      	mov	r5, fp
  s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 8002442:	eba2 0800 	sub.w	r8, r2, r0
  if (n < s1) {
 8002446:	45a8      	cmp	r8, r5
 8002448:	d9cd      	bls.n	80023e6 <oqWriteTimeout+0x36>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800244a:	462a      	mov	r2, r5
 800244c:	4631      	mov	r1, r6
 800244e:	f7fd ffad 	bl	80003ac <memcpy>
    oqp->q_wrptr += n;
 8002452:	6962      	ldr	r2, [r4, #20]
 8002454:	442a      	add	r2, r5
 8002456:	6162      	str	r2, [r4, #20]
 8002458:	e005      	b.n	8002466 <oqWriteTimeout+0xb6>
    memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 800245a:	462a      	mov	r2, r5
 800245c:	4631      	mov	r1, r6
 800245e:	f7fd ffa5 	bl	80003ac <memcpy>
    oqp->q_wrptr = oqp->q_buffer;
 8002462:	68e2      	ldr	r2, [r4, #12]
 8002464:	6162      	str	r2, [r4, #20]
  oqp->q_counter -= n;
 8002466:	68a2      	ldr	r2, [r4, #8]
 8002468:	1b52      	subs	r2, r2, r5
 800246a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800246c:	2d00      	cmp	r5, #0
 800246e:	d1d1      	bne.n	8002414 <oqWriteTimeout+0x64>
  return chThdEnqueueTimeoutS(tqp, timeout);
 8002470:	9902      	ldr	r1, [sp, #8]
 8002472:	4620      	mov	r0, r4
 8002474:	f7fe ff8c 	bl	8001390 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002478:	2800      	cmp	r0, #0
 800247a:	d0aa      	beq.n	80023d2 <oqWriteTimeout+0x22>
 800247c:	9b03      	ldr	r3, [sp, #12]
 800247e:	eba3 000b 	sub.w	r0, r3, fp
 8002482:	2300      	movs	r3, #0
 8002484:	f383 8811 	msr	BASEPRI, r3
}
 8002488:	b005      	add	sp, #20
 800248a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800248e:	bf00      	nop

08002490 <_writet.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp, n, timeout);
 8002490:	3030      	adds	r0, #48	; 0x30
 8002492:	f7ff bf8d 	b.w	80023b0 <oqWriteTimeout>
 8002496:	bf00      	nop
	...

080024a0 <_write.lto_priv.0>:
  return oqWriteTimeout(&((SerialDriver *)ip)->oqueue, bp,
 80024a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024a4:	3030      	adds	r0, #48	; 0x30
 80024a6:	f7ff bf83 	b.w	80023b0 <oqWriteTimeout>
 80024aa:	bf00      	nop
 80024ac:	0000      	movs	r0, r0
	...

080024b0 <iqReadTimeout>:
                     size_t n, sysinterval_t timeout) {
 80024b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024b4:	b085      	sub	sp, #20
  qnotify_t nfy = iqp->q_notify;
 80024b6:	69c7      	ldr	r7, [r0, #28]
 80024b8:	f04f 0920 	mov.w	r9, #32
                     size_t n, sysinterval_t timeout) {
 80024bc:	e9cd 3202 	strd	r3, r2, [sp, #8]
 80024c0:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 80024c4:	b39a      	cbz	r2, 800252e <iqReadTimeout+0x7e>
 80024c6:	4604      	mov	r4, r0
 80024c8:	460e      	mov	r6, r1
 80024ca:	f8dd b00c 	ldr.w	fp, [sp, #12]
 80024ce:	f04f 0a00 	mov.w	sl, #0
  if (n > iqGetFullI(iqp)) {
 80024d2:	68a2      	ldr	r2, [r4, #8]
 80024d4:	4593      	cmp	fp, r2
 80024d6:	d931      	bls.n	800253c <iqReadTimeout+0x8c>
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80024d8:	69a1      	ldr	r1, [r4, #24]
 80024da:	6922      	ldr	r2, [r4, #16]
    n = iqGetFullI(iqp);
 80024dc:	68a5      	ldr	r5, [r4, #8]
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 80024de:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 80024e2:	45a8      	cmp	r8, r5
 80024e4:	d831      	bhi.n	800254a <iqReadTimeout+0x9a>
  else if (n > s1) {
 80024e6:	d238      	bcs.n	800255a <iqReadTimeout+0xaa>
    s2 = n - s1;
 80024e8:	eba5 0308 	sub.w	r3, r5, r8
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80024ec:	4642      	mov	r2, r8
 80024ee:	4630      	mov	r0, r6
    s2 = n - s1;
 80024f0:	9301      	str	r3, [sp, #4]
    memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
 80024f2:	f7fd ff5b 	bl	80003ac <memcpy>
    memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 80024f6:	eb06 0008 	add.w	r0, r6, r8
 80024fa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80024fe:	68e1      	ldr	r1, [r4, #12]
 8002500:	4642      	mov	r2, r8
 8002502:	f7fd ff53 	bl	80003ac <memcpy>
  iqp->q_counter -= n;
 8002506:	68a2      	ldr	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002508:	68e1      	ldr	r1, [r4, #12]
 800250a:	4643      	mov	r3, r8
  iqp->q_counter -= n;
 800250c:	1b52      	subs	r2, r2, r5
    iqp->q_rdptr = iqp->q_buffer + s2;
 800250e:	18cb      	adds	r3, r1, r3
  iqp->q_counter -= n;
 8002510:	60a2      	str	r2, [r4, #8]
    iqp->q_rdptr = iqp->q_buffer + s2;
 8002512:	61a3      	str	r3, [r4, #24]
      if (nfy != NULL) {
 8002514:	b10f      	cbz	r7, 800251a <iqReadTimeout+0x6a>
        nfy(iqp);
 8002516:	4620      	mov	r0, r4
 8002518:	47b8      	blx	r7
 800251a:	f38a 8811 	msr	BASEPRI, sl
      n  -= done;
 800251e:	ebab 0b05 	sub.w	fp, fp, r5
      bp += done;
 8002522:	442e      	add	r6, r5
 8002524:	f389 8811 	msr	BASEPRI, r9
  while (n > 0U) {
 8002528:	f1bb 0f00 	cmp.w	fp, #0
 800252c:	d1d1      	bne.n	80024d2 <iqReadTimeout+0x22>
  if (n > iqGetFullI(iqp)) {
 800252e:	9803      	ldr	r0, [sp, #12]
 8002530:	2300      	movs	r3, #0
 8002532:	f383 8811 	msr	BASEPRI, r3
}
 8002536:	b005      	add	sp, #20
 8002538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 800253c:	69a1      	ldr	r1, [r4, #24]
  if (n > iqGetFullI(iqp)) {
 800253e:	465d      	mov	r5, fp
  s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
 8002540:	6922      	ldr	r2, [r4, #16]
 8002542:	eba2 0801 	sub.w	r8, r2, r1
  if (n < s1) {
 8002546:	45a8      	cmp	r8, r5
 8002548:	d9cd      	bls.n	80024e6 <iqReadTimeout+0x36>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800254a:	462a      	mov	r2, r5
 800254c:	4630      	mov	r0, r6
 800254e:	f7fd ff2d 	bl	80003ac <memcpy>
    iqp->q_rdptr += n;
 8002552:	69a2      	ldr	r2, [r4, #24]
 8002554:	442a      	add	r2, r5
 8002556:	61a2      	str	r2, [r4, #24]
 8002558:	e005      	b.n	8002566 <iqReadTimeout+0xb6>
    memcpy((void *)bp, (void *)iqp->q_rdptr, n);
 800255a:	462a      	mov	r2, r5
 800255c:	4630      	mov	r0, r6
 800255e:	f7fd ff25 	bl	80003ac <memcpy>
    iqp->q_rdptr = iqp->q_buffer;
 8002562:	68e2      	ldr	r2, [r4, #12]
 8002564:	61a2      	str	r2, [r4, #24]
  iqp->q_counter -= n;
 8002566:	68a2      	ldr	r2, [r4, #8]
 8002568:	1b52      	subs	r2, r2, r5
 800256a:	60a2      	str	r2, [r4, #8]
    if (done == (size_t)0) {
 800256c:	2d00      	cmp	r5, #0
 800256e:	d1d1      	bne.n	8002514 <iqReadTimeout+0x64>
 8002570:	9902      	ldr	r1, [sp, #8]
 8002572:	4620      	mov	r0, r4
 8002574:	f7fe ff0c 	bl	8001390 <chThdEnqueueTimeoutS>
      if (msg != MSG_OK) {
 8002578:	2800      	cmp	r0, #0
 800257a:	d0aa      	beq.n	80024d2 <iqReadTimeout+0x22>
 800257c:	9b03      	ldr	r3, [sp, #12]
 800257e:	eba3 000b 	sub.w	r0, r3, fp
 8002582:	2300      	movs	r3, #0
 8002584:	f383 8811 	msr	BASEPRI, r3
}
 8002588:	b005      	add	sp, #20
 800258a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800258e:	bf00      	nop

08002590 <_readt.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp, n, timeout);
 8002590:	300c      	adds	r0, #12
 8002592:	f7ff bf8d 	b.w	80024b0 <iqReadTimeout>
 8002596:	bf00      	nop
	...

080025a0 <_read.lto_priv.0>:
  return iqReadTimeout(&((SerialDriver *)ip)->iqueue, bp,
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80025a4:	300c      	adds	r0, #12
 80025a6:	f7ff bf83 	b.w	80024b0 <iqReadTimeout>
 80025aa:	bf00      	nop
 80025ac:	0000      	movs	r0, r0
	...

080025b0 <obqWriteTimeout>:
                       size_t n, sysinterval_t timeout) {
 80025b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b4:	b083      	sub	sp, #12
 80025b6:	4606      	mov	r6, r0
 80025b8:	460d      	mov	r5, r1
 80025ba:	4693      	mov	fp, r2
 80025bc:	f04f 0920 	mov.w	r9, #32
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	f389 8811 	msr	BASEPRI, r9
  size_t w = 0;
 80025c6:	2700      	movs	r7, #0
    if (obqp->ptr == NULL) {
 80025c8:	6ab4      	ldr	r4, [r6, #40]	; 0x28
  obqp->ptr = NULL;
 80025ca:	46b8      	mov	r8, r7
    if (obqp->ptr == NULL) {
 80025cc:	2c00      	cmp	r4, #0
 80025ce:	d045      	beq.n	800265c <obqWriteTimeout+0xac>
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80025d0:	6af3      	ldr	r3, [r6, #44]	; 0x2c
    if (size > (n - w)) {
 80025d2:	ebab 0207 	sub.w	r2, fp, r7
    size = (size_t)obqp->top - (size_t)obqp->ptr;
 80025d6:	1b1b      	subs	r3, r3, r4
    if (size > (n - w)) {
 80025d8:	429a      	cmp	r2, r3
 80025da:	bf28      	it	cs
 80025dc:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80025de:	2a40      	cmp	r2, #64	; 0x40
 80025e0:	4692      	mov	sl, r2
 80025e2:	d942      	bls.n	800266a <obqWriteTimeout+0xba>
      memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 80025e4:	4629      	mov	r1, r5
 80025e6:	f105 0c40 	add.w	ip, r5, #64	; 0x40
 80025ea:	680d      	ldr	r5, [r1, #0]
 80025ec:	3110      	adds	r1, #16
 80025ee:	f851 0c0c 	ldr.w	r0, [r1, #-12]
 80025f2:	3410      	adds	r4, #16
 80025f4:	f851 2c08 	ldr.w	r2, [r1, #-8]
 80025f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025fc:	4561      	cmp	r1, ip
 80025fe:	f844 5c10 	str.w	r5, [r4, #-16]
 8002602:	f844 0c0c 	str.w	r0, [r4, #-12]
 8002606:	f844 2c08 	str.w	r2, [r4, #-8]
 800260a:	f844 3c04 	str.w	r3, [r4, #-4]
 800260e:	d1ec      	bne.n	80025ea <obqWriteTimeout+0x3a>
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002610:	6ab2      	ldr	r2, [r6, #40]	; 0x28
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002612:	460d      	mov	r5, r1
      w         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002614:	3740      	adds	r7, #64	; 0x40
      obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002616:	3240      	adds	r2, #64	; 0x40
 8002618:	62b2      	str	r2, [r6, #40]	; 0x28
    if (obqp->ptr >= obqp->top) {
 800261a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800261c:	4293      	cmp	r3, r2
 800261e:	d814      	bhi.n	800264a <obqWriteTimeout+0x9a>
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002620:	69f2      	ldr	r2, [r6, #28]
  *((size_t *)obqp->bwrptr) = size;
 8002622:	6933      	ldr	r3, [r6, #16]
      obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 8002624:	3a04      	subs	r2, #4
  if (obqp->bwrptr >= obqp->btop) {
 8002626:	69b0      	ldr	r0, [r6, #24]
  *((size_t *)obqp->bwrptr) = size;
 8002628:	601a      	str	r2, [r3, #0]
  obqp->bwrptr += obqp->bsize;
 800262a:	69f1      	ldr	r1, [r6, #28]
  obqp->bcounter--;
 800262c:	68f2      	ldr	r2, [r6, #12]
  obqp->bwrptr += obqp->bsize;
 800262e:	440b      	add	r3, r1
  obqp->bcounter--;
 8002630:	3a01      	subs	r2, #1
  if (obqp->bwrptr >= obqp->btop) {
 8002632:	4283      	cmp	r3, r0
  obqp->bwrptr += obqp->bsize;
 8002634:	6133      	str	r3, [r6, #16]
  obqp->bcounter--;
 8002636:	60f2      	str	r2, [r6, #12]
  if (obqp->bwrptr >= obqp->btop) {
 8002638:	d301      	bcc.n	800263e <obqWriteTimeout+0x8e>
    obqp->bwrptr = obqp->buffers;
 800263a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800263c:	6133      	str	r3, [r6, #16]
  if (obqp->notify != NULL) {
 800263e:	6b33      	ldr	r3, [r6, #48]	; 0x30
  obqp->ptr = NULL;
 8002640:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28
  if (obqp->notify != NULL) {
 8002644:	b10b      	cbz	r3, 800264a <obqWriteTimeout+0x9a>
    obqp->notify(obqp);
 8002646:	4630      	mov	r0, r6
 8002648:	4798      	blx	r3
 800264a:	f388 8811 	msr	BASEPRI, r8
    if (w >= n) {
 800264e:	455f      	cmp	r7, fp
 8002650:	d218      	bcs.n	8002684 <obqWriteTimeout+0xd4>
 8002652:	f389 8811 	msr	BASEPRI, r9
    if (obqp->ptr == NULL) {
 8002656:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8002658:	2c00      	cmp	r4, #0
 800265a:	d1b9      	bne.n	80025d0 <obqWriteTimeout+0x20>
      msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 800265c:	9901      	ldr	r1, [sp, #4]
 800265e:	4630      	mov	r0, r6
 8002660:	f7fe ff26 	bl	80014b0 <obqGetEmptyBufferTimeoutS>
      if (msg != MSG_OK) {
 8002664:	b960      	cbnz	r0, 8002680 <obqWriteTimeout+0xd0>
 8002666:	6ab4      	ldr	r4, [r6, #40]	; 0x28
 8002668:	e7b2      	b.n	80025d0 <obqWriteTimeout+0x20>
      memcpy(obqp->ptr, bp, size);
 800266a:	4629      	mov	r1, r5
 800266c:	4620      	mov	r0, r4
      w         += size;
 800266e:	4417      	add	r7, r2
      memcpy(obqp->ptr, bp, size);
 8002670:	f7fd fe9c 	bl	80003ac <memcpy>
      obqp->ptr += size;
 8002674:	6ab3      	ldr	r3, [r6, #40]	; 0x28
      bp        += size;
 8002676:	4455      	add	r5, sl
      obqp->ptr += size;
 8002678:	eb03 020a 	add.w	r2, r3, sl
 800267c:	62b2      	str	r2, [r6, #40]	; 0x28
      w         += size;
 800267e:	e7cc      	b.n	800261a <obqWriteTimeout+0x6a>
 8002680:	f384 8811 	msr	BASEPRI, r4
}
 8002684:	4638      	mov	r0, r7
 8002686:	b003      	add	sp, #12
 8002688:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800268c:	0000      	movs	r0, r0
	...

08002690 <_writet.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp, n, timeout);
 8002690:	3044      	adds	r0, #68	; 0x44
 8002692:	f7ff bf8d 	b.w	80025b0 <obqWriteTimeout>
 8002696:	bf00      	nop
	...

080026a0 <_write.lto_priv.1>:
  return obqWriteTimeout(&((SerialUSBDriver *)ip)->obqueue, bp,
 80026a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80026a4:	3044      	adds	r0, #68	; 0x44
 80026a6:	f7ff bf83 	b.w	80025b0 <obqWriteTimeout>
 80026aa:	bf00      	nop
 80026ac:	0000      	movs	r0, r0
	...

080026b0 <ibqReadTimeout>:
                      size_t n, sysinterval_t timeout) {
 80026b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026b4:	b083      	sub	sp, #12
 80026b6:	4605      	mov	r5, r0
 80026b8:	460f      	mov	r7, r1
 80026ba:	4693      	mov	fp, r2
 80026bc:	f04f 0920 	mov.w	r9, #32
 80026c0:	9301      	str	r3, [sp, #4]
 80026c2:	f389 8811 	msr	BASEPRI, r9
  size_t r = 0;
 80026c6:	2600      	movs	r6, #0
    if (ibqp->ptr == NULL) {
 80026c8:	6aac      	ldr	r4, [r5, #40]	; 0x28
  ibqp->ptr = NULL;
 80026ca:	46b0      	mov	r8, r6
    if (ibqp->ptr == NULL) {
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d044      	beq.n	800275a <ibqReadTimeout+0xaa>
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80026d0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    if (size > (n - r)) {
 80026d2:	ebab 0206 	sub.w	r2, fp, r6
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80026d6:	4621      	mov	r1, r4
    size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 80026d8:	1b1b      	subs	r3, r3, r4
    if (size > (n - r)) {
 80026da:	429a      	cmp	r2, r3
 80026dc:	bf28      	it	cs
 80026de:	461a      	movcs	r2, r3
    if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 80026e0:	2a40      	cmp	r2, #64	; 0x40
 80026e2:	4692      	mov	sl, r2
 80026e4:	d940      	bls.n	8002768 <ibqReadTimeout+0xb8>
      memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 80026e6:	463b      	mov	r3, r7
 80026e8:	f104 0e40 	add.w	lr, r4, #64	; 0x40
 80026ec:	f8d1 c000 	ldr.w	ip, [r1]
 80026f0:	3110      	adds	r1, #16
 80026f2:	f851 4c0c 	ldr.w	r4, [r1, #-12]
 80026f6:	3310      	adds	r3, #16
 80026f8:	f851 0c08 	ldr.w	r0, [r1, #-8]
 80026fc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8002700:	4571      	cmp	r1, lr
 8002702:	f843 cc10 	str.w	ip, [r3, #-16]
 8002706:	f843 4c0c 	str.w	r4, [r3, #-12]
 800270a:	f843 0c08 	str.w	r0, [r3, #-8]
 800270e:	f843 2c04 	str.w	r2, [r3, #-4]
 8002712:	d1eb      	bne.n	80026ec <ibqReadTimeout+0x3c>
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 8002714:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 8002716:	3740      	adds	r7, #64	; 0x40
      r         += (size_t)BUFFERS_CHUNKS_SIZE;
 8002718:	3640      	adds	r6, #64	; 0x40
      ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 800271a:	3240      	adds	r2, #64	; 0x40
 800271c:	62aa      	str	r2, [r5, #40]	; 0x28
    if (ibqp->ptr >= ibqp->top) {
 800271e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8002720:	4293      	cmp	r3, r2
 8002722:	d811      	bhi.n	8002748 <ibqReadTimeout+0x98>
  ibqp->brdptr += ibqp->bsize;
 8002724:	696b      	ldr	r3, [r5, #20]
 8002726:	69e9      	ldr	r1, [r5, #28]
  ibqp->bcounter--;
 8002728:	68e8      	ldr	r0, [r5, #12]
  ibqp->brdptr += ibqp->bsize;
 800272a:	440b      	add	r3, r1
  if (ibqp->brdptr >= ibqp->btop) {
 800272c:	69aa      	ldr	r2, [r5, #24]
  ibqp->bcounter--;
 800272e:	3801      	subs	r0, #1
  if (ibqp->brdptr >= ibqp->btop) {
 8002730:	4293      	cmp	r3, r2
  ibqp->brdptr += ibqp->bsize;
 8002732:	616b      	str	r3, [r5, #20]
  ibqp->bcounter--;
 8002734:	60e8      	str	r0, [r5, #12]
  if (ibqp->brdptr >= ibqp->btop) {
 8002736:	d301      	bcc.n	800273c <ibqReadTimeout+0x8c>
    ibqp->brdptr = ibqp->buffers;
 8002738:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800273a:	616b      	str	r3, [r5, #20]
  if (ibqp->notify != NULL) {
 800273c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  ibqp->ptr = NULL;
 800273e:	f8c5 8028 	str.w	r8, [r5, #40]	; 0x28
  if (ibqp->notify != NULL) {
 8002742:	b10b      	cbz	r3, 8002748 <ibqReadTimeout+0x98>
    ibqp->notify(ibqp);
 8002744:	4628      	mov	r0, r5
 8002746:	4798      	blx	r3
 8002748:	f388 8811 	msr	BASEPRI, r8
    if (r >= n) {
 800274c:	455e      	cmp	r6, fp
 800274e:	d217      	bcs.n	8002780 <ibqReadTimeout+0xd0>
 8002750:	f389 8811 	msr	BASEPRI, r9
    if (ibqp->ptr == NULL) {
 8002754:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8002756:	2c00      	cmp	r4, #0
 8002758:	d1ba      	bne.n	80026d0 <ibqReadTimeout+0x20>
      msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 800275a:	9901      	ldr	r1, [sp, #4]
 800275c:	4628      	mov	r0, r5
 800275e:	f7fe ff0f 	bl	8001580 <ibqGetFullBufferTimeoutS>
      if (msg != MSG_OK) {
 8002762:	b958      	cbnz	r0, 800277c <ibqReadTimeout+0xcc>
 8002764:	6aac      	ldr	r4, [r5, #40]	; 0x28
 8002766:	e7b3      	b.n	80026d0 <ibqReadTimeout+0x20>
      memcpy(bp, ibqp->ptr, size);
 8002768:	4638      	mov	r0, r7
      r         += size;
 800276a:	4416      	add	r6, r2
      memcpy(bp, ibqp->ptr, size);
 800276c:	f7fd fe1e 	bl	80003ac <memcpy>
      ibqp->ptr += size;
 8002770:	6aab      	ldr	r3, [r5, #40]	; 0x28
      bp        += size;
 8002772:	4457      	add	r7, sl
      ibqp->ptr += size;
 8002774:	eb03 020a 	add.w	r2, r3, sl
 8002778:	62aa      	str	r2, [r5, #40]	; 0x28
      r         += size;
 800277a:	e7d0      	b.n	800271e <ibqReadTimeout+0x6e>
 800277c:	f384 8811 	msr	BASEPRI, r4
}
 8002780:	4630      	mov	r0, r6
 8002782:	b003      	add	sp, #12
 8002784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002790 <_readt.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp, n, timeout);
 8002790:	300c      	adds	r0, #12
 8002792:	f7ff bf8d 	b.w	80026b0 <ibqReadTimeout>
 8002796:	bf00      	nop
	...

080027a0 <_read.lto_priv.1>:
  return ibqReadTimeout(&((SerialUSBDriver *)ip)->ibqueue, bp,
 80027a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027a4:	300c      	adds	r0, #12
 80027a6:	f7ff bf83 	b.w	80026b0 <ibqReadTimeout>
 80027aa:	bf00      	nop
 80027ac:	0000      	movs	r0, r0
	...

080027b0 <usbInitEndpointI>:
                      const USBEndpointConfig *epcp) {
 80027b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027b4:	eb00 0781 	add.w	r7, r0, r1, lsl #2
  if (epcp->in_state != NULL) {
 80027b8:	6953      	ldr	r3, [r2, #20]
                      const USBEndpointConfig *epcp) {
 80027ba:	460c      	mov	r4, r1
 80027bc:	fa0f f881 	sxth.w	r8, r1
  usbp->epc[ep] = epcp;
 80027c0:	60fa      	str	r2, [r7, #12]
  if (epcp->in_state != NULL) {
 80027c2:	b123      	cbz	r3, 80027ce <usbInitEndpointI+0x1e>
    memset(epcp->in_state, 0, sizeof(USBInEndpointState));
 80027c4:	2100      	movs	r1, #0
 80027c6:	6019      	str	r1, [r3, #0]
 80027c8:	6059      	str	r1, [r3, #4]
 80027ca:	6099      	str	r1, [r3, #8]
 80027cc:	60d9      	str	r1, [r3, #12]
  if (epcp->out_state != NULL) {
 80027ce:	6993      	ldr	r3, [r2, #24]
 80027d0:	b123      	cbz	r3, 80027dc <usbInitEndpointI+0x2c>
    memset(epcp->out_state, 0, sizeof(USBOutEndpointState));
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	609a      	str	r2, [r3, #8]
 80027da:	60da      	str	r2, [r3, #12]
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80027dc:	68fb      	ldr	r3, [r7, #12]
  otgp->oe[ep].DOEPTSIZ = 0;
 80027de:	f04f 0c00 	mov.w	ip, #0
  stm32_otg_t *otgp = usbp->otg;
 80027e2:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
  switch (usbp->epc[ep]->ep_mode & USB_EP_MODE_TYPE) {
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4e49      	ldr	r6, [pc, #292]	; (8002910 <usbInitEndpointI+0x160>)
 80027ea:	f002 0203 	and.w	r2, r2, #3
 80027ee:	1e51      	subs	r1, r2, #1
 80027f0:	2902      	cmp	r1, #2
  if (usbp->epc[ep]->out_state != NULL) {
 80027f2:	6999      	ldr	r1, [r3, #24]
 80027f4:	bf98      	it	ls
 80027f6:	eb06 4682 	addls.w	r6, r6, r2, lsl #18
  otgp->oe[ep].DOEPTSIZ = 0;
 80027fa:	eb05 1244 	add.w	r2, r5, r4, lsl #5
 80027fe:	f8c2 cb10 	str.w	ip, [r2, #2832]	; 0xb10
 8002802:	ea4f 1c44 	mov.w	ip, r4, lsl #5
  if (usbp->epc[ep]->out_state != NULL) {
 8002806:	2900      	cmp	r1, #0
 8002808:	d04b      	beq.n	80028a2 <usbInitEndpointI+0xf2>
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 800280a:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800280e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8002812:	f104 0910 	add.w	r9, r4, #16
 8002816:	2201      	movs	r2, #1
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8002818:	0149      	lsls	r1, r1, #5
 800281a:	ea4e 0e06 	orr.w	lr, lr, r6
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 800281e:	fa02 f209 	lsl.w	r2, r2, r9
    otgp->oe[ep].DOEPCTL = ctl | DOEPCTL_MPSIZ(usbp->epc[ep]->out_maxsize);
 8002822:	f845 e001 	str.w	lr, [r5, r1]
    otgp->DAINTMSK |= DAINTMSK_OEPM(ep);
 8002826:	f8d5 181c 	ldr.w	r1, [r5, #2076]	; 0x81c
 800282a:	430a      	orrs	r2, r1
 800282c:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
  otgp->ie[ep].DIEPTSIZ = 0;
 8002830:	eb05 020c 	add.w	r2, r5, ip
  if (usbp->epc[ep]->in_state != NULL) {
 8002834:	6959      	ldr	r1, [r3, #20]
  otgp->ie[ep].DIEPTSIZ = 0;
 8002836:	f04f 0c00 	mov.w	ip, #0
 800283a:	f8c2 c910 	str.w	ip, [r2, #2320]	; 0x910
  if (usbp->epc[ep]->in_state != NULL) {
 800283e:	2900      	cmp	r1, #0
 8002840:	d043      	beq.n	80028ca <usbInitEndpointI+0x11a>
    if (usbp->epc[ep]->in_multiplier > 1)
 8002842:	8b9a      	ldrh	r2, [r3, #28]
    fsize = usbp->epc[ep]->in_maxsize / 4;
 8002844:	8a19      	ldrh	r1, [r3, #16]
    if (usbp->epc[ep]->in_multiplier > 1)
 8002846:	2a01      	cmp	r2, #1
  next = usbp->pmnext;
 8002848:	f8d0 c098 	ldr.w	ip, [r0, #152]	; 0x98
    fsize = usbp->epc[ep]->in_maxsize / 4;
 800284c:	ea4f 0391 	mov.w	r3, r1, lsr #2
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002850:	f104 013f 	add.w	r1, r4, #63	; 0x3f
      fsize *= usbp->epc[ep]->in_multiplier;
 8002854:	bf88      	it	hi
 8002856:	4353      	mulhi	r3, r2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002858:	01a2      	lsls	r2, r4, #6
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800285a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
  usbp->pmnext += size;
 800285e:	eb03 0e0c 	add.w	lr, r3, ip
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002862:	f042 0220 	orr.w	r2, r2, #32
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 8002866:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
  usbp->pmnext += size;
 800286a:	f8c0 e098 	str.w	lr, [r0, #152]	; 0x98
    otgp->DIEPTXF[ep - 1] = DIEPTXF_INEPTXFD(fsize) |
 800286e:	604b      	str	r3, [r1, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8002870:	612a      	str	r2, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8002872:	692b      	ldr	r3, [r5, #16]
 8002874:	069a      	lsls	r2, r3, #26
 8002876:	d4fc      	bmi.n	8002872 <usbInitEndpointI+0xc2>
  chSysPolledDelayX(cycles);
 8002878:	2012      	movs	r0, #18
 800287a:	f7fe f839 	bl	80008f0 <chSysPolledDelayX>
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 800287e:	68fa      	ldr	r2, [r7, #12]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8002880:	2301      	movs	r3, #1
    otgp->ie[ep].DIEPCTL = ctl |
 8002882:	f104 0148 	add.w	r1, r4, #72	; 0x48
                           DIEPCTL_MPSIZ(usbp->epc[ep]->in_maxsize);
 8002886:	8a12      	ldrh	r2, [r2, #16]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8002888:	40a3      	lsls	r3, r4
    otgp->ie[ep].DIEPCTL = ctl |
 800288a:	0149      	lsls	r1, r1, #5
                           DIEPCTL_TXFNUM(ep) |
 800288c:	ea42 5484 	orr.w	r4, r2, r4, lsl #22
 8002890:	4334      	orrs	r4, r6
    otgp->ie[ep].DIEPCTL = ctl |
 8002892:	506c      	str	r4, [r5, r1]
    otgp->DAINTMSK |= DAINTMSK_IEPM(ep);
 8002894:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
}
 800289e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80028a2:	eb05 1248 	add.w	r2, r5, r8, lsl #5
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80028a6:	f104 0910 	add.w	r9, r4, #16
 80028aa:	2101      	movs	r1, #1
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80028ac:	f8d2 eb00 	ldr.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80028b0:	fa01 f109 	lsl.w	r1, r1, r9
    otgp->oe[ep].DOEPCTL &= ~DOEPCTL_USBAEP;
 80028b4:	f42e 4e00 	bic.w	lr, lr, #32768	; 0x8000
 80028b8:	f8c2 eb00 	str.w	lr, [r2, #2816]	; 0xb00
    otgp->DAINTMSK &= ~DAINTMSK_OEPM(ep);
 80028bc:	f8d5 281c 	ldr.w	r2, [r5, #2076]	; 0x81c
 80028c0:	ea22 0201 	bic.w	r2, r2, r1
 80028c4:	f8c5 281c 	str.w	r2, [r5, #2076]	; 0x81c
 80028c8:	e7b2      	b.n	8002830 <usbInitEndpointI+0x80>
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80028ca:	f104 023f 	add.w	r2, r4, #63	; 0x3f
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80028ce:	01a3      	lsls	r3, r4, #6
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80028d0:	4910      	ldr	r1, [pc, #64]	; (8002914 <usbInitEndpointI+0x164>)
 80028d2:	eb05 0282 	add.w	r2, r5, r2, lsl #2
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80028d6:	f043 0320 	orr.w	r3, r3, #32
    otgp->DIEPTXF[ep - 1] = 0x02000400; /* Reset value.*/
 80028da:	6051      	str	r1, [r2, #4]
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 80028dc:	612b      	str	r3, [r5, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 80028de:	692b      	ldr	r3, [r5, #16]
 80028e0:	069b      	lsls	r3, r3, #26
 80028e2:	d4fc      	bmi.n	80028de <usbInitEndpointI+0x12e>
 80028e4:	eb05 1848 	add.w	r8, r5, r8, lsl #5
 80028e8:	2012      	movs	r0, #18
 80028ea:	f7fe f801 	bl	80008f0 <chSysPolledDelayX>
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80028ee:	2101      	movs	r1, #1
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 80028f0:	f8d8 3900 	ldr.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80028f4:	40a1      	lsls	r1, r4
    otgp->ie[ep].DIEPCTL &= ~DIEPCTL_USBAEP;
 80028f6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80028fa:	f8c8 3900 	str.w	r3, [r8, #2304]	; 0x900
    otgp->DAINTMSK &= ~DAINTMSK_IEPM(ep);
 80028fe:	f8d5 481c 	ldr.w	r4, [r5, #2076]	; 0x81c
 8002902:	ea24 0401 	bic.w	r4, r4, r1
 8002906:	f8c5 481c 	str.w	r4, [r5, #2076]	; 0x81c
 800290a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800290e:	bf00      	nop
 8002910:	10008000 	.word	0x10008000
 8002914:	02000400 	.word	0x02000400
	...

08002920 <usb_event>:
static void usb_event(USBDriver *usbp, usbevent_t event) {
 8002920:	b538      	push	{r3, r4, r5, lr}
 8002922:	2905      	cmp	r1, #5
 8002924:	d81e      	bhi.n	8002964 <usb_event+0x44>
 8002926:	e8df f001 	tbb	[pc, r1]
 800292a:	1d03      	.short	0x1d03
 800292c:	1e03032d 	.word	0x1e03032d
 8002930:	2320      	movs	r3, #32
 8002932:	f383 8811 	msr	BASEPRI, r3
  if (bqIsSuspendedX(&sdup->ibqueue) && bqIsSuspendedX(&sdup->obqueue)) {
 8002936:	4c2c      	ldr	r4, [pc, #176]	; (80029e8 <usb_event+0xc8>)
 8002938:	7d23      	ldrb	r3, [r4, #20]
 800293a:	b113      	cbz	r3, 8002942 <usb_event+0x22>
 800293c:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
 8002940:	b96b      	cbnz	r3, 800295e <usb_event+0x3e>
  chEvtBroadcastFlagsI(esp, flags);
 8002942:	2102      	movs	r1, #2
 8002944:	4829      	ldr	r0, [pc, #164]	; (80029ec <usb_event+0xcc>)
  bqSuspendI(&sdup->ibqueue);
 8002946:	2501      	movs	r5, #1
 8002948:	f7fd ff42 	bl	80007d0 <chEvtBroadcastFlagsI>
  chThdDequeueAllI(tqp, msg);
 800294c:	4828      	ldr	r0, [pc, #160]	; (80029f0 <usb_event+0xd0>)
 800294e:	7525      	strb	r5, [r4, #20]
 8002950:	f7fd ff16 	bl	8000780 <chThdDequeueAllI.constprop.0>
 8002954:	4827      	ldr	r0, [pc, #156]	; (80029f4 <usb_event+0xd4>)
  bqSuspendI(&sdup->obqueue);
 8002956:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 800295a:	f7fd ff11 	bl	8000780 <chThdDequeueAllI.constprop.0>
 800295e:	2300      	movs	r3, #0
 8002960:	f383 8811 	msr	BASEPRI, r3
}
 8002964:	bd38      	pop	{r3, r4, r5, pc}
 8002966:	2320      	movs	r3, #32
 8002968:	f383 8811 	msr	BASEPRI, r3
  chEvtBroadcastFlagsI(esp, flags);
 800296c:	4c1e      	ldr	r4, [pc, #120]	; (80029e8 <usb_event+0xc8>)
 800296e:	2101      	movs	r1, #1
 8002970:	1d20      	adds	r0, r4, #4
 8002972:	f7fd ff2d 	bl	80007d0 <chEvtBroadcastFlagsI>
  bqResumeX(&sdup->ibqueue);
 8002976:	2300      	movs	r3, #0
 8002978:	7523      	strb	r3, [r4, #20]
  bqResumeX(&sdup->obqueue);
 800297a:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
 800297e:	f383 8811 	msr	BASEPRI, r3
 8002982:	bd38      	pop	{r3, r4, r5, pc}
 8002984:	4605      	mov	r5, r0
 8002986:	2320      	movs	r3, #32
 8002988:	f383 8811 	msr	BASEPRI, r3
  ibqp->bcounter  = 0;
 800298c:	4c16      	ldr	r4, [pc, #88]	; (80029e8 <usb_event+0xc8>)
    usbInitEndpointI(usbp, USBD1_DATA_REQUEST_EP, &ep1config);
 800298e:	2101      	movs	r1, #1
 8002990:	4a19      	ldr	r2, [pc, #100]	; (80029f8 <usb_event+0xd8>)
 8002992:	f7ff ff0d 	bl	80027b0 <usbInitEndpointI>
    usbInitEndpointI(usbp, USBD1_INTERRUPT_REQUEST_EP, &ep2config);
 8002996:	2102      	movs	r1, #2
 8002998:	4628      	mov	r0, r5
 800299a:	4a18      	ldr	r2, [pc, #96]	; (80029fc <usb_event+0xdc>)
 800299c:	f7ff ff08 	bl	80027b0 <usbInitEndpointI>
 80029a0:	2500      	movs	r5, #0
  ibqp->brdptr    = ibqp->buffers;
 80029a2:	6b23      	ldr	r3, [r4, #48]	; 0x30
  chThdDequeueAllI(tqp, msg);
 80029a4:	f104 000c 	add.w	r0, r4, #12
  ibqp->bcounter  = 0;
 80029a8:	61a5      	str	r5, [r4, #24]
  ibqp->bwrptr    = ibqp->buffers;
 80029aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
  ibqp->top       = NULL;
 80029ae:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80029b2:	f7fd fee5 	bl	8000780 <chThdDequeueAllI.constprop.0>
  obqp->bcounter  = bqSizeX(obqp);
 80029b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
  obqp->brdptr    = obqp->buffers;
 80029b8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
 80029ba:	f104 0044 	add.w	r0, r4, #68	; 0x44
  obqp->bcounter  = bqSizeX(obqp);
 80029be:	6522      	str	r2, [r4, #80]	; 0x50
  bqResumeX(&sdup->ibqueue);
 80029c0:	7525      	strb	r5, [r4, #20]
  obqp->bwrptr    = obqp->buffers;
 80029c2:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
  obqp->top       = NULL;
 80029c6:	e9c4 551b 	strd	r5, r5, [r4, #108]	; 0x6c
 80029ca:	f7fd fed9 	bl	8000780 <chThdDequeueAllI.constprop.0>
  chEvtBroadcastFlagsI(esp, flags);
 80029ce:	1d20      	adds	r0, r4, #4
 80029d0:	2101      	movs	r1, #1
  bqResumeX(&sdup->obqueue);
 80029d2:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
 80029d6:	f7fd fefb 	bl	80007d0 <chEvtBroadcastFlagsI>
  (void) sdu_start_receive(sdup);
 80029da:	4620      	mov	r0, r4
 80029dc:	f7fe fa70 	bl	8000ec0 <sdu_start_receive>
 80029e0:	f385 8811 	msr	BASEPRI, r5
}
 80029e4:	bd38      	pop	{r3, r4, r5, pc}
 80029e6:	bf00      	nop
 80029e8:	240002b0 	.word	0x240002b0
 80029ec:	240002b4 	.word	0x240002b4
 80029f0:	240002bc 	.word	0x240002bc
 80029f4:	240002f4 	.word	0x240002f4
 80029f8:	08004ecc 	.word	0x08004ecc
 80029fc:	08004ef0 	.word	0x08004ef0

08002a00 <sdcConnect>:
bool sdcConnect(SDCDriver *sdcp) {
 8002a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a04:	b084      	sub	sp, #16
  if (f >= sdcp->clkfreq) {
 8002a06:	4bb1      	ldr	r3, [pc, #708]	; (8002ccc <sdcConnect+0x2cc>)
  sdcp->state = BLK_CONNECTING;
 8002a08:	2203      	movs	r2, #3
bool sdcConnect(SDCDriver *sdcp) {
 8002a0a:	4604      	mov	r4, r0
  sdcp->sdmmc->CLKCR  = sdc_lld_clkdiv(sdcp, 4000000);
 8002a0c:	6c41      	ldr	r1, [r0, #68]	; 0x44
  sdcp->state = BLK_CONNECTING;
 8002a0e:	7102      	strb	r2, [r0, #4]
bool sdcConnect(SDCDriver *sdcp) {
 8002a10:	af02      	add	r7, sp, #8
  if (f >= sdcp->clkfreq) {
 8002a12:	4299      	cmp	r1, r3
  sdcp->sdmmc->CLKCR  = sdc_lld_clkdiv(sdcp, 4000000);
 8002a14:	6c02      	ldr	r2, [r0, #64]	; 0x40
  if (f >= sdcp->clkfreq) {
 8002a16:	d973      	bls.n	8002b00 <sdcConnect+0x100>
  return (sdcp->clkfreq + (f * 2) - 1) / (f * 2);
 8002a18:	f503 1374 	add.w	r3, r3, #3997696	; 0x3d0000
 8002a1c:	48ac      	ldr	r0, [pc, #688]	; (8002cd0 <sdcConnect+0x2d0>)
 8002a1e:	f603 03ff 	addw	r3, r3, #2303	; 0x8ff
 8002a22:	440b      	add	r3, r1
 8002a24:	fba0 1303 	umull	r1, r3, r0, r3
 8002a28:	0d5b      	lsrs	r3, r3, #21
  sdcp->sdmmc->CLKCR  = sdc_lld_clkdiv(sdcp, 4000000);
 8002a2a:	6053      	str	r3, [r2, #4]
  chThdSleep(delay);
 8002a2c:	2064      	movs	r0, #100	; 0x64
  sdcp->sdmmc->POWER |= SDMMC_POWER_PWRCTRL_0 | SDMMC_POWER_PWRCTRL_1;
 8002a2e:	6813      	ldr	r3, [r2, #0]
 8002a30:	f043 0303 	orr.w	r3, r3, #3
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	f7fe fe03 	bl	8001640 <chThdSleep>
  sdcp->sdmmc->ARG = arg;
 8002a3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a3c:	2100      	movs	r1, #0
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_CPSMEN;
 8002a3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
  sdcp->sdmmc->ARG = arg;
 8002a42:	6099      	str	r1, [r3, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_CPSMEN;
 8002a44:	60da      	str	r2, [r3, #12]
  while ((sdcp->sdmmc->STA & SDMMC_STA_CMDSENT) == 0)
 8002a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a48:	0610      	lsls	r0, r2, #24
 8002a4a:	d5fc      	bpl.n	8002a46 <sdcConnect+0x46>
  sdcp->sdmmc->ICR = SDMMC_ICR_CMDSENTC;
 8002a4c:	2080      	movs	r0, #128	; 0x80
  if (!sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_IF_COND,
 8002a4e:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8002a52:	2108      	movs	r1, #8
 8002a54:	6398      	str	r0, [r3, #56]	; 0x38
 8002a56:	1d3b      	adds	r3, r7, #4
 8002a58:	4620      	mov	r0, r4
 8002a5a:	f7fd ffb1 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002a5e:	2800      	cmp	r0, #0
 8002a60:	d150      	bne.n	8002b04 <sdcConnect+0x104>
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002a62:	687b      	ldr	r3, [r7, #4]
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8002a64:	2201      	movs	r2, #1
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002a66:	f3c3 2303 	ubfx	r3, r3, #8, #4
    sdcp->cardmode = SDC_MODE_CARDTYPE_SDV20;
 8002a6a:	6322      	str	r2, [r4, #48]	; 0x30
    if (((resp[0] >> 8U) & 0xFU) != 1U) {
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d00b      	beq.n	8002a88 <sdcConnect+0x88>
 8002a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
  sdcp->sdmmc->CLKCR = 0;
 8002a72:	2200      	movs	r2, #0
  sdcp->state = BLK_ACTIVE;
 8002a74:	2102      	movs	r1, #2
  return HAL_FAILED;
 8002a76:	2501      	movs	r5, #1
 8002a78:	605a      	str	r2, [r3, #4]
  sdcp->sdmmc->POWER = 0;
 8002a7a:	601a      	str	r2, [r3, #0]
  sdcp->state = BLK_ACTIVE;
 8002a7c:	7121      	strb	r1, [r4, #4]
}
 8002a7e:	4628      	mov	r0, r5
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002a88:	4602      	mov	r2, r0
 8002a8a:	1d3b      	adds	r3, r7, #4
 8002a8c:	2137      	movs	r1, #55	; 0x37
 8002a8e:	4620      	mov	r0, r4
 8002a90:	f7fd ff96 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002a94:	2800      	cmp	r0, #0
 8002a96:	d1eb      	bne.n	8002a70 <sdcConnect+0x70>
        MMCSD_R1_ERROR(resp[0])) {
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	4b8e      	ldr	r3, [pc, #568]	; (8002cd4 <sdcConnect+0x2d4>)
 8002a9c:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d1e6      	bne.n	8002a70 <sdcConnect+0x70>
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8002aa2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8002aa4:	f006 030f 	and.w	r3, r6, #15
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d034      	beq.n	8002b16 <sdcConnect+0x116>
    ocr = SDC_INIT_OCR;
 8002aac:	4e8a      	ldr	r6, [pc, #552]	; (8002cd8 <sdcConnect+0x2d8>)
 8002aae:	4a8b      	ldr	r2, [pc, #556]	; (8002cdc <sdcConnect+0x2dc>)
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	bf18      	it	ne
 8002ab4:	4616      	movne	r6, r2
 8002ab6:	2564      	movs	r5, #100	; 0x64
        MMCSD_R1_ERROR(resp[0])) {
 8002ab8:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8002cd4 <sdcConnect+0x2d4>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002abc:	1d3b      	adds	r3, r7, #4
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2137      	movs	r1, #55	; 0x37
 8002ac2:	4620      	mov	r0, r4
 8002ac4:	f7fd ff7c 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002ac8:	2800      	cmp	r0, #0
 8002aca:	d1d1      	bne.n	8002a70 <sdcConnect+0x70>
        MMCSD_R1_ERROR(resp[0])) {
 8002acc:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002ace:	ea13 0f08 	tst.w	r3, r8
 8002ad2:	d1cd      	bne.n	8002a70 <sdcConnect+0x70>
  sdcp->sdmmc->ARG = arg;
 8002ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 8002ad6:	f241 1229 	movw	r2, #4393	; 0x1129
  sdcp->sdmmc->ARG = arg;
 8002ada:	609e      	str	r6, [r3, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 8002adc:	60da      	str	r2, [r3, #12]
  while (((sta = sdcp->sdmmc->STA) & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 8002ade:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ae0:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8002ae4:	d0fb      	beq.n	8002ade <sdcConnect+0xde>
  if ((sta & (SDMMC_STA_CTIMEOUT)) != 0) {
 8002ae6:	0748      	lsls	r0, r1, #29
  sdcp->sdmmc->ICR = sta & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDMMC_STA_CTIMEOUT)) != 0) {
 8002aea:	d42d      	bmi.n	8002b48 <sdcConnect+0x148>
  *resp = sdcp->sdmmc->RESP1;
 8002aec:	695a      	ldr	r2, [r3, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 8002aee:	2a00      	cmp	r2, #0
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	db41      	blt.n	8002b78 <sdcConnect+0x178>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8002af4:	3d01      	subs	r5, #1
 8002af6:	d0bc      	beq.n	8002a72 <sdcConnect+0x72>
 8002af8:	2064      	movs	r0, #100	; 0x64
 8002afa:	f7fe fda1 	bl	8001640 <chThdSleep>
 8002afe:	e7dd      	b.n	8002abc <sdcConnect+0xbc>
    return 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	e792      	b.n	8002a2a <sdcConnect+0x2a>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002b04:	1d3b      	adds	r3, r7, #4
 8002b06:	2200      	movs	r2, #0
 8002b08:	2137      	movs	r1, #55	; 0x37
 8002b0a:	4620      	mov	r0, r4
 8002b0c:	f7fd ff58 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002b10:	b300      	cbz	r0, 8002b54 <sdcConnect+0x154>
      sdcp->cardmode = SDC_MODE_CARDTYPE_MMC;
 8002b12:	2302      	movs	r3, #2
 8002b14:	6323      	str	r3, [r4, #48]	; 0x30
 8002b16:	2564      	movs	r5, #100	; 0x64
  sdcp->sdmmc->ARG = arg;
 8002b18:	f8df 81d0 	ldr.w	r8, [pc, #464]	; 8002cec <sdcConnect+0x2ec>
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 8002b1c:	f241 1601 	movw	r6, #4353	; 0x1101
  sdcp->sdmmc->ARG = arg;
 8002b20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b22:	f8c3 8008 	str.w	r8, [r3, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_WAITRESP_0 | SDMMC_CMD_CPSMEN;
 8002b26:	60de      	str	r6, [r3, #12]
  while (((sta = sdcp->sdmmc->STA) & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 8002b28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002b2a:	f011 0245 	ands.w	r2, r1, #69	; 0x45
 8002b2e:	d0fb      	beq.n	8002b28 <sdcConnect+0x128>
  sdcp->sdmmc->ICR = sta & (SDMMC_STA_CMDREND | SDMMC_STA_CTIMEOUT |
 8002b30:	639a      	str	r2, [r3, #56]	; 0x38
  if ((sta & (SDMMC_STA_CTIMEOUT)) != 0) {
 8002b32:	074a      	lsls	r2, r1, #29
 8002b34:	d408      	bmi.n	8002b48 <sdcConnect+0x148>
  *resp = sdcp->sdmmc->RESP1;
 8002b36:	695a      	ldr	r2, [r3, #20]
    if ((resp[0] & 0x80000000U) != 0U) {
 8002b38:	2a00      	cmp	r2, #0
 8002b3a:	db1d      	blt.n	8002b78 <sdcConnect+0x178>
    if (++i >= (unsigned)SDC_INIT_RETRY) {
 8002b3c:	3d01      	subs	r5, #1
 8002b3e:	d098      	beq.n	8002a72 <sdcConnect+0x72>
 8002b40:	2064      	movs	r0, #100	; 0x64
 8002b42:	f7fe fd7d 	bl	8001640 <chThdSleep>
 8002b46:	e7eb      	b.n	8002b20 <sdcConnect+0x120>
    sdc_lld_collect_errors(sdcp, sta);
 8002b48:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8002b4c:	f7fd fef8 	bl	8000940 <sdc_lld_collect_errors.isra.0>
    return HAL_FAILED;
 8002b50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b52:	e78e      	b.n	8002a72 <sdcConnect+0x72>
        MMCSD_R1_ERROR(resp[0])) {
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	4b5f      	ldr	r3, [pc, #380]	; (8002cd4 <sdcConnect+0x2d4>)
 8002b58:	4013      	ands	r3, r2
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, 0, resp) ||
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1d9      	bne.n	8002b12 <sdcConnect+0x112>
  sdcp->sdmmc->ARG = arg;
 8002b5e:	6c22      	ldr	r2, [r4, #64]	; 0x40
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_CPSMEN;
 8002b60:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      sdcp->cardmode = SDC_MODE_CARDTYPE_SDV11;
 8002b64:	6323      	str	r3, [r4, #48]	; 0x30
  sdcp->sdmmc->ARG = arg;
 8002b66:	6093      	str	r3, [r2, #8]
  sdcp->sdmmc->CMD = (uint32_t)cmd | SDMMC_CMD_CPSMEN;
 8002b68:	60d1      	str	r1, [r2, #12]
  while ((sdcp->sdmmc->STA & SDMMC_STA_CMDSENT) == 0)
 8002b6a:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8002b6c:	0619      	lsls	r1, r3, #24
 8002b6e:	d5fc      	bpl.n	8002b6a <sdcConnect+0x16a>
  sdcp->sdmmc->ICR = SDMMC_ICR_CMDSENTC;
 8002b70:	2380      	movs	r3, #128	; 0x80
    ocr = SDC_INIT_OCR;
 8002b72:	4e5a      	ldr	r6, [pc, #360]	; (8002cdc <sdcConnect+0x2dc>)
 8002b74:	6393      	str	r3, [r2, #56]	; 0x38
  if ((sdcp->cardmode &  SDC_MODE_CARDTYPE_MASK) == SDC_MODE_CARDTYPE_MMC) {
 8002b76:	e79e      	b.n	8002ab6 <sdcConnect+0xb6>
      if ((resp[0] & 0x40000000U) != 0U) {
 8002b78:	0052      	lsls	r2, r2, #1
 8002b7a:	d503      	bpl.n	8002b84 <sdcConnect+0x184>
        sdcp->cardmode |= SDC_MODE_HIGH_CAPACITY;
 8002b7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002b7e:	f043 0310 	orr.w	r3, r3, #16
 8002b82:	6323      	str	r3, [r4, #48]	; 0x30
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_ALL_SEND_CID, 0, sdcp->cid)) {
 8002b84:	f104 0308 	add.w	r3, r4, #8
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2102      	movs	r1, #2
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	f7fd fef7 	bl	8000980 <sdc_lld_send_cmd_long_crc>
 8002b92:	2800      	cmp	r0, #0
 8002b94:	f47f af6c 	bne.w	8002a70 <sdcConnect+0x70>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEND_RELATIVE_ADDR,
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f104 0338 	add.w	r3, r4, #56	; 0x38
 8002b9e:	2103      	movs	r1, #3
 8002ba0:	4620      	mov	r0, r4
 8002ba2:	f7fd ff0d 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002ba6:	2800      	cmp	r0, #0
 8002ba8:	f47f af62 	bne.w	8002a70 <sdcConnect+0x70>
                                sdcp->rca, sdcp->csd)) {
 8002bac:	f104 0518 	add.w	r5, r4, #24
  if (sdc_lld_send_cmd_long_crc(sdcp, MMCSD_CMD_SEND_CSD,
 8002bb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002bb2:	2109      	movs	r1, #9
 8002bb4:	4620      	mov	r0, r4
 8002bb6:	462b      	mov	r3, r5
 8002bb8:	f7fd fee2 	bl	8000980 <sdc_lld_send_cmd_long_crc>
 8002bbc:	2800      	cmp	r0, #0
 8002bbe:	f47f af57 	bne.w	8002a70 <sdcConnect+0x70>
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SEL_DESEL_CARD,
 8002bc2:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002bc4:	2107      	movs	r1, #7
 8002bc6:	4620      	mov	r0, r4
 8002bc8:	463b      	mov	r3, r7
 8002bca:	f7fd fef9 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002bce:	2800      	cmp	r0, #0
 8002bd0:	f47f af4e 	bne.w	8002a70 <sdcConnect+0x70>
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002bd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	f000 80ac 	beq.w	8002d38 <sdcConnect+0x338>
  return (data[startidx] & endmask) >> startoff;        /* One piece case.  */
 8002be0:	6a63      	ldr	r3, [r4, #36]	; 0x24
static bool sdc_detect_bus_clk(SDCDriver *sdcp, sdcbusclk_t *clk) {
 8002be2:	466e      	mov	r6, sp
  uint8_t tmp[N];
 8002be4:	b090      	sub	sp, #64	; 0x40
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8002be6:	0f9b      	lsrs	r3, r3, #30
  uint8_t tmp[N];
 8002be8:	f10d 0808 	add.w	r8, sp, #8
  if (0U == _mmcsd_get_slice(sdcp->csd, MMCSD_CSD_10_CSD_STRUCTURE_SLICE)) {
 8002bec:	d00d      	beq.n	8002c0a <sdcConnect+0x20a>
  if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, 0)) {
 8002bee:	9000      	str	r0, [sp, #0]
 8002bf0:	2306      	movs	r3, #6
 8002bf2:	2240      	movs	r2, #64	; 0x40
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	4620      	mov	r0, r4
 8002bf8:	f7ff f8e2 	bl	8001dc0 <sdc_lld_read_special>
 8002bfc:	2800      	cmp	r0, #0
 8002bfe:	f040 80e8 	bne.w	8002dd2 <sdcConnect+0x3d2>
  return ((uint16_t)buf[start] << 8U) | (uint16_t)buf[start + 1U];
 8002c02:	f898 300d 	ldrb.w	r3, [r8, #13]
  if ((sdc_cmd6_extract_info(SD_SWITCH_FUNCTION_SPEED, tmp) & 2U) == 2U) {
 8002c06:	079b      	lsls	r3, r3, #30
 8002c08:	d472      	bmi.n	8002cf0 <sdcConnect+0x2f0>
 8002c0a:	46b5      	mov	sp, r6
  if (f >= sdcp->clkfreq) {
 8002c0c:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <sdcConnect+0x2e0>)
                         sdc_lld_clkdiv(sdcp, 25000000) | SDMMC_CLKCR_PWRSAV;
 8002c0e:	e9d4 1010 	ldrd	r1, r0, [r4, #64]	; 0x40
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002c12:	684b      	ldr	r3, [r1, #4]
  if (f >= sdcp->clkfreq) {
 8002c14:	4290      	cmp	r0, r2
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002c16:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  if (f >= sdcp->clkfreq) {
 8002c1a:	d906      	bls.n	8002c2a <sdcConnect+0x22a>
  return (sdcp->clkfreq + (f * 2) - 1) / (f * 2);
 8002c1c:	4a31      	ldr	r2, [pc, #196]	; (8002ce4 <sdcConnect+0x2e4>)
 8002c1e:	4e32      	ldr	r6, [pc, #200]	; (8002ce8 <sdcConnect+0x2e8>)
 8002c20:	4402      	add	r2, r0
 8002c22:	fba6 0202 	umull	r0, r2, r6, r2
 8002c26:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
                         sdc_lld_clkdiv(sdcp, 25000000) | SDMMC_CLKCR_PWRSAV;
 8002c2a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002c2e:	604b      	str	r3, [r1, #4]
  if (SDC_MODE_CARDTYPE_MMC == (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK)) {
 8002c30:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c32:	f003 030f 	and.w	r3, r3, #15
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	f000 80aa 	beq.w	8002d90 <sdcConnect+0x390>
    sdcp->capacity = _mmcsd_get_capacity(sdcp->csd);
 8002c3c:	4628      	mov	r0, r5
 8002c3e:	f7fe f9bf 	bl	8000fc0 <_mmcsd_get_capacity>
 8002c42:	62a0      	str	r0, [r4, #40]	; 0x28
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BLOCKLEN,
 8002c44:	463b      	mov	r3, r7
 8002c46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c4a:	2110      	movs	r1, #16
 8002c4c:	4620      	mov	r0, r4
 8002c4e:	f7fd feb7 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002c52:	4605      	mov	r5, r0
 8002c54:	2800      	cmp	r0, #0
 8002c56:	f47f af0b 	bne.w	8002a70 <sdcConnect+0x70>
      MMCSD_R1_ERROR(resp[0])) {
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	4e1d      	ldr	r6, [pc, #116]	; (8002cd4 <sdcConnect+0x2d4>)
                                 MMCSD_BLOCK_SIZE, resp) ||
 8002c5e:	4233      	tst	r3, r6
 8002c60:	f47f af06 	bne.w	8002a70 <sdcConnect+0x70>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8002c64:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c66:	f013 0f0e 	tst.w	r3, #14
 8002c6a:	f003 020f 	and.w	r2, r3, #15
 8002c6e:	d173      	bne.n	8002d58 <sdcConnect+0x358>
  if (SDC_MODE_1BIT == sdcp->config->bus_width) {
 8002c70:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	b333      	cbz	r3, 8002cc4 <sdcConnect+0x2c4>
  else if (SDC_MODE_4BIT == sdcp->config->bus_width) {
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	f47f aefa 	bne.w	8002a70 <sdcConnect+0x70>
  uint32_t clk = sdcp->sdmmc->CLKCR & ~SDMMC_CLKCR_WIDBUS;
 8002c7c:	f8d4 e040 	ldr.w	lr, [r4, #64]	; 0x40
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8002c80:	1d3b      	adds	r3, r7, #4
 8002c82:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002c84:	2137      	movs	r1, #55	; 0x37
 8002c86:	f8de c004 	ldr.w	ip, [lr, #4]
 8002c8a:	4620      	mov	r0, r4
 8002c8c:	f42c 4c40 	bic.w	ip, ip, #49152	; 0xc000
    sdcp->sdmmc->CLKCR = clk | SDMMC_CLKCR_WIDBUS_0;
 8002c90:	f44c 4c80 	orr.w	ip, ip, #16384	; 0x4000
 8002c94:	f8ce c004 	str.w	ip, [lr, #4]
 8002c98:	f7fd fe92 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002c9c:	2800      	cmp	r0, #0
 8002c9e:	f47f aee7 	bne.w	8002a70 <sdcConnect+0x70>
        MMCSD_R1_ERROR(resp[0])) {
 8002ca2:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_APP_CMD, sdcp->rca, resp) ||
 8002ca4:	4233      	tst	r3, r6
 8002ca6:	f47f aee3 	bne.w	8002a70 <sdcConnect+0x70>
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8002caa:	1d3b      	adds	r3, r7, #4
 8002cac:	2202      	movs	r2, #2
 8002cae:	2106      	movs	r1, #6
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	f7fd fe85 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	f47f aeda 	bne.w	8002a70 <sdcConnect+0x70>
        MMCSD_R1_ERROR(resp[0])) {
 8002cbc:	687b      	ldr	r3, [r7, #4]
    if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SET_BUS_WIDTH, 2, resp) ||
 8002cbe:	4233      	tst	r3, r6
 8002cc0:	f47f aed6 	bne.w	8002a70 <sdcConnect+0x70>
  sdcp->state = BLK_READY;
 8002cc4:	2305      	movs	r3, #5
 8002cc6:	7123      	strb	r3, [r4, #4]
  return HAL_SUCCESS;
 8002cc8:	e6d9      	b.n	8002a7e <sdcConnect+0x7e>
 8002cca:	bf00      	nop
 8002ccc:	003d0900 	.word	0x003d0900
 8002cd0:	431bde83 	.word	0x431bde83
 8002cd4:	fdffe008 	.word	0xfdffe008
 8002cd8:	50ff8000 	.word	0x50ff8000
 8002cdc:	80100000 	.word	0x80100000
 8002ce0:	017d7840 	.word	0x017d7840
 8002ce4:	02faf07f 	.word	0x02faf07f
 8002ce8:	55e63b89 	.word	0x55e63b89
 8002cec:	c0ff8000 	.word	0xc0ff8000
    if (sdc_lld_read_special(sdcp, tmp, N, MMCSD_CMD_SWITCH, cmdarg)) {
 8002cf0:	4843      	ldr	r0, [pc, #268]	; (8002e00 <sdcConnect+0x400>)
 8002cf2:	2306      	movs	r3, #6
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	4641      	mov	r1, r8
 8002cf8:	9000      	str	r0, [sp, #0]
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	f7ff f860 	bl	8001dc0 <sdc_lld_read_special>
 8002d00:	2800      	cmp	r0, #0
 8002d02:	d166      	bne.n	8002dd2 <sdcConnect+0x3d2>
        (uint32_t)buf[16];
 8002d04:	f898 3010 	ldrb.w	r3, [r8, #16]
  status = (tmp >> ((uint32_t)function * 4U)) & 0xFU;
 8002d08:	f003 030f 	and.w	r3, r3, #15
  if (0xFU != status) {
 8002d0c:	2b0f      	cmp	r3, #15
 8002d0e:	d063      	beq.n	8002dd8 <sdcConnect+0x3d8>
      *clk = SDC_CLK_50MHz;
 8002d10:	46b5      	mov	sp, r6
  if (f >= sdcp->clkfreq) {
 8002d12:	493c      	ldr	r1, [pc, #240]	; (8002e04 <sdcConnect+0x404>)
                         sdc_lld_clkdiv(sdcp, 50000000) | SDMMC_CLKCR_PWRSAV;
 8002d14:	e9d4 2010 	ldrd	r2, r0, [r4, #64]	; 0x40
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002d18:	6853      	ldr	r3, [r2, #4]
  if (f >= sdcp->clkfreq) {
 8002d1a:	4288      	cmp	r0, r1
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002d1c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
  if (f >= sdcp->clkfreq) {
 8002d20:	d906      	bls.n	8002d30 <sdcConnect+0x330>
  return (sdcp->clkfreq + (f * 2) - 1) / (f * 2);
 8002d22:	4939      	ldr	r1, [pc, #228]	; (8002e08 <sdcConnect+0x408>)
 8002d24:	4e39      	ldr	r6, [pc, #228]	; (8002e0c <sdcConnect+0x40c>)
 8002d26:	4401      	add	r1, r0
 8002d28:	fba6 0101 	umull	r0, r1, r6, r1
 8002d2c:	ea43 6351 	orr.w	r3, r3, r1, lsr #25
                         sdc_lld_clkdiv(sdcp, 50000000) | SDMMC_CLKCR_PWRSAV;
 8002d30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    sdcp->sdmmc->CLKCR = (sdcp->sdmmc->CLKCR & 0xFFFFFF00U) |
 8002d34:	6053      	str	r3, [r2, #4]
 8002d36:	e77b      	b.n	8002c30 <sdcConnect+0x230>
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002d38:	1d3b      	adds	r3, r7, #4
 8002d3a:	4a35      	ldr	r2, [pc, #212]	; (8002e10 <sdcConnect+0x410>)
 8002d3c:	2106      	movs	r1, #6
 8002d3e:	4620      	mov	r0, r4
 8002d40:	f7fd fe3e 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002d44:	2800      	cmp	r0, #0
 8002d46:	f47f af61 	bne.w	8002c0c <sdcConnect+0x20c>
                                   MMCSD_R1_ERROR(resp[0]))) {
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	4b31      	ldr	r3, [pc, #196]	; (8002e14 <sdcConnect+0x414>)
 8002d4e:	4013      	ands	r3, r2
  if (!(sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af5b 	bne.w	8002c0c <sdcConnect+0x20c>
 8002d56:	e7dc      	b.n	8002d12 <sdcConnect+0x312>
  switch (sdcp->cardmode & SDC_MODE_CARDTYPE_MASK) {
 8002d58:	2a02      	cmp	r2, #2
 8002d5a:	f47f ae89 	bne.w	8002a70 <sdcConnect+0x70>
  switch (sdcp->config->bus_width) {
 8002d5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d043      	beq.n	8002dee <sdcConnect+0x3ee>
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d038      	beq.n	8002ddc <sdcConnect+0x3dc>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0aa      	beq.n	8002cc4 <sdcConnect+0x2c4>
  uint32_t clk = sdcp->sdmmc->CLKCR & ~SDMMC_CLKCR_WIDBUS;
 8002d6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
  uint32_t cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 0, 0);
 8002d70:	4a29      	ldr	r2, [pc, #164]	; (8002e18 <sdcConnect+0x418>)
 8002d72:	685b      	ldr	r3, [r3, #4]
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002d74:	1d3b      	adds	r3, r7, #4
 8002d76:	2106      	movs	r1, #6
 8002d78:	4620      	mov	r0, r4
 8002d7a:	f7fd fe21 	bl	80009c0 <sdc_lld_send_cmd_short_crc>
 8002d7e:	2800      	cmp	r0, #0
 8002d80:	f47f ae76 	bne.w	8002a70 <sdcConnect+0x70>
      MMCSD_R1_ERROR(resp[0])) {
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	4b23      	ldr	r3, [pc, #140]	; (8002e14 <sdcConnect+0x414>)
 8002d88:	4013      	ands	r3, r2
  if (sdc_lld_send_cmd_short_crc(sdcp, MMCSD_CMD_SWITCH, cmdarg, resp) ||
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d09a      	beq.n	8002cc4 <sdcConnect+0x2c4>
 8002d8e:	e66f      	b.n	8002a70 <sdcConnect+0x70>
 8002d90:	6a63      	ldr	r3, [r4, #36]	; 0x24
    if (_mmcsd_get_slice(sdcp->csd, MMCSD_CSD_MMC_CSD_STRUCTURE_SLICE) > 1U) {
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	f6bf af52 	bge.w	8002c3c <sdcConnect+0x23c>
      if (sdc_lld_read_special(sdcp, ext_csd, 512, MMCSD_CMD_SEND_EXT_CSD, 0)) {
 8002d98:	2000      	movs	r0, #0
 8002d9a:	2308      	movs	r3, #8
 8002d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002da0:	f104 0148 	add.w	r1, r4, #72	; 0x48
 8002da4:	9000      	str	r0, [sp, #0]
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff f80a 	bl	8001dc0 <sdc_lld_read_special>
 8002dac:	2800      	cmp	r0, #0
 8002dae:	f47f ae5f 	bne.w	8002a70 <sdcConnect+0x70>
uint32_t _mmcsd_get_capacity_ext(const uint8_t *ext_csd) {

  osalDbgCheck(NULL != ext_csd);

  return ((uint32_t)ext_csd[215] << 24U) +
         ((uint32_t)ext_csd[214] << 16U) +
 8002db2:	f894 311e 	ldrb.w	r3, [r4, #286]	; 0x11e
  return ((uint32_t)ext_csd[215] << 24U) +
 8002db6:	f894 011f 	ldrb.w	r0, [r4, #287]	; 0x11f
         ((uint32_t)ext_csd[214] << 16U) +
 8002dba:	041b      	lsls	r3, r3, #16
         ((uint32_t)ext_csd[213] << 8U)  +
         (uint32_t)ext_csd[212];
 8002dbc:	f894 111c 	ldrb.w	r1, [r4, #284]	; 0x11c
         ((uint32_t)ext_csd[213] << 8U)  +
 8002dc0:	f894 211d 	ldrb.w	r2, [r4, #285]	; 0x11d
  return ((uint32_t)ext_csd[215] << 24U) +
 8002dc4:	eb03 6300 	add.w	r3, r3, r0, lsl #24
         ((uint32_t)ext_csd[213] << 8U)  +
 8002dc8:	440b      	add	r3, r1
 8002dca:	eb03 2302 	add.w	r3, r3, r2, lsl #8
      sdcp->capacity = _mmcsd_get_capacity_ext(ext_csd);
 8002dce:	62a3      	str	r3, [r4, #40]	; 0x28
 8002dd0:	e738      	b.n	8002c44 <sdcConnect+0x244>
 8002dd2:	46b5      	mov	sp, r6
 8002dd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002dd6:	e64c      	b.n	8002a72 <sdcConnect+0x72>
 8002dd8:	46b5      	mov	sp, r6
 8002dda:	e717      	b.n	8002c0c <sdcConnect+0x20c>
 8002ddc:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 2, 0);
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <sdcConnect+0x41c>)
 8002de0:	684b      	ldr	r3, [r1, #4]
 8002de2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    sdcp->sdmmc->CLKCR = clk | SDMMC_CLKCR_WIDBUS_1;
 8002de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dea:	604b      	str	r3, [r1, #4]
    break;
 8002dec:	e7c2      	b.n	8002d74 <sdcConnect+0x374>
  uint32_t clk = sdcp->sdmmc->CLKCR & ~SDMMC_CLKCR_WIDBUS;
 8002dee:	6c21      	ldr	r1, [r4, #64]	; 0x40
    cmdarg = mmc_cmd6_construct(MMC_SWITCH_WRITE_BYTE, 183, 1, 0);
 8002df0:	4a0b      	ldr	r2, [pc, #44]	; (8002e20 <sdcConnect+0x420>)
 8002df2:	684b      	ldr	r3, [r1, #4]
 8002df4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    sdcp->sdmmc->CLKCR = clk | SDMMC_CLKCR_WIDBUS_0;
 8002df8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dfc:	604b      	str	r3, [r1, #4]
    break;
 8002dfe:	e7b9      	b.n	8002d74 <sdcConnect+0x374>
 8002e00:	80fffff1 	.word	0x80fffff1
 8002e04:	02faf080 	.word	0x02faf080
 8002e08:	05f5e0ff 	.word	0x05f5e0ff
 8002e0c:	55e63b89 	.word	0x55e63b89
 8002e10:	03b90100 	.word	0x03b90100
 8002e14:	fdffe008 	.word	0xfdffe008
 8002e18:	03b70000 	.word	0x03b70000
 8002e1c:	03b70200 	.word	0x03b70200
 8002e20:	03b70100 	.word	0x03b70100
	...

08002e30 <main>:
#if STM32_NO_INIT == FALSE
  /* Reset of all peripherals. AHB3 is not reset entirely because FMC could
     have been initialized in the board initialization file (board.c).
     Note, GPIOs are not reset because initialized before this point in
     board files.*/
  rccResetAHB1(~0);
 8002e30:	4b41      	ldr	r3, [pc, #260]	; (8002f38 <main+0x108>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  rccResetAHB2(~0);
  rccResetAHB3(~(RCC_AHB3RSTR_FMCRST |
 8002e38:	4d40      	ldr	r5, [pc, #256]	; (8002f3c <main+0x10c>)
  rccResetAHB1(~0);
 8002e3a:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
void bdmaInit(void) {
  unsigned i;

  bdma.allocated_mask = 0U;
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
    _stm32_bdma_streams[i].channel->CCR = 0U;
 8002e3e:	4614      	mov	r4, r2
  rccResetAHB3(~(RCC_AHB3RSTR_FMCRST |
 8002e40:	4e3f      	ldr	r6, [pc, #252]	; (8002f40 <main+0x110>)
  bdma.allocated_mask = 0U;
 8002e42:	f8df c11c 	ldr.w	ip, [pc, #284]	; 8002f60 <main+0x130>
}

/*
 * Application entry point.
 */
int main(void) {
 8002e46:	b580      	push	{r7, lr}
  rccResetAHB1(~0);
 8002e48:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8002e4c:	b086      	sub	sp, #24
 8002e4e:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8002e52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 8002e56:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
  rccResetAHB2(~0);
 8002e5a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8002e5e:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
 8002e62:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
 8002e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002e6a:	f8d3 0084 	ldr.w	r0, [r3, #132]	; 0x84
  rccResetAHB3(~(RCC_AHB3RSTR_FMCRST |
 8002e6e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8002e70:	4f34      	ldr	r7, [pc, #208]	; (8002f44 <main+0x114>)
 8002e72:	4328      	orrs	r0, r5
 8002e74:	67d8      	str	r0, [r3, #124]	; 0x7c
 8002e76:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
                 0x80000000U));     /* Was RCC_AHB3RSTR_CPURST in Rev-V.*/
  rccResetAHB4(~(RCC_APB4RSTR_SYSCFGRST | STM32_GPIO_EN_MASK));
 8002e78:	4833      	ldr	r0, [pc, #204]	; (8002f48 <main+0x118>)
  rccResetAHB3(~(RCC_AHB3RSTR_FMCRST |
 8002e7a:	4035      	ands	r5, r6
 8002e7c:	463e      	mov	r6, r7
 8002e7e:	67dd      	str	r5, [r3, #124]	; 0x7c
 8002e80:	6fdd      	ldr	r5, [r3, #124]	; 0x7c
  rccResetAHB4(~(RCC_APB4RSTR_SYSCFGRST | STM32_GPIO_EN_MASK));
 8002e82:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002e86:	4328      	orrs	r0, r5
 8002e88:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
 8002e8c:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 8002e90:	482e      	ldr	r0, [pc, #184]	; (8002f4c <main+0x11c>)
 8002e92:	f3c5 050a 	ubfx	r5, r5, #0, #11
 8002e96:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
 8002e9a:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  rccResetAPB1L(~0);
 8002e9e:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8002ea2:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
 8002ea6:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 8002eaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8002eae:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
  rccResetAPB1H(~0);
 8002eb2:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8002eb6:	f8c3 1094 	str.w	r1, [r3, #148]	; 0x94
 8002eba:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
 8002ebe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8002ec2:	f8d3 5094 	ldr.w	r5, [r3, #148]	; 0x94
  rccResetAPB2(~0);
 8002ec6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002eca:	f8c3 1098 	str.w	r1, [r3, #152]	; 0x98
 8002ece:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
 8002ed2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8002ed6:	f8d3 5098 	ldr.w	r5, [r3, #152]	; 0x98
  rccResetAPB3(~0);
 8002eda:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8002ede:	f8c3 108c 	str.w	r1, [r3, #140]	; 0x8c
 8002ee2:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
 8002ee6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 8002eea:	f8d3 508c 	ldr.w	r5, [r3, #140]	; 0x8c
  rccResetAPB4(~0);
 8002eee:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8002ef2:	f8c3 109c 	str.w	r1, [r3, #156]	; 0x9c
 8002ef6:	f100 01a0 	add.w	r1, r0, #160	; 0xa0
 8002efa:	f8d3 509c 	ldr.w	r5, [r3, #156]	; 0x9c
 8002efe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8002f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f06:	603a      	str	r2, [r7, #0]
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 8002f08:	e001      	b.n	8002f0e <main+0xde>
 8002f0a:	f850 cc14 	ldr.w	ip, [r0, #-20]
    _stm32_bdma_streams[i].channel->CCR = 0U;
 8002f0e:	3014      	adds	r0, #20
 8002f10:	f8cc 4000 	str.w	r4, [ip]
    bdma.streams[i].func  = NULL;
 8002f14:	6074      	str	r4, [r6, #4]
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 8002f16:	4281      	cmp	r1, r0
    bdma.streams[i].param = NULL;
 8002f18:	f846 4f08 	str.w	r4, [r6, #8]!
  for (i = 0; i < STM32_BDMA_STREAMS; i++) {
 8002f1c:	d1f5      	bne.n	8002f0a <main+0xda>
 * @init
 */
void dmaInit(void) {
  unsigned i;

  dma.allocated_mask = 0U;
 8002f1e:	490c      	ldr	r1, [pc, #48]	; (8002f50 <main+0x120>)
  }
  BDMA->IFCR = 0xFFFFFFFFU;
 8002f20:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8002f24:	4d0b      	ldr	r5, [pc, #44]	; (8002f54 <main+0x124>)
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002f26:	2000      	movs	r0, #0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4a0b      	ldr	r2, [pc, #44]	; (8002f58 <main+0x128>)
 8002f2c:	606e      	str	r6, [r5, #4]
  dma.allocated_mask = 0U;
 8002f2e:	f101 0580 	add.w	r5, r1, #128	; 0x80
 8002f32:	600c      	str	r4, [r1, #0]
 8002f34:	4909      	ldr	r1, [pc, #36]	; (8002f5c <main+0x12c>)
 8002f36:	e017      	b.n	8002f68 <main+0x138>
 8002f38:	58024400 	.word	0x58024400
 8002f3c:	7fffefff 	.word	0x7fffefff
 8002f40:	80001000 	.word	0x80001000
 8002f44:	24000844 	.word	0x24000844
 8002f48:	fffff800 	.word	0xfffff800
 8002f4c:	08004d04 	.word	0x08004d04
 8002f50:	2400124c 	.word	0x2400124c
 8002f54:	58025400 	.word	0x58025400
 8002f58:	08004d9c 	.word	0x08004d9c
 8002f5c:	40020010 	.word	0x40020010
 8002f60:	58025408 	.word	0x58025408
 8002f64:	f852 1c10 	ldr.w	r1, [r2, #-16]
    _stm32_dma_streams[i].stream->CR = STM32_DMA_CR_RESET_VALUE;
 8002f68:	3308      	adds	r3, #8
 8002f6a:	6008      	str	r0, [r1, #0]
    dma.streams[i].func = NULL;
 8002f6c:	f843 0c04 	str.w	r0, [r3, #-4]
  for (i = 0U; i < STM32_DMA_STREAMS; i++) {
 8002f70:	3210      	adds	r2, #16
 8002f72:	429d      	cmp	r5, r3
 8002f74:	d1f6      	bne.n	8002f64 <main+0x134>

#if defined(__CORE_CM0_H_GENERIC)
  NVIC->IP[_IP_IDX(n)] = (NVIC->IP[_IP_IDX(n)] & ~(0xFFU << _BIT_SHIFT(n))) |
                         (NVIC_PRIORITY_MASK(prio) << _BIT_SHIFT(n));
#else
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f76:	4bc1      	ldr	r3, [pc, #772]	; (800327c <main+0x44c>)
  }
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f7c:	4fc0      	ldr	r7, [pc, #768]	; (8003280 <main+0x450>)
 8002f7e:	2590      	movs	r5, #144	; 0x90
  DMA1->HIFCR = 0xFFFFFFFFU;
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002f80:	4ec0      	ldr	r6, [pc, #768]	; (8003284 <main+0x454>)
#endif
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f82:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  DMA1->LIFCR = 0xFFFFFFFFU;
 8002f86:	60ba      	str	r2, [r7, #8]
 8002f88:	f44f 3400 	mov.w	r4, #131072	; 0x20000
  DMA1->HIFCR = 0xFFFFFFFFU;
 8002f8c:	60fa      	str	r2, [r7, #12]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f8e:	f04f 0c70 	mov.w	ip, #112	; 0x70
  DMA2->LIFCR = 0xFFFFFFFFU;
 8002f92:	60b2      	str	r2, [r6, #8]
 8002f94:	27c0      	movs	r7, #192	; 0xc0
  DMA2->HIFCR = 0xFFFFFFFFU;
 8002f96:	60f2      	str	r2, [r6, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002f98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002f9c:	f883 537a 	strb.w	r5, [r3, #890]	; 0x37a
#error "invalid constants used in mcuconf.h"
#endif

    /* The SRAM2 bank can optionally made a non cache-able area for use by
       DMA engines.*/
    mpuConfigureRegion(STM32_NOCACHE_MPU_REGION,
 8002fa0:	2606      	movs	r6, #6
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fa2:	f8c3 118c 	str.w	r1, [r3, #396]	; 0x18c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fa6:	60d9      	str	r1, [r3, #12]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fa8:	2180      	movs	r1, #128	; 0x80
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002faa:	f883 5331 	strb.w	r5, [r3, #817]	; 0x331
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fae:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
 8002fb2:	4db5      	ldr	r5, [pc, #724]	; (8003288 <main+0x458>)
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fb4:	605c      	str	r4, [r3, #4]
                       base,
                       MPU_RASR_ATTR_AP_RW_RW |
                       MPU_RASR_ATTR_NON_CACHEABLE |
                       size |
                       MPU_RASR_ENABLE);
    mpuEnable(MPU_CTRL_PRIVDEFENA);
 8002fb6:	2405      	movs	r4, #5
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fb8:	f883 c31c 	strb.w	ip, [r3, #796]	; 0x31c
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fbc:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fc0:	601a      	str	r2, [r3, #0]
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8002fc2:	f883 7327 	strb.w	r7, [r3, #807]	; 0x327
    mpuConfigureRegion(STM32_NOCACHE_MPU_REGION,
 8002fc6:	4ab1      	ldr	r2, [pc, #708]	; (800328c <main+0x45c>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8002fc8:	f8c3 1184 	str.w	r1, [r3, #388]	; 0x184
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8002fcc:	6059      	str	r1, [r3, #4]
    mpuEnable(MPU_CTRL_PRIVDEFENA);
 8002fce:	49b0      	ldr	r1, [pc, #704]	; (8003290 <main+0x460>)
    mpuConfigureRegion(STM32_NOCACHE_MPU_REGION,
 8002fd0:	4bb0      	ldr	r3, [pc, #704]	; (8003294 <main+0x464>)
 8002fd2:	6096      	str	r6, [r2, #8]
 8002fd4:	60d5      	str	r5, [r2, #12]
 8002fd6:	6113      	str	r3, [r2, #16]
    mpuEnable(MPU_CTRL_PRIVDEFENA);
 8002fd8:	6054      	str	r4, [r2, #4]
 8002fda:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 8002fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fe0:	624b      	str	r3, [r1, #36]	; 0x24
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8002fe2:	f8c1 0084 	str.w	r0, [r1, #132]	; 0x84
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002fe6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8002fea:	f8d1 5080 	ldr.w	r5, [r1, #128]	; 0x80
                                            /* clean & invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002fee:	f643 76e0 	movw	r6, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002ff2:	f3c5 344e 	ubfx	r4, r5, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002ff6:	f3c5 05c9 	ubfx	r5, r5, #3, #10
 8002ffa:	0164      	lsls	r4, r4, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8002ffc:	ea04 0006 	and.w	r0, r4, r6
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003000:	462b      	mov	r3, r5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003002:	ea40 7283 	orr.w	r2, r0, r3, lsl #30
                       ((ways << SCB_DCCISW_WAY_Pos) & SCB_DCCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8003006:	3b01      	subs	r3, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003008:	f8c1 2274 	str.w	r2, [r1, #628]	; 0x274
      } while (ways-- != 0U);
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	d1f8      	bne.n	8003002 <main+0x1d2>
    } while(sets-- != 0U);
 8003010:	3c20      	subs	r4, #32
 8003012:	f114 0f20 	cmn.w	r4, #32
 8003016:	d1f1      	bne.n	8002ffc <main+0x1cc>
 8003018:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800301c:	f3bf 8f6f 	isb	sy
  oqObjectInit(&sdp->oqueue, sdp->ob, SERIAL_BUFFERS_SIZE, onotify, sdp);
}
#else
void sdObjectInit(SerialDriver *sdp) {

  sdp->vmt = &vmt;
 8003020:	4d9d      	ldr	r5, [pc, #628]	; (8003298 <main+0x468>)
  oqp->q_counter = size;
 8003022:	f04f 0c10 	mov.w	ip, #16
  oqp->q_buffer  = bp;
 8003026:	489d      	ldr	r0, [pc, #628]	; (800329c <main+0x46c>)
  iqp->q_counter = 0;
 8003028:	2300      	movs	r3, #0
 800302a:	462f      	mov	r7, r5
  iqp->q_buffer  = bp;
 800302c:	4c9c      	ldr	r4, [pc, #624]	; (80032a0 <main+0x470>)
  oqp->q_top     = bp + size;
 800302e:	eb00 060c 	add.w	r6, r0, ip
  oqp->q_buffer  = bp;
 8003032:	63e8      	str	r0, [r5, #60]	; 0x3c
  iqp->q_top     = bp + size;
 8003034:	eb04 080c 	add.w	r8, r4, ip
  iqp->q_buffer  = bp;
 8003038:	61ac      	str	r4, [r5, #24]
 *
 * @init
 */
void spiObjectInit(SPIDriver *spip) {

  spip->state = SPI_STOP;
 800303a:	499a      	ldr	r1, [pc, #616]	; (80032a4 <main+0x474>)
  tqp->next = (thread_t *)tqp;
 800303c:	f105 0e0c 	add.w	lr, r5, #12
  iqp->q_top     = bp + size;
 8003040:	f8c5 801c 	str.w	r8, [r5, #28]
 8003044:	f105 0830 	add.w	r8, r5, #48	; 0x30
  iqp->q_counter = 0;
 8003048:	616b      	str	r3, [r5, #20]
#if defined(STM32_SPI_DMA_REQUIRED) && defined(STM32_SPI_BDMA_REQUIRED)
  SPID6.is_bdma   = true;
#endif
  SPID6.rx.bdma   = NULL;
  SPID6.tx.bdma   = NULL;
  SPID6.rxdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 800304a:	f241 090a 	movw	r9, #4106	; 0x100a
  iqp->q_notify  = infy;
 800304e:	62ab      	str	r3, [r5, #40]	; 0x28
  oqp->q_counter = size;
 8003050:	f8c5 c038 	str.w	ip, [r5, #56]	; 0x38
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003054:	f04f 0ca0 	mov.w	ip, #160	; 0xa0
  oqp->q_top     = bp + size;
 8003058:	642e      	str	r6, [r5, #64]	; 0x40
 800305a:	f8c5 e00c 	str.w	lr, [r5, #12]
  tqp->prev = (thread_t *)tqp;
 800305e:	f8c5 e010 	str.w	lr, [r5, #16]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003062:	f04f 0e08 	mov.w	lr, #8
  tqp->next = (thread_t *)tqp;
 8003066:	f8c5 8030 	str.w	r8, [r5, #48]	; 0x30
  tqp->prev = (thread_t *)tqp;
 800306a:	f8c5 8034 	str.w	r8, [r5, #52]	; 0x34
                    STM32_BDMA_CR_DIR_P2M |
                    STM32_BDMA_CR_TCIE |
                    STM32_BDMA_CR_TEIE;
  SPID6.txdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 800306e:	f241 0818 	movw	r8, #4120	; 0x1018
  iqp->q_link    = link;
 8003072:	62ed      	str	r5, [r5, #44]	; 0x2c
  oqp->q_link    = link;
 8003074:	652d      	str	r5, [r5, #80]	; 0x50
 8003076:	4a8c      	ldr	r2, [pc, #560]	; (80032a8 <main+0x478>)
  usbp->state        = USB_STOP;
 8003078:	4e8c      	ldr	r6, [pc, #560]	; (80032ac <main+0x47c>)
  oqp->q_wrptr   = bp;
 800307a:	e9c5 0011 	strd	r0, r0, [r5, #68]	; 0x44
  oqp->q_notify  = onfy;
 800307e:	488c      	ldr	r0, [pc, #560]	; (80032b0 <main+0x480>)
 8003080:	64e8      	str	r0, [r5, #76]	; 0x4c

#if STM32_SERIAL_USE_USART3
  sdObjectInit(&SD3);
  iqObjectInit(&SD3.iqueue, sd_in_buf3, sizeof sd_in_buf3, NULL, &SD3);
  oqObjectInit(&SD3.oqueue, sd_out_buf3, sizeof sd_out_buf3, notify3, &SD3);
  SD3.usart = USART3;
 8003082:	488c      	ldr	r0, [pc, #560]	; (80032b4 <main+0x484>)
 8003084:	6568      	str	r0, [r5, #84]	; 0x54
  SD3.clock = STM32_USART3CLK;
 8003086:	488c      	ldr	r0, [pc, #560]	; (80032b8 <main+0x488>)
 8003088:	65a8      	str	r0, [r5, #88]	; 0x58
 800308a:	488c      	ldr	r0, [pc, #560]	; (80032bc <main+0x48c>)
 800308c:	f847 0b04 	str.w	r0, [r7], #4
  sdcp->vmt      = &sdc_vmt;
 8003090:	488b      	ldr	r0, [pc, #556]	; (80032c0 <main+0x490>)
 *
 * @init
 */
static inline void chEvtObjectInit(event_source_t *esp) {

  esp->next = (event_listener_t *)esp;
 8003092:	606f      	str	r7, [r5, #4]
 8003094:	4f8b      	ldr	r7, [pc, #556]	; (80032c4 <main+0x494>)
  sdcp->errors   = SDC_NO_ERROR;
 8003096:	6343      	str	r3, [r0, #52]	; 0x34
  sdcp->vmt      = &sdc_vmt;
 8003098:	6007      	str	r7, [r0, #0]
  SDCD1.sdmmc   = SDMMC1;
 800309a:	4f8b      	ldr	r7, [pc, #556]	; (80032c8 <main+0x498>)
  SDCD1.thread  = NULL;
 800309c:	63c3      	str	r3, [r0, #60]	; 0x3c
  SDCD1.sdmmc   = SDMMC1;
 800309e:	6407      	str	r7, [r0, #64]	; 0x40
  SDCD1.clkfreq = STM32_SDMMC1CLK;
 80030a0:	4f8a      	ldr	r7, [pc, #552]	; (80032cc <main+0x49c>)
  iqp->q_wrptr   = bp;
 80030a2:	e9c5 4408 	strd	r4, r4, [r5, #32]
  osalEventObjectInit(&sdp->event);
  sdp->state = SD_STOP;
 80030a6:	2401      	movs	r4, #1
 80030a8:	6447      	str	r7, [r0, #68]	; 0x44
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80030aa:	4f74      	ldr	r7, [pc, #464]	; (800327c <main+0x44c>)
  sdcp->state    = BLK_STOP;
 80030ac:	7104      	strb	r4, [r0, #4]
 80030ae:	722c      	strb	r4, [r5, #8]
 80030b0:	700c      	strb	r4, [r1, #0]
  sdcp->capacity = 0;
 80030b2:	e9c0 330a 	strd	r3, r3, [r0, #40]	; 0x28
  SPID1.spi       = SPI1;
 80030b6:	4886      	ldr	r0, [pc, #536]	; (80032d0 <main+0x4a0>)
  spip->config = NULL;
#if SPI_USE_WAIT == TRUE
  spip->thread = NULL;
 80030b8:	e9c1 3301 	strd	r3, r3, [r1, #4]
 80030bc:	61c8      	str	r0, [r1, #28]
  SPID1.rxdmamode = STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
 80030be:	4885      	ldr	r0, [pc, #532]	; (80032d4 <main+0x4a4>)
void chMtxObjectInit(mutex_t *mp) {

  chDbgCheck(mp != NULL);

  queue_init(&mp->queue);
  mp->owner = NULL;
 80030c0:	614b      	str	r3, [r1, #20]
 80030c2:	62c8      	str	r0, [r1, #44]	; 0x2c
  SPID1.txdmamode = STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
 80030c4:	3030      	adds	r0, #48	; 0x30
  SPID1.is_bdma   = false;
 80030c6:	f881 3020 	strb.w	r3, [r1, #32]
  spip->config = NULL;
 80030ca:	6053      	str	r3, [r2, #4]
  spip->thread = NULL;
 80030cc:	6093      	str	r3, [r2, #8]
  SPID1.txdmamode = STM32_DMA_CR_PL(STM32_SPI_SPI1_DMA_PRIORITY) |
 80030ce:	6308      	str	r0, [r1, #48]	; 0x30
 80030d0:	6153      	str	r3, [r2, #20]
  SPID6.spi       = SPI6;
 80030d2:	4881      	ldr	r0, [pc, #516]	; (80032d8 <main+0x4a8>)
  SPID1.tx.dma    = NULL;
 80030d4:	e9c1 3309 	strd	r3, r3, [r1, #36]	; 0x24
 80030d8:	f887 c323 	strb.w	ip, [r7, #803]	; 0x323
  SPID6.is_bdma   = true;
 80030dc:	f882 4020 	strb.w	r4, [r2, #32]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80030e0:	f8c7 e184 	str.w	lr, [r7, #388]	; 0x184
  SPID6.rx.bdma   = NULL;
 80030e4:	6253      	str	r3, [r2, #36]	; 0x24
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 80030e6:	f8c7 e004 	str.w	lr, [r7, #4]
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 80030ea:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
  spip->state = SPI_STOP;
 80030ee:	7014      	strb	r4, [r2, #0]
  SPID6.tx.bdma   = NULL;
 80030f0:	6293      	str	r3, [r2, #40]	; 0x28
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 80030f2:	f887 c356 	strb.w	ip, [r7, #854]	; 0x356
  tqp->next = (thread_t *)tqp;
 80030f6:	f101 0c0c 	add.w	ip, r1, #12
  SPID6.spi       = SPI6;
 80030fa:	61d0      	str	r0, [r2, #28]
    usbp->in_params[i]  = NULL;
 80030fc:	4618      	mov	r0, r3
  SPID6.rxdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 80030fe:	f8c2 902c 	str.w	r9, [r2, #44]	; 0x2c
  SPID6.txdmamode = STM32_BDMA_CR_PL(STM32_SPI_SPI6_DMA_PRIORITY) |
 8003102:	f8c2 8030 	str.w	r8, [r2, #48]	; 0x30
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003106:	f8c7 e188 	str.w	lr, [r7, #392]	; 0x188
  usbp->config       = NULL;
 800310a:	6073      	str	r3, [r6, #4]
 800310c:	f106 0330 	add.w	r3, r6, #48	; 0x30
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003110:	f8c7 e008 	str.w	lr, [r7, #8]
 8003114:	f102 070c 	add.w	r7, r2, #12
  usbp->state        = USB_STOP;
 8003118:	7034      	strb	r4, [r6, #0]
 800311a:	f106 0450 	add.w	r4, r6, #80	; 0x50
  tqp->prev = (thread_t *)tqp;
 800311e:	e9c1 cc03 	strd	ip, ip, [r1, #12]
 8003122:	e9c2 7703 	strd	r7, r7, [r2, #12]
    usbp->in_params[i]  = NULL;
 8003126:	f843 0b04 	str.w	r0, [r3], #4
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800312a:	429c      	cmp	r4, r3
    usbp->out_params[i] = NULL;
 800312c:	61d8      	str	r0, [r3, #28]
  for (i = 0; i < (unsigned)USB_MAX_ENDPOINTS; i++) {
 800312e:	d1fa      	bne.n	8003126 <main+0x2f6>

#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  /* Free running counter mode.*/

  /* Enabling timer clock.*/
  ST_ENABLE_CLOCK();
 8003130:	4a6a      	ldr	r2, [pc, #424]	; (80032dc <main+0x4ac>)
#if ST_LLD_NUM_ALARMS > 3
  STM32_ST_TIM->CCR[3] = 0;
#endif
  STM32_ST_TIM->DIER   = 0;
  STM32_ST_TIM->CR2    = 0;
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 8003132:	f04f 0e01 	mov.w	lr, #1
  usbp->transmitting = 0;
 8003136:	60b0      	str	r0, [r6, #8]
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003138:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  ST_ENABLE_CLOCK();
 800313c:	f8d2 10e8 	ldr.w	r1, [r2, #232]	; 0xe8
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003140:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  ST_ENABLE_STOP();
 8003144:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 800330c <main+0x4dc>
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 8003148:	f642 6cdf 	movw	ip, #11999	; 0x2edf
  ST_ENABLE_CLOCK();
 800314c:	f041 0101 	orr.w	r1, r1, #1
  tqp->next = (thread_t *)tqp;
 8003150:	4c63      	ldr	r4, [pc, #396]	; (80032e0 <main+0x4b0>)
 8003152:	f8c2 10e8 	str.w	r1, [r2, #232]	; 0xe8
 8003156:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
 800315a:	f041 0101 	orr.w	r1, r1, #1
 800315e:	f8c2 1110 	str.w	r1, [r2, #272]	; 0x110
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 8003162:	f104 011c 	add.w	r1, r4, #28
 8003166:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
  ST_ENABLE_STOP();
 800316a:	f8d8 203c 	ldr.w	r2, [r8, #60]	; 0x3c
  ch.vtlist.delta = (sysinterval_t)-1;
 800316e:	6267      	str	r7, [r4, #36]	; 0x24
 8003170:	ea42 020e 	orr.w	r2, r2, lr
 8003174:	f8c8 203c 	str.w	r2, [r8, #60]	; 0x3c
  ch.dbg.trace_buffer.ptr       = &ch.dbg.trace_buffer.buffer[0];
 8003178:	f104 0838 	add.w	r8, r4, #56	; 0x38
  STM32_ST_TIM->PSC    = (ST_CLOCK_SRC / OSAL_ST_FREQUENCY) - 1;
 800317c:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 8003180:	2200      	movs	r2, #0
  STM32_ST_TIM->ARR    = ST_ARR_INIT;
 8003182:	62df      	str	r7, [r3, #44]	; 0x2c
  STM32_ST_TIM->CCMR1  = 0;
 8003184:	6198      	str	r0, [r3, #24]
  tqp->prev = (thread_t *)tqp;
 8003186:	6064      	str	r4, [r4, #4]
  STM32_ST_TIM->CCR[0] = 0;
 8003188:	6358      	str	r0, [r3, #52]	; 0x34
  ch.rlist.prio = NOPRIO;
 800318a:	60a0      	str	r0, [r4, #8]
  STM32_ST_TIM->DIER   = 0;
 800318c:	60d8      	str	r0, [r3, #12]
  ch.rlist.newer = (thread_t *)&ch.rlist;
 800318e:	6124      	str	r4, [r4, #16]
  STM32_ST_TIM->CR2    = 0;
 8003190:	6058      	str	r0, [r3, #4]
  ch.vtlist.lasttime = (systime_t)0;
 8003192:	62a0      	str	r0, [r4, #40]	; 0x28
  ch.dbg.trace_buffer.suspended = (uint16_t)~CH_DBG_TRACE_MASK;
 8003194:	4853      	ldr	r0, [pc, #332]	; (80032e4 <main+0x4b4>)
  ch.rlist.older = (thread_t *)&ch.rlist;
 8003196:	6164      	str	r4, [r4, #20]
 8003198:	e9c4 080c 	strd	r0, r8, [r4, #48]	; 0x30
  STM32_ST_TIM->EGR    = TIM_EGR_UG;
 800319c:	f8c3 e014 	str.w	lr, [r3, #20]
  USBD1.otg       = OTG_FS;
 80031a0:	4851      	ldr	r0, [pc, #324]	; (80032e8 <main+0x4b8>)
  ch.vtlist.next = (virtual_timer_t *)&ch.vtlist;
 80031a2:	61e1      	str	r1, [r4, #28]
  STM32_ST_TIM->CR1    = TIM_CR1_CEN;
 80031a4:	f8c3 e000 	str.w	lr, [r3]
  USBD1.otgparams = &fsparams;
 80031a8:	4b50      	ldr	r3, [pc, #320]	; (80032ec <main+0x4bc>)
  tqp->next = (thread_t *)tqp;
 80031aa:	6024      	str	r4, [r4, #0]
  ch.vtlist.prev = (virtual_timer_t *)&ch.vtlist;
 80031ac:	6221      	str	r1, [r4, #32]
 80031ae:	e9c6 0324 	strd	r0, r3, [r6, #144]	; 0x90
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80031b2:	1cd3      	adds	r3, r2, #3
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80031b4:	3201      	adds	r2, #1
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80031b6:	eb04 1303 	add.w	r3, r4, r3, lsl #4
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80031ba:	2a80      	cmp	r2, #128	; 0x80
    ch.dbg.trace_buffer.buffer[i].type = CH_TRACE_TYPE_UNUSED;
 80031bc:	7a19      	ldrb	r1, [r3, #8]
 80031be:	f36f 0102 	bfc	r1, #0, #3
 80031c2:	7219      	strb	r1, [r3, #8]
  for (i = 0U; i < (unsigned)CH_DBG_TRACE_BUFFER_SIZE; i++) {
 80031c4:	d1f5      	bne.n	80031b2 <main+0x382>
 *
 * @notapi
 */
void _heap_init(void) {

  default_heap.provider = chCoreAllocAlignedWithOffset;
 80031c6:	494a      	ldr	r1, [pc, #296]	; (80032f0 <main+0x4c0>)
             (size >= sizeof(void *)) &&
             (align >= PORT_NATURAL_ALIGN) &&
             MEM_IS_VALID_ALIGNMENT(align));

  mp->next = NULL;
  mp->object_size = size;
 80031c8:	2714      	movs	r7, #20
 80031ca:	4b4a      	ldr	r3, [pc, #296]	; (80032f4 <main+0x4c4>)
  mp->align = align;
 80031cc:	2004      	movs	r0, #4
 80031ce:	f101 020c 	add.w	r2, r1, #12
 80031d2:	f8df c13c 	ldr.w	ip, [pc, #316]	; 8003310 <main+0x4e0>
  mp->object_size = size;
 80031d6:	619f      	str	r7, [r3, #24]
 80031d8:	271c      	movs	r7, #28
 80031da:	f8c1 c000 	str.w	ip, [r1]
/* Module local functions.                                                   */
/*===========================================================================*/

static inline void dyn_list_init(dyn_list_t *dlp) {

  dlp->next = (dyn_element_t *)dlp;
 80031de:	f103 0c10 	add.w	ip, r3, #16
 80031e2:	631f      	str	r7, [r3, #48]	; 0x30
 80031e4:	f103 0744 	add.w	r7, r3, #68	; 0x44
 80031e8:	f8c3 c010 	str.w	ip, [r3, #16]
 80031ec:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 80031f0:	601b      	str	r3, [r3, #0]
  tmp->cumulative = (rttime_t)0;
 80031f2:	4680      	mov	r8, r0
 80031f4:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
 80031f8:	f103 0c40 	add.w	ip, r3, #64	; 0x40
  tqp->prev = (thread_t *)tqp;
 80031fc:	605b      	str	r3, [r3, #4]
 80031fe:	645f      	str	r7, [r3, #68]	; 0x44
  tmp->best       = (rtcnt_t)-1;
 8003200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
  mp->align = align;
 8003204:	61d8      	str	r0, [r3, #28]
 8003206:	6358      	str	r0, [r3, #52]	; 0x34
  tmp->cumulative = (rttime_t)0;
 8003208:	2000      	movs	r0, #0
 800320a:	f8c3 c040 	str.w	ip, [r3, #64]	; 0x40
  tmp->best       = (rtcnt_t)-1;
 800320e:	9700      	str	r7, [sp, #0]
 8003210:	e9c1 2203 	strd	r2, r2, [r1, #12]
 8003214:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8003218:	625a      	str	r2, [r3, #36]	; 0x24
 800321a:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800321e:	63da      	str	r2, [r3, #60]	; 0x3c
  H_NEXT(&default_heap.header) = NULL;
 8003220:	2200      	movs	r2, #0
  H_PAGES(&default_heap.header) = 0;
 8003222:	e9c1 2201 	strd	r2, r2, [r1, #4]
 8003226:	614a      	str	r2, [r1, #20]
  tmp->cumulative = (rttime_t)0;
 8003228:	2100      	movs	r1, #0
 800322a:	609a      	str	r2, [r3, #8]
  mp->next = NULL;
 800322c:	615a      	str	r2, [r3, #20]
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
  ch.tm.offset = (rtcnt_t)0;
 8003230:	f8c4 287c 	str.w	r2, [r4, #2172]	; 0x87c
  tmp->n          = (ucnt_t)0;
 8003234:	9203      	str	r2, [sp, #12]
  tmp->last       = (rtcnt_t)0;
 8003236:	e9cd 2201 	strd	r2, r2, [sp, #4]
  mp->provider = provider;
 800323a:	4a2f      	ldr	r2, [pc, #188]	; (80032f8 <main+0x4c8>)
 800323c:	621a      	str	r2, [r3, #32]
 800323e:	639a      	str	r2, [r3, #56]	; 0x38
  ch_memcore.basemem = __heap_base__;
 8003240:	4b2e      	ldr	r3, [pc, #184]	; (80032fc <main+0x4cc>)
 8003242:	4a2f      	ldr	r2, [pc, #188]	; (8003300 <main+0x4d0>)
 8003244:	601a      	str	r2, [r3, #0]
  ch_memcore.topmem  = __heap_end__;
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <main+0x4d4>)
  tmp->cumulative = (rttime_t)0;
 8003248:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800324c:	605a      	str	r2, [r3, #4]
    chTMStartMeasurementX(&tm);
 800324e:	4668      	mov	r0, sp
 8003250:	f7fd fa3e 	bl	80006d0 <chTMStartMeasurementX>
    chTMStopMeasurementX(&tm);
 8003254:	4668      	mov	r0, sp
 8003256:	f7fd fa13 	bl	8000680 <chTMStopMeasurementX>
  } while (i > 0U);
 800325a:	f1b8 0801 	subs.w	r8, r8, #1
 800325e:	d1f6      	bne.n	800324e <main+0x41e>
  REG_INSERT(tp);
 8003260:	4b29      	ldr	r3, [pc, #164]	; (8003308 <main+0x4d8>)
  tp->prio      = prio;
 8003262:	2780      	movs	r7, #128	; 0x80
  ch.tm.offset = tm.best;
 8003264:	9800      	ldr	r0, [sp, #0]
  tp->refs      = (trefs_t)1;
 8003266:	2201      	movs	r2, #1
  tqp->next = (thread_t *)tqp;
 8003268:	f103 012c 	add.w	r1, r3, #44	; 0x2c
  tp->name      = name;
 800326c:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8003314 <main+0x4e4>
 8003270:	f8c4 087c 	str.w	r0, [r4, #2172]	; 0x87c
  tlp->next = (thread_t *)tlp;
 8003274:	f103 0c28 	add.w	ip, r3, #40	; 0x28
 8003278:	e04e      	b.n	8003318 <main+0x4e8>
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100
 8003280:	40020000 	.word	0x40020000
 8003284:	40020400 	.word	0x40020400
 8003288:	30040000 	.word	0x30040000
 800328c:	e000ed90 	.word	0xe000ed90
 8003290:	e000ed00 	.word	0xe000ed00
 8003294:	0308001b 	.word	0x0308001b
 8003298:	24000008 	.word	0x24000008
 800329c:	24001328 	.word	0x24001328
 80032a0:	24001318 	.word	0x24001318
 80032a4:	24000740 	.word	0x24000740
 80032a8:	24000774 	.word	0x24000774
 80032ac:	240007a8 	.word	0x240007a8
 80032b0:	080005b1 	.word	0x080005b1
 80032b4:	40004800 	.word	0x40004800
 80032b8:	07270e00 	.word	0x07270e00
 80032bc:	080050d4 	.word	0x080050d4
 80032c0:	24000068 	.word	0x24000068
 80032c4:	08004fa4 	.word	0x08004fa4
 80032c8:	52007000 	.word	0x52007000
 80032cc:	02dc6c00 	.word	0x02dc6c00
 80032d0:	40013000 	.word	0x40013000
 80032d4:	00010016 	.word	0x00010016
 80032d8:	58001400 	.word	0x58001400
 80032dc:	58024400 	.word	0x58024400
 80032e0:	24000888 	.word	0x24000888
 80032e4:	0080ffff 	.word	0x0080ffff
 80032e8:	40080000 	.word	0x40080000
 80032ec:	08004f14 	.word	0x08004f14
 80032f0:	24001230 	.word	0x24001230
 80032f4:	24001108 	.word	0x24001108
 80032f8:	08000651 	.word	0x08000651
 80032fc:	24001228 	.word	0x24001228
 8003300:	24001480 	.word	0x24001480
 8003304:	24080000 	.word	0x24080000
 8003308:	240010c0 	.word	0x240010c0
 800330c:	5c001000 	.word	0x5c001000
 8003310:	08000571 	.word	0x08000571
 8003314:	08004e90 	.word	0x08004e90
  REG_INSERT(tp);
 8003318:	6960      	ldr	r0, [r4, #20]
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800331a:	f04f 0920 	mov.w	r9, #32
  tp->flags     = CH_FLAG_MODE_STATIC;
 800331e:	f884 8859 	strb.w	r8, [r4, #2137]	; 0x859
  tp->mtxlist   = NULL;
 8003322:	f8c4 8870 	str.w	r8, [r4, #2160]	; 0x870
  tp->epending  = (eventmask_t)0;
 8003326:	f8c4 886c 	str.w	r8, [r4, #2156]	; 0x86c
  REG_INSERT(tp);
 800332a:	f8c4 4848 	str.w	r4, [r4, #2120]	; 0x848
  tp->prio      = prio;
 800332e:	f8c4 7840 	str.w	r7, [r4, #2112]	; 0x840
  tp->realprio  = prio;
 8003332:	f8c4 7874 	str.w	r7, [r4, #2164]	; 0x874
  tp->refs      = (trefs_t)1;
 8003336:	f884 285a 	strb.w	r2, [r4, #2138]	; 0x85a
  tp->name      = name;
 800333a:	f8c4 e850 	str.w	lr, [r4, #2128]	; 0x850
  REG_INSERT(tp);
 800333e:	f8c4 084c 	str.w	r0, [r4, #2124]	; 0x84c
 8003342:	6103      	str	r3, [r0, #16]
  currp->state = CH_STATE_CURRENT;
 8003344:	f884 2858 	strb.w	r2, [r4, #2136]	; 0x858
  currp->wabase = NULL;
 8003348:	f8c4 8854 	str.w	r8, [r4, #2132]	; 0x854
 800334c:	f8c4 c860 	str.w	ip, [r4, #2144]	; 0x860
  tqp->next = (thread_t *)tqp;
 8003350:	f8c4 1864 	str.w	r1, [r4, #2148]	; 0x864
  tqp->prev = (thread_t *)tqp;
 8003354:	f8c4 1868 	str.w	r1, [r4, #2152]	; 0x868
  currp = _thread_init(&ch.mainthread, (const char *)&ch_debug, NORMALPRIO);
 8003358:	e9c4 3305 	strd	r3, r3, [r4, #20]
 800335c:	f389 8811 	msr	BASEPRI, r9
  __ASM volatile ("cpsie i" : : : "memory");
 8003360:	b662      	cpsie	i
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003362:	4b9d      	ldr	r3, [pc, #628]	; (80035d8 <main+0x7a8>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003364:	f64f 0cff 	movw	ip, #63743	; 0xf8ff
  reg_value  =  (reg_value                                   |
 8003368:	489c      	ldr	r0, [pc, #624]	; (80035dc <main+0x7ac>)
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800336a:	2710      	movs	r7, #16
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800336c:	68d9      	ldr	r1, [r3, #12]
  DWT->LAR = 0xC5ACCE55U;
 800336e:	f8df e2b0 	ldr.w	lr, [pc, #688]	; 8003620 <main+0x7f0>
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003372:	ea01 010c 	and.w	r1, r1, ip
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003376:	f10c 4c60 	add.w	ip, ip, #3758096384	; 0xe0000000
  reg_value  =  (reg_value                                   |
 800337a:	4308      	orrs	r0, r1
 800337c:	f6ac 3c0f 	subw	ip, ip, #2831	; 0xb0f
  DWT->LAR = 0xC5ACCE55U;
 8003380:	4997      	ldr	r1, [pc, #604]	; (80035e0 <main+0x7b0>)
  SCB->AIRCR =  reg_value;
 8003382:	60d8      	str	r0, [r3, #12]
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003384:	f8dc 000c 	ldr.w	r0, [ip, #12]
 8003388:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
 800338c:	f8cc 000c 	str.w	r0, [ip, #12]
  DWT->LAR = 0xC5ACCE55U;
 8003390:	f8c1 efb0 	str.w	lr, [r1, #4016]	; 0xfb0
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003394:	6808      	ldr	r0, [r1, #0]
 8003396:	4310      	orrs	r0, r2
 8003398:	6008      	str	r0, [r1, #0]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339a:	77df      	strb	r7, [r3, #31]
 800339c:	f883 9022 	strb.w	r9, [r3, #34]	; 0x22
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80033a0:	f388 8811 	msr	BASEPRI, r8
  __ASM volatile ("cpsie i" : : : "memory");
 80033a4:	b662      	cpsie	i
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 80033a6:	f389 8811 	msr	BASEPRI, r9
  tp->wabase = tdp->wbase;
 80033aa:	4b8e      	ldr	r3, [pc, #568]	; (80035e4 <main+0x7b4>)
  tp->state     = CH_STATE_WTSTART;
 80033ac:	f04f 0e02 	mov.w	lr, #2
  REG_INSERT(tp);
 80033b0:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033b2:	f103 076c 	add.w	r7, r3, #108	; 0x6c
  REG_INSERT(tp);
 80033b6:	f103 0090 	add.w	r0, r3, #144	; 0x90
  tp->prio      = prio;
 80033ba:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  tlp->next = (thread_t *)tlp;
 80033be:	f103 0cb8 	add.w	ip, r3, #184	; 0xb8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033c2:	f8c3 709c 	str.w	r7, [r3, #156]	; 0x9c
 80033c6:	4f88      	ldr	r7, [pc, #544]	; (80035e8 <main+0x7b8>)
  tp->refs      = (trefs_t)1;
 80033c8:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033cc:	66df      	str	r7, [r3, #108]	; 0x6c
  tp->name      = name;
 80033ce:	4f87      	ldr	r7, [pc, #540]	; (80035ec <main+0x7bc>)
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033d0:	f8c3 8070 	str.w	r8, [r3, #112]	; 0x70
  tp->name      = name;
 80033d4:	f8c3 70a8 	str.w	r7, [r3, #168]	; 0xa8
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033d8:	4f85      	ldr	r7, [pc, #532]	; (80035f0 <main+0x7c0>)
  REG_INSERT(tp);
 80033da:	f8c3 10a4 	str.w	r1, [r3, #164]	; 0xa4
  tp->epending  = (eventmask_t)0;
 80033de:	f8c3 80c4 	str.w	r8, [r3, #196]	; 0xc4
  REG_INSERT(tp);
 80033e2:	f8c3 40a0 	str.w	r4, [r3, #160]	; 0xa0
  tp->wabase = tdp->wbase;
 80033e6:	f8c3 30ac 	str.w	r3, [r3, #172]	; 0xac
  tp->state     = CH_STATE_WTSTART;
 80033ea:	f8a3 e0b0 	strh.w	lr, [r3, #176]	; 0xb0
  PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 80033ee:	f8c3 708c 	str.w	r7, [r3, #140]	; 0x8c
  tp->mtxlist   = NULL;
 80033f2:	e9c3 8232 	strd	r8, r2, [r3, #200]	; 0xc8
  tqp->next = (thread_t *)tqp;
 80033f6:	f103 02bc 	add.w	r2, r3, #188	; 0xbc
  REG_INSERT(tp);
 80033fa:	6108      	str	r0, [r1, #16]
 80033fc:	6160      	str	r0, [r4, #20]
  tqp->prev = (thread_t *)tqp;
 80033fe:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  tqp->next = (thread_t *)tqp;
 8003402:	e9c3 c22e 	strd	ip, r2, [r3, #184]	; 0xb8
  chSchWakeupS(tp, MSG_OK);
 8003406:	f7fd fedb 	bl	80011c0 <chSchWakeupS.constprop.0>
 800340a:	f388 8811 	msr	BASEPRI, r8
 800340e:	f389 8811 	msr	BASEPRI, r9
void sd_lld_start(SerialDriver *sdp, const SerialConfig *config) {

  if (config == NULL)
    config = &default_config;

  if (sdp->state == SD_STOP) {
 8003412:	7a2b      	ldrb	r3, [r5, #8]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d10e      	bne.n	8003436 <main+0x606>
      rccEnableUSART2(true);
    }
#endif
#if STM32_SERIAL_USE_USART3
    if (&SD3 == sdp) {
      rccEnableUSART3(true);
 8003418:	4b76      	ldr	r3, [pc, #472]	; (80035f4 <main+0x7c4>)
 800341a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800341e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8003422:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8003426:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800342a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800342e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
 8003432:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    brr = (uint32_t)(sdp->clock / config->speed);
 8003436:	6daa      	ldr	r2, [r5, #88]	; 0x58
  u->ICR = 0xFFFFFFFFU;
 8003438:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    brr = (uint32_t)(sdp->clock / config->speed);
 800343c:	496e      	ldr	r1, [pc, #440]	; (80035f8 <main+0x7c8>)
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 800343e:	f04f 0840 	mov.w	r8, #64	; 0x40
  USART_TypeDef *u = sdp->usart;
 8003442:	6d6b      	ldr	r3, [r5, #84]	; 0x54
  u->CR3 = config->cr3 | USART_CR3_EIE;
 8003444:	2001      	movs	r0, #1
    brr = (uint32_t)(sdp->clock / config->speed);
 8003446:	fba1 1202 	umull	r1, r2, r1, r2
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800344a:	f240 1e2d 	movw	lr, #301	; 0x12d
    brr = (uint32_t)(sdp->clock / config->speed);
 800344e:	0b11      	lsrs	r1, r2, #12

  osalSysLock();
  osalDbgAssert((sdp->state == SD_STOP) || (sdp->state == SD_READY),
                "invalid state");
  sd_lld_start(sdp, config);
  sdp->state = SD_READY;
 8003450:	2202      	movs	r2, #2
  u->BRR = brr;
 8003452:	60d9      	str	r1, [r3, #12]
  u->CR2 = config->cr2 | USART_CR2_LBDIE;
 8003454:	f8c3 8004 	str.w	r8, [r3, #4]
 8003458:	f04f 0800 	mov.w	r8, #0
  u->CR3 = config->cr3 | USART_CR3_EIE;
 800345c:	6098      	str	r0, [r3, #8]
  u->CR1 = config->cr1 | USART_CR1_UE | USART_CR1_PEIE |
 800345e:	f8c3 e000 	str.w	lr, [r3]
  u->ICR = 0xFFFFFFFFU;
 8003462:	f8c3 c020 	str.w	ip, [r3, #32]
 8003466:	722a      	strb	r2, [r5, #8]
    sdp->rxmask = 0xFF;
 8003468:	f885 c05c 	strb.w	ip, [r5, #92]	; 0x5c
 800346c:	f388 8811 	msr	BASEPRI, r8
  sdup->vmt = &vmt;
 8003470:	4b62      	ldr	r3, [pc, #392]	; (80035fc <main+0x7cc>)
  ibqp->bsize     = size + sizeof (size_t);
 8003472:	f44f 7e82 	mov.w	lr, #260	; 0x104
  ibqp->notify    = infy;
 8003476:	4962      	ldr	r1, [pc, #392]	; (8003600 <main+0x7d0>)
 8003478:	2520      	movs	r5, #32
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 800347a:	f203 498c 	addw	r9, r3, #1164	; 0x48c
 800347e:	469c      	mov	ip, r3
  ibqp->notify    = infy;
 8003480:	63d9      	str	r1, [r3, #60]	; 0x3c
 8003482:	f103 010c 	add.w	r1, r3, #12
  obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 8003486:	f8c3 905c 	str.w	r9, [r3, #92]	; 0x5c
  obqp->notify    = onfy;
 800348a:	f8df 9198 	ldr.w	r9, [pc, #408]	; 8003624 <main+0x7f4>
  sdup->state = SDU_STOP;
 800348e:	7218      	strb	r0, [r3, #8]
 8003490:	f8c3 9074 	str.w	r9, [r3, #116]	; 0x74
  sdup->vmt = &vmt;
 8003494:	f8df 9190 	ldr.w	r9, [pc, #400]	; 8003628 <main+0x7f8>
  ibqp->suspended = suspended;
 8003498:	7518      	strb	r0, [r3, #20]
 800349a:	f84c 9b04 	str.w	r9, [ip], #4
  obqp->suspended = suspended;
 800349e:	f883 004c 	strb.w	r0, [r3, #76]	; 0x4c
  ibqp->brdptr    = bp;
 80034a2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80034a6:	60d9      	str	r1, [r3, #12]
  tqp->prev = (thread_t *)tqp;
 80034a8:	6119      	str	r1, [r3, #16]
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80034aa:	f503 7121 	add.w	r1, r3, #644	; 0x284
 80034ae:	f8c3 c004 	str.w	ip, [r3, #4]
  tqp->next = (thread_t *)tqp;
 80034b2:	f103 0c44 	add.w	ip, r3, #68	; 0x44
  ibqp->bcounter  = 0;
 80034b6:	f8c3 8018 	str.w	r8, [r3, #24]
  ibqp->bn        = n;
 80034ba:	62da      	str	r2, [r3, #44]	; 0x2c
  obqp->bcounter  = n;
 80034bc:	651a      	str	r2, [r3, #80]	; 0x50
  obqp->bn        = n;
 80034be:	665a      	str	r2, [r3, #100]	; 0x64
  ibqp->link      = link;
 80034c0:	641b      	str	r3, [r3, #64]	; 0x40
  obqp->link      = link;
 80034c2:	679b      	str	r3, [r3, #120]	; 0x78
  ibqp->buffers   = bp;
 80034c4:	6318      	str	r0, [r3, #48]	; 0x30
  ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
 80034c6:	6259      	str	r1, [r3, #36]	; 0x24
  obqp->buffers   = bp;
 80034c8:	6699      	str	r1, [r3, #104]	; 0x68
  ibqp->bsize     = size + sizeof (size_t);
 80034ca:	f8c3 e028 	str.w	lr, [r3, #40]	; 0x28
  obqp->bsize     = size + sizeof (size_t);
 80034ce:	f8c3 e060 	str.w	lr, [r3, #96]	; 0x60
  ibqp->top       = NULL;
 80034d2:	e9c3 880d 	strd	r8, r8, [r3, #52]	; 0x34
  obqp->top       = NULL;
 80034d6:	e9c3 881b 	strd	r8, r8, [r3, #108]	; 0x6c
  ibqp->bwrptr    = bp;
 80034da:	e9c3 0007 	strd	r0, r0, [r3, #28]
  obqp->bwrptr    = bp;
 80034de:	e9c3 1115 	strd	r1, r1, [r3, #84]	; 0x54
  tqp->prev = (thread_t *)tqp;
 80034e2:	e9c3 cc11 	strd	ip, ip, [r3, #68]	; 0x44
 80034e6:	f385 8811 	msr	BASEPRI, r5
  sdup->config = config;
 80034ea:	4946      	ldr	r1, [pc, #280]	; (8003604 <main+0x7d4>)
  usbp->in_params[config->bulk_in - 1U]   = sdup;
 80034ec:	6333      	str	r3, [r6, #48]	; 0x30
  usbp->out_params[config->bulk_out - 1U] = sdup;
 80034ee:	6533      	str	r3, [r6, #80]	; 0x50
    usbp->in_params[config->int_in - 1U]  = sdup;
 80034f0:	6373      	str	r3, [r6, #52]	; 0x34
  sdup->state = SDU_READY;
 80034f2:	721a      	strb	r2, [r3, #8]
  sdup->config = config;
 80034f4:	f8c3 148c 	str.w	r1, [r3, #1164]	; 0x48c
 80034f8:	f388 8811 	msr	BASEPRI, r8
  /*
   * Activates the USB driver and then the USB bus pull-up on D+.
   * Note, a delay is inserted in order to not have to disconnect the cable
   * after a reset.
   */
  usbDisconnectBus(serusbcfg.usbp);
 80034fc:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
  chThdSleepMilliseconds(1500);
 8003500:	f643 2098 	movw	r0, #15000	; 0x3a98
  usbDisconnectBus(serusbcfg.usbp);
 8003504:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
 8003508:	f043 0302 	orr.w	r3, r3, #2
 800350c:	f8c2 3804 	str.w	r3, [r2, #2052]	; 0x804
  chThdSleepMilliseconds(1500);
 8003510:	f7fe f896 	bl	8001640 <chThdSleep>
 8003514:	f385 8811 	msr	BASEPRI, r5
 8003518:	4b3b      	ldr	r3, [pc, #236]	; (8003608 <main+0x7d8>)
    usbp->epc[i] = NULL;
 800351a:	4642      	mov	r2, r8
  usbp->config = config;
 800351c:	493b      	ldr	r1, [pc, #236]	; (800360c <main+0x7dc>)
 800351e:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8003522:	6071      	str	r1, [r6, #4]
    usbp->epc[i] = NULL;
 8003524:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003528:	4283      	cmp	r3, r0
 800352a:	d1fb      	bne.n	8003524 <main+0x6f4>
  if (usbp->state == USB_STOP) {
 800352c:	7833      	ldrb	r3, [r6, #0]
 800352e:	2b01      	cmp	r3, #1
 8003530:	d07e      	beq.n	8003630 <main+0x800>
  usbp->state = USB_READY;
 8003532:	2202      	movs	r2, #2
 8003534:	2500      	movs	r5, #0
 8003536:	7032      	strb	r2, [r6, #0]
 8003538:	f385 8811 	msr	BASEPRI, r5
  usbStart(serusbcfg.usbp, &usbcfg);
  usbConnectBus(serusbcfg.usbp);
 800353c:	f8d6 1090 	ldr.w	r1, [r6, #144]	; 0x90
 8003540:	2020      	movs	r0, #32
 8003542:	f8d1 3804 	ldr.w	r3, [r1, #2052]	; 0x804
 8003546:	f023 0302 	bic.w	r3, r3, #2
 800354a:	f8c1 3804 	str.w	r3, [r1, #2052]	; 0x804
 800354e:	f380 8811 	msr	BASEPRI, r0
  tp->wabase = (stkalign_t *)wsp;
 8003552:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <main+0x7e0>)
  tp->refs      = (trefs_t)1;
 8003554:	2101      	movs	r1, #1
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003556:	f8df c0d4 	ldr.w	ip, [pc, #212]	; 800362c <main+0x7fc>
  tp->prio      = prio;
 800355a:	2681      	movs	r6, #129	; 0x81
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 800355c:	f8c3 70fc 	str.w	r7, [r3, #252]	; 0xfc
 8003560:	f103 07dc 	add.w	r7, r3, #220	; 0xdc
  tp->refs      = (trefs_t)1;
 8003564:	f883 1122 	strb.w	r1, [r3, #290]	; 0x122
  REG_INSERT(tp);
 8003568:	f503 7080 	add.w	r0, r3, #256	; 0x100
  tp->name      = name;
 800356c:	4929      	ldr	r1, [pc, #164]	; (8003614 <main+0x7e4>)
  tp->state     = CH_STATE_WTSTART;
 800356e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
  tqp->next = (thread_t *)tqp;
 8003572:	f503 7296 	add.w	r2, r3, #300	; 0x12c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003576:	f8c3 710c 	str.w	r7, [r3, #268]	; 0x10c
  tlp->next = (thread_t *)tlp;
 800357a:	f503 7794 	add.w	r7, r3, #296	; 0x128
  tp->name      = name;
 800357e:	f8c3 1118 	str.w	r1, [r3, #280]	; 0x118
  REG_INSERT(tp);
 8003582:	6961      	ldr	r1, [r4, #20]
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003584:	f8c3 50e0 	str.w	r5, [r3, #224]	; 0xe0
  REG_INSERT(tp);
 8003588:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
  tp->wabase = (stkalign_t *)wsp;
 800358c:	f8c3 311c 	str.w	r3, [r3, #284]	; 0x11c
  PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 8003590:	f8c3 c0dc 	str.w	ip, [r3, #220]	; 0xdc
  tp->prio      = prio;
 8003594:	f8c3 6108 	str.w	r6, [r3, #264]	; 0x108
  tp->realprio  = prio;
 8003598:	f8c3 613c 	str.w	r6, [r3, #316]	; 0x13c
  REG_INSERT(tp);
 800359c:	f8c3 1114 	str.w	r1, [r3, #276]	; 0x114
  tp->epending  = (eventmask_t)0;
 80035a0:	e9c3 554d 	strd	r5, r5, [r3, #308]	; 0x134
  REG_INSERT(tp);
 80035a4:	6108      	str	r0, [r1, #16]
  tqp->prev = (thread_t *)tqp;
 80035a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 80035aa:	6160      	str	r0, [r4, #20]
  tqp->next = (thread_t *)tqp;
 80035ac:	e9c3 724a 	strd	r7, r2, [r3, #296]	; 0x128
  chSchWakeupS(tp, MSG_OK);
 80035b0:	f7fd fe06 	bl	80011c0 <chSchWakeupS.constprop.0>
 80035b4:	f385 8811 	msr	BASEPRI, r5
  /*
   * Normal main() thread activity, in this demo it does nothing except
   * sleeping in a loop and check the button state.
   */
  while (1) {
    if (palReadLine(LINE_BUTTON)) {
 80035b8:	4e17      	ldr	r6, [pc, #92]	; (8003618 <main+0x7e8>)
//      test_execute((BaseSequentialStream *)&SD3, &rt_test_suite);
//      test_execute((BaseSequentialStream *)&SD3, &oslib_test_suite);

      chprintf(&SDU1, "Hello world from USB \r\n");
 80035ba:	4d18      	ldr	r5, [pc, #96]	; (800361c <main+0x7ec>)
 80035bc:	4c0f      	ldr	r4, [pc, #60]	; (80035fc <main+0x7cc>)
    if (palReadLine(LINE_BUTTON)) {
 80035be:	6933      	ldr	r3, [r6, #16]
      chprintf(&SDU1, "Hello world from USB \r\n");
 80035c0:	4629      	mov	r1, r5
 80035c2:	4620      	mov	r0, r4
    if (palReadLine(LINE_BUTTON)) {
 80035c4:	049b      	lsls	r3, r3, #18
 80035c6:	d501      	bpl.n	80035cc <main+0x79c>
      chprintf(&SDU1, "Hello world from USB \r\n");
 80035c8:	f7fe f8ca 	bl	8001760 <chprintf.constprop.0>
    }
    chThdSleepMilliseconds(500);
 80035cc:	f241 3088 	movw	r0, #5000	; 0x1388
 80035d0:	f7fe f836 	bl	8001640 <chThdSleep>
  while (1) {
 80035d4:	e7f3      	b.n	80035be <main+0x78e>
 80035d6:	bf00      	nop
 80035d8:	e000ed00 	.word	0xe000ed00
 80035dc:	05fa0300 	.word	0x05fa0300
 80035e0:	e0001000 	.word	0xe0001000
 80035e4:	24001150 	.word	0x24001150
 80035e8:	08000911 	.word	0x08000911
 80035ec:	08004b74 	.word	0x08004b74
 80035f0:	08000391 	.word	0x08000391
 80035f4:	58024400 	.word	0x58024400
 80035f8:	1b4e81b5 	.word	0x1b4e81b5
 80035fc:	240002b0 	.word	0x240002b0
 8003600:	08000f21 	.word	0x08000f21
 8003604:	08004fc8 	.word	0x08004fc8
 8003608:	240007b0 	.word	0x240007b0
 800360c:	08004fd0 	.word	0x08004fd0
 8003610:	24001338 	.word	0x24001338
 8003614:	08004b7c 	.word	0x08004b7c
 8003618:	58020800 	.word	0x58020800
 800361c:	08004b54 	.word	0x08004b54
 8003620:	c5acce55 	.word	0xc5acce55
 8003624:	08001031 	.word	0x08001031
 8003628:	080050fc 	.word	0x080050fc
 800362c:	08001661 	.word	0x08001661
      rccEnableOTG_FS(true);
 8003630:	4b45      	ldr	r3, [pc, #276]	; (8003748 <main+0x918>)
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003632:	2520      	movs	r5, #32
  NVIC->IP[n] = NVIC_PRIORITY_MASK(prio);
 8003634:	f04f 0ce0 	mov.w	ip, #224	; 0xe0
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003638:	f04f 0ec0 	mov.w	lr, #192	; 0xc0
      rccEnableOTG_FS(true);
 800363c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8003640:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003644:	f8c3 10d8 	str.w	r1, [r3, #216]	; 0xd8
 8003648:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
 800364c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003650:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
 8003654:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
      rccResetOTG_FS();
 8003658:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
 800365c:	f041 6100 	orr.w	r1, r1, #134217728	; 0x8000000
 8003660:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
 8003664:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 8003668:	4938      	ldr	r1, [pc, #224]	; (800374c <main+0x91c>)
 800366a:	f020 6000 	bic.w	r0, r0, #134217728	; 0x8000000
 800366e:	f8c3 0080 	str.w	r0, [r3, #128]	; 0x80
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 8003672:	4837      	ldr	r0, [pc, #220]	; (8003750 <main+0x920>)
      rccResetOTG_FS();
 8003674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    otgp->GCCFG = GCCFG_INIT_VALUE;
 8003678:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800367c:	f881 c365 	strb.w	ip, [r1, #869]	; 0x365
  NVIC->ICPR[n >> 5U] = 1U << (n & 0x1FU);
 8003680:	f8c1 518c 	str.w	r5, [r1, #396]	; 0x18c
  NVIC->ISER[n >> 5U] = 1U << (n & 0x1FU);
 8003684:	60cd      	str	r5, [r1, #12]
  stm32_otg_t *otgp = usbp->otg;
 8003686:	f8d6 5090 	ldr.w	r5, [r6, #144]	; 0x90
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800368a:	4932      	ldr	r1, [pc, #200]	; (8003754 <main+0x924>)
      otgp->GUSBCFG = GUSBCFG_FDMOD | GUSBCFG_TRDT(TRDT_VALUE_FS) |
 800368c:	60e8      	str	r0, [r5, #12]
      otgp->DCFG = 0x02200000 | DCFG_DSPD_FS11;
 800368e:	f8c5 1800 	str.w	r1, [r5, #2048]	; 0x800
    otgp->PCGCCTL = 0;
 8003692:	f8c5 2e00 	str.w	r2, [r5, #3584]	; 0xe00
    otgp->GOTGCTL = GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8003696:	f8c5 e000 	str.w	lr, [r5]
    otgp->GCCFG = GCCFG_INIT_VALUE;
 800369a:	63ab      	str	r3, [r5, #56]	; 0x38
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 800369c:	692b      	ldr	r3, [r5, #16]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	dafc      	bge.n	800369c <main+0x86c>
  otgp->GRSTCTL = GRSTCTL_CSRST;
 80036a2:	2301      	movs	r3, #1
  chSysPolledDelayX(cycles);
 80036a4:	200c      	movs	r0, #12
 80036a6:	612b      	str	r3, [r5, #16]
 80036a8:	f7fd f922 	bl	80008f0 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_CSRST) != 0)
 80036ac:	692b      	ldr	r3, [r5, #16]
 80036ae:	f013 0801 	ands.w	r8, r3, #1
 80036b2:	d1fb      	bne.n	80036ac <main+0x87c>
 80036b4:	2012      	movs	r0, #18
 80036b6:	f7fd f91b 	bl	80008f0 <chSysPolledDelayX>
  while ((otgp->GRSTCTL & GRSTCTL_AHBIDL) == 0)
 80036ba:	692b      	ldr	r3, [r5, #16]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	dafc      	bge.n	80036ba <main+0x88a>
    otgp->GAHBCFG = 0;
 80036c0:	2200      	movs	r2, #0
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036c2:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
    otg_disable_ep(usbp);
 80036c6:	e9d6 1324 	ldrd	r1, r3, [r6, #144]	; 0x90
    otgp->GAHBCFG = 0;
 80036ca:	60aa      	str	r2, [r5, #8]
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80036cc:	f8d3 e008 	ldr.w	lr, [r3, #8]
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036d0:	eb01 1248 	add.w	r2, r1, r8, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 80036d4:	f108 0901 	add.w	r9, r8, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80036d8:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 80036dc:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 80036de:	2800      	cmp	r0, #0
 80036e0:	da05      	bge.n	80036ee <main+0x8be>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 80036e2:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 80036e6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80036ea:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 80036ee:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80036f2:	2800      	cmp	r0, #0
 80036f4:	da05      	bge.n	8003702 <main+0x8d2>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 80036f6:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 80036fa:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 80036fe:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003702:	45f0      	cmp	r8, lr
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003704:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003708:	46c8      	mov	r8, r9
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 800370a:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 800370e:	d1df      	bne.n	80036d0 <main+0x8a0>
    if (usbp->config->sof_cb == NULL)
 8003710:	6872      	ldr	r2, [r6, #4]
    otgp->DIEPMSK  = 0;
 8003712:	2300      	movs	r3, #0
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003714:	f04f 1001 	mov.w	r0, #65537	; 0x10001
    if (usbp->config->sof_cb == NULL)
 8003718:	68d2      	ldr	r2, [r2, #12]
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 800371a:	f8c1 081c 	str.w	r0, [r1, #2076]	; 0x81c
    otgp->DIEPMSK  = 0;
 800371e:	f8c5 3810 	str.w	r3, [r5, #2064]	; 0x810
    otgp->DOEPMSK  = 0;
 8003722:	f8c5 3814 	str.w	r3, [r5, #2068]	; 0x814
    otgp->DAINTMSK = 0;
 8003726:	f8c5 381c 	str.w	r3, [r5, #2076]	; 0x81c
    if (usbp->config->sof_cb == NULL)
 800372a:	b14a      	cbz	r2, 8003740 <main+0x910>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 800372c:	4b0a      	ldr	r3, [pc, #40]	; (8003758 <main+0x928>)
 800372e:	61ab      	str	r3, [r5, #24]
    otgp->GINTSTS  = 0xFFFFFFFF;
 8003730:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003734:	616b      	str	r3, [r5, #20]
    otgp->GAHBCFG |= GAHBCFG_GINTMSK;
 8003736:	68ab      	ldr	r3, [r5, #8]
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	60ab      	str	r3, [r5, #8]
 800373e:	e6f8      	b.n	8003532 <main+0x702>
      otgp->GINTMSK  = GINTMSK_ENUMDNEM | GINTMSK_USBRSTM | GINTMSK_USBSUSPM |
 8003740:	4b06      	ldr	r3, [pc, #24]	; (800375c <main+0x92c>)
 8003742:	61ab      	str	r3, [r5, #24]
 8003744:	e7f4      	b.n	8003730 <main+0x900>
 8003746:	bf00      	nop
 8003748:	58024400 	.word	0x58024400
 800374c:	e000e100 	.word	0xe000e100
 8003750:	40001440 	.word	0x40001440
 8003754:	02200003 	.word	0x02200003
 8003758:	c0303c08 	.word	0xc0303c08
 800375c:	c0303c00 	.word	0xc0303c00

08003760 <SVC_Handler>:
  __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 8003760:	f3ef 8309 	mrs	r3, PSP
    psp += sizeof (struct port_extctx);
 8003764:	3320      	adds	r3, #32
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 8003766:	f383 8809 	msr	PSP, r3
  __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 800376a:	2300      	movs	r3, #0
 800376c:	f383 8811 	msr	BASEPRI, r3
}
 8003770:	4770      	bx	lr
 8003772:	bf00      	nop
	...

08003780 <chThdExit>:
void chThdExit(msg_t msg) {
 8003780:	b538      	push	{r3, r4, r5, lr}
 8003782:	2220      	movs	r2, #32
 8003784:	4603      	mov	r3, r0
 8003786:	f382 8811 	msr	BASEPRI, r2
  thread_t *tp = currp;
 800378a:	4a0f      	ldr	r2, [pc, #60]	; (80037c8 <chThdExit+0x48>)
 800378c:	6994      	ldr	r4, [r2, #24]
  while (list_notempty(&tp->waiting)) {
 800378e:	f104 0528 	add.w	r5, r4, #40	; 0x28
  return (bool)(tlp->next != (thread_t *)tlp);
 8003792:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  tp->u.exitcode = msg;
 8003794:	6263      	str	r3, [r4, #36]	; 0x24
  while (list_notempty(&tp->waiting)) {
 8003796:	42a8      	cmp	r0, r5
 8003798:	d006      	beq.n	80037a8 <chThdExit+0x28>
  tlp->next = tp->queue.next;
 800379a:	6803      	ldr	r3, [r0, #0]
 800379c:	62a3      	str	r3, [r4, #40]	; 0x28
    (void) chSchReadyI(list_remove(&tp->waiting));
 800379e:	f7fc ffd7 	bl	8000750 <chSchReadyI>
  return (bool)(tlp->next != (thread_t *)tlp);
 80037a2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  while (list_notempty(&tp->waiting)) {
 80037a4:	42a8      	cmp	r0, r5
 80037a6:	d1f8      	bne.n	800379a <chThdExit+0x1a>
  if ((tp->refs == (trefs_t)0) &&
 80037a8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80037ac:	b93b      	cbnz	r3, 80037be <chThdExit+0x3e>
 80037ae:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80037b2:	079b      	lsls	r3, r3, #30
 80037b4:	d103      	bne.n	80037be <chThdExit+0x3e>
    REG_REMOVE(tp);
 80037b6:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 80037ba:	6113      	str	r3, [r2, #16]
 80037bc:	615a      	str	r2, [r3, #20]
  chSchGoSleepS(CH_STATE_FINAL);
 80037be:	200f      	movs	r0, #15
}
 80037c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  chSchGoSleepS(CH_STATE_FINAL);
 80037c4:	f7fd bd34 	b.w	8001230 <chSchGoSleepS>
 80037c8:	24000888 	.word	0x24000888
 80037cc:	00000000 	.word	0x00000000

080037d0 <chSchDoReschedule>:
 * @note    Not a user function, it is meant to be invoked by the scheduler
 *          itself or from within the port layer.
 *
 * @special
 */
void chSchDoReschedule(void) {
 80037d0:	b570      	push	{r4, r5, r6, lr}
  thread_t *otp = currp;
 80037d2:	4e15      	ldr	r6, [pc, #84]	; (8003828 <chSchDoReschedule+0x58>)

  /* Picks the first thread from the ready queue and makes it current.*/
  currp = queue_fifo_remove(&ch.rlist.queue);
  currp->state = CH_STATE_CURRENT;
 80037d4:	2001      	movs	r0, #1
  tp->state = CH_STATE_READY;
 80037d6:	2100      	movs	r1, #0
  thread_t *tp = tqp->next;
 80037d8:	6832      	ldr	r2, [r6, #0]
  thread_t *otp = currp;
 80037da:	69b5      	ldr	r5, [r6, #24]
  tqp->next             = tp->queue.next;
 80037dc:	6813      	ldr	r3, [r2, #0]
  tqp->next->queue.prev = (thread_t *)tqp;
 80037de:	605e      	str	r6, [r3, #4]
  tqp->next             = tp->queue.next;
 80037e0:	6033      	str	r3, [r6, #0]
  currp->state = CH_STATE_CURRENT;
 80037e2:	f882 0020 	strb.w	r0, [r2, #32]
  tp->state = CH_STATE_READY;
 80037e6:	f885 1020 	strb.w	r1, [r5, #32]

  /* Handling idle-leave hook.*/
  if (otp->prio == IDLEPRIO) {
 80037ea:	68ac      	ldr	r4, [r5, #8]
  currp = queue_fifo_remove(&ch.rlist.queue);
 80037ec:	61b2      	str	r2, [r6, #24]
  cp = (thread_t *)&ch.rlist.queue;
 80037ee:	e000      	b.n	80037f2 <chSchDoReschedule+0x22>
 80037f0:	681b      	ldr	r3, [r3, #0]
  } while (cp->prio > tp->prio);
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	4294      	cmp	r4, r2
 80037f6:	d3fb      	bcc.n	80037f0 <chSchDoReschedule+0x20>
  tp->queue.prev             = cp->queue.prev;
 80037f8:	685a      	ldr	r2, [r3, #4]
  if ((ch.dbg.trace_buffer.suspended & CH_DBG_TRACE_MASK_SWITCH) == 0U) {
 80037fa:	8e31      	ldrh	r1, [r6, #48]	; 0x30
 80037fc:	e9c5 3200 	strd	r3, r2, [r5]
  tp->queue.prev->queue.next = tp;
 8003800:	6015      	str	r5, [r2, #0]
  cp->queue.prev             = tp;
 8003802:	605d      	str	r5, [r3, #4]
 8003804:	07cb      	lsls	r3, r1, #31
 8003806:	d505      	bpl.n	8003814 <chSchDoReschedule+0x44>
     ahead of its peers.*/
  otp = chSchReadyAheadI(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(currp, otp);
 8003808:	4629      	mov	r1, r5
 800380a:	69b0      	ldr	r0, [r6, #24]
}
 800380c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8003810:	f7fc bdb6 	b.w	8000380 <_port_switch>
 8003814:	4628      	mov	r0, r5
 8003816:	f7fd f82b 	bl	8000870 <_trace_switch.part.0>
 800381a:	4629      	mov	r1, r5
 800381c:	69b0      	ldr	r0, [r6, #24]
}
 800381e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  chSysSwitch(currp, otp);
 8003822:	f7fc bdad 	b.w	8000380 <_port_switch>
 8003826:	bf00      	nop
 8003828:	24000888 	.word	0x24000888
 800382c:	00000000 	.word	0x00000000

08003830 <__early_init>:
  rccResetAHB4(STM32_GPIO_EN_MASK);
 8003830:	4ab6      	ldr	r2, [pc, #728]	; (8003b0c <__early_init+0x2dc>)
  gpiop->OTYPER  = config->otyper;
 8003832:	2300      	movs	r3, #0
 8003834:	48b6      	ldr	r0, [pc, #728]	; (8003b10 <__early_init+0x2e0>)
  gpiop->ODR     = config->odr;
 8003836:	f64f 71ff 	movw	r1, #65535	; 0xffff
void __early_init(void) {
 800383a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  rccResetAHB4(STM32_GPIO_EN_MASK);
 800383e:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
 8003842:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8003846:	4cb3      	ldr	r4, [pc, #716]	; (8003b14 <__early_init+0x2e4>)
  gpiop->ODR     = config->odr;
 8003848:	f64b 76fe 	movw	r6, #49150	; 0xbffe
  rccResetAHB4(STM32_GPIO_EN_MASK);
 800384c:	433d      	orrs	r5, r7
  gpiop->OSPEEDR = config->ospeedr;
 800384e:	f8df 8320 	ldr.w	r8, [pc, #800]	; 8003b70 <__early_init+0x340>
  gpiop->PUPDR   = config->pupdr;
 8003852:	f8df e320 	ldr.w	lr, [pc, #800]	; 8003b74 <__early_init+0x344>
  rccResetAHB4(STM32_GPIO_EN_MASK);
 8003856:	f8c2 5088 	str.w	r5, [r2, #136]	; 0x88
 800385a:	f8d2 5088 	ldr.w	r5, [r2, #136]	; 0x88
  gpiop->PUPDR   = config->pupdr;
 800385e:	f8df 9318 	ldr.w	r9, [pc, #792]	; 8003b78 <__early_init+0x348>
  rccResetAHB4(STM32_GPIO_EN_MASK);
 8003862:	402c      	ands	r4, r5
  gpiop->AFRH    = config->afrh;
 8003864:	f44f 0530 	mov.w	r5, #11534336	; 0xb00000
  rccResetAHB4(STM32_GPIO_EN_MASK);
 8003868:	f8c2 4088 	str.w	r4, [r2, #136]	; 0x88
 800386c:	f8d2 4088 	ldr.w	r4, [r2, #136]	; 0x88
  rccEnableAHB4(STM32_GPIO_EN_MASK, true);
 8003870:	f8d2 40e0 	ldr.w	r4, [r2, #224]	; 0xe0
 8003874:	433c      	orrs	r4, r7
 8003876:	f8c2 40e0 	str.w	r4, [r2, #224]	; 0xe0
 800387a:	f8d2 4108 	ldr.w	r4, [r2, #264]	; 0x108
 800387e:	433c      	orrs	r4, r7
  gpiop->AFRL    = config->afrl;
 8003880:	4fa5      	ldr	r7, [pc, #660]	; (8003b18 <__early_init+0x2e8>)
  rccEnableAHB4(STM32_GPIO_EN_MASK, true);
 8003882:	f8c2 4108 	str.w	r4, [r2, #264]	; 0x108
  gpiop->OSPEEDR = config->ospeedr;
 8003886:	f640 740c 	movw	r4, #3852	; 0xf0c
  rccEnableAHB4(STM32_GPIO_EN_MASK, true);
 800388a:	f8d2 c108 	ldr.w	ip, [r2, #264]	; 0x108
  gpiop->MODER   = config->moder;
 800388e:	f640 2c08 	movw	ip, #2568	; 0xa08
  gpiop->OTYPER  = config->otyper;
 8003892:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003894:	f8c0 8008 	str.w	r8, [r0, #8]
  gpiop->OTYPER  = config->otyper;
 8003898:	f44f 6880 	mov.w	r8, #1024	; 0x400
  gpiop->PUPDR   = config->pupdr;
 800389c:	f8c0 e00c 	str.w	lr, [r0, #12]
  gpiop->AFRH    = config->afrh;
 80038a0:	f8df e2d8 	ldr.w	lr, [pc, #728]	; 8003b7c <__early_init+0x34c>
  gpiop->ODR     = config->odr;
 80038a4:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80038a6:	6207      	str	r7, [r0, #32]
  gpiop->OSPEEDR = config->ospeedr;
 80038a8:	f44f 2770 	mov.w	r7, #983040	; 0xf0000
  gpiop->AFRH    = config->afrh;
 80038ac:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80038b0:	f8df e2cc 	ldr.w	lr, [pc, #716]	; 8003b80 <__early_init+0x350>
 80038b4:	f8c0 e000 	str.w	lr, [r0]
  gpiop->OSPEEDR = config->ospeedr;
 80038b8:	f8df e2c8 	ldr.w	lr, [pc, #712]	; 8003b84 <__early_init+0x354>
  gpiop->OTYPER  = config->otyper;
 80038bc:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 80038c0:	f8c0 e408 	str.w	lr, [r0, #1032]	; 0x408
  gpiop->AFRH    = config->afrh;
 80038c4:	f04f 0e77 	mov.w	lr, #119	; 0x77
  gpiop->PUPDR   = config->pupdr;
 80038c8:	f8c0 940c 	str.w	r9, [r0, #1036]	; 0x40c
 80038cc:	f109 493c 	add.w	r9, r9, #3154116608	; 0xbc000000
  gpiop->ODR     = config->odr;
 80038d0:	f8c0 6414 	str.w	r6, [r0, #1044]	; 0x414
  gpiop->MODER   = config->moder;
 80038d4:	f44f 16d0 	mov.w	r6, #1703936	; 0x1a0000
  gpiop->AFRL    = config->afrl;
 80038d8:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
  gpiop->PUPDR   = config->pupdr;
 80038dc:	f2a9 5903 	subw	r9, r9, #1283	; 0x503
  gpiop->AFRH    = config->afrh;
 80038e0:	f8c0 5424 	str.w	r5, [r0, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 80038e4:	4d8d      	ldr	r5, [pc, #564]	; (8003b1c <__early_init+0x2ec>)
 80038e6:	f8c0 5400 	str.w	r5, [r0, #1024]	; 0x400
  gpiop->OSPEEDR = config->ospeedr;
 80038ea:	250c      	movs	r5, #12
  gpiop->OTYPER  = config->otyper;
 80038ec:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  gpiop->OSPEEDR = config->ospeedr;
 80038f0:	f8c0 4808 	str.w	r4, [r0, #2056]	; 0x808
  gpiop->ODR     = config->odr;
 80038f4:	f64f 74fd 	movw	r4, #65533	; 0xfffd
  gpiop->PUPDR   = config->pupdr;
 80038f8:	f8c0 980c 	str.w	r9, [r0, #2060]	; 0x80c
  gpiop->AFRL    = config->afrl;
 80038fc:	f8df 9288 	ldr.w	r9, [pc, #648]	; 8003b88 <__early_init+0x358>
  gpiop->ODR     = config->odr;
 8003900:	f8c0 1814 	str.w	r1, [r0, #2068]	; 0x814
  gpiop->AFRL    = config->afrl;
 8003904:	f8c0 9820 	str.w	r9, [r0, #2080]	; 0x820
  gpiop->AFRH    = config->afrh;
 8003908:	f8c0 3824 	str.w	r3, [r0, #2084]	; 0x824
  gpiop->MODER   = config->moder;
 800390c:	f8c0 c800 	str.w	ip, [r0, #2048]	; 0x800
  gpiop->OTYPER  = config->otyper;
 8003910:	f500 6040 	add.w	r0, r0, #3072	; 0xc00
 8003914:	f8c0 8004 	str.w	r8, [r0, #4]
  gpiop->MODER   = config->moder;
 8003918:	f04f 0c04 	mov.w	ip, #4
  gpiop->PUPDR   = config->pupdr;
 800391c:	f8df 826c 	ldr.w	r8, [pc, #620]	; 8003b8c <__early_init+0x35c>
  gpiop->OSPEEDR = config->ospeedr;
 8003920:	6087      	str	r7, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 8003922:	f04f 3755 	mov.w	r7, #1431655765	; 0x55555555
 8003926:	f8c0 800c 	str.w	r8, [r0, #12]
  gpiop->OSPEEDR = config->ospeedr;
 800392a:	f04f 684c 	mov.w	r8, #213909504	; 0xcc00000
  gpiop->ODR     = config->odr;
 800392e:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 8003930:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 8003932:	f8c0 e024 	str.w	lr, [r0, #36]	; 0x24
  gpiop->PUPDR   = config->pupdr;
 8003936:	f8df e258 	ldr.w	lr, [pc, #600]	; 8003b90 <__early_init+0x360>
  gpiop->MODER   = config->moder;
 800393a:	6006      	str	r6, [r0, #0]
 800393c:	f04f 6608 	mov.w	r6, #142606336	; 0x8800000
  gpiop->OTYPER  = config->otyper;
 8003940:	f8c0 3404 	str.w	r3, [r0, #1028]	; 0x404
  gpiop->OSPEEDR = config->ospeedr;
 8003944:	f8c0 5408 	str.w	r5, [r0, #1032]	; 0x408
  gpiop->PUPDR   = config->pupdr;
 8003948:	f8c0 e40c 	str.w	lr, [r0, #1036]	; 0x40c
  gpiop->OSPEEDR = config->ospeedr;
 800394c:	f04f 0e0f 	mov.w	lr, #15
  gpiop->ODR     = config->odr;
 8003950:	f8c0 4414 	str.w	r4, [r0, #1044]	; 0x414
  gpiop->OTYPER  = config->otyper;
 8003954:	4c72      	ldr	r4, [pc, #456]	; (8003b20 <__early_init+0x2f0>)
  gpiop->AFRL    = config->afrl;
 8003956:	f8c0 3420 	str.w	r3, [r0, #1056]	; 0x420
  gpiop->PUPDR   = config->pupdr;
 800395a:	4d72      	ldr	r5, [pc, #456]	; (8003b24 <__early_init+0x2f4>)
  gpiop->AFRH    = config->afrh;
 800395c:	f8c0 3424 	str.w	r3, [r0, #1060]	; 0x424
  gpiop->MODER   = config->moder;
 8003960:	f8c0 c400 	str.w	ip, [r0, #1024]	; 0x400
  gpiop->OTYPER  = config->otyper;
 8003964:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 8003966:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 8003968:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 800396a:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 800396c:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 800396e:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 8003970:	6023      	str	r3, [r4, #0]
  gpiop->AFRH    = config->afrh;
 8003972:	4c6d      	ldr	r4, [pc, #436]	; (8003b28 <__early_init+0x2f8>)
  gpiop->OTYPER  = config->otyper;
 8003974:	f8c0 3c04 	str.w	r3, [r0, #3076]	; 0xc04
  gpiop->OSPEEDR = config->ospeedr;
 8003978:	f8c0 8c08 	str.w	r8, [r0, #3080]	; 0xc08
  gpiop->PUPDR   = config->pupdr;
 800397c:	f8c0 5c0c 	str.w	r5, [r0, #3084]	; 0xc0c
  gpiop->ODR     = config->odr;
 8003980:	f8c0 1c14 	str.w	r1, [r0, #3092]	; 0xc14
  gpiop->AFRL    = config->afrl;
 8003984:	f8c0 3c20 	str.w	r3, [r0, #3104]	; 0xc20
  gpiop->AFRH    = config->afrh;
 8003988:	f8c0 4c24 	str.w	r4, [r0, #3108]	; 0xc24
  gpiop->MODER   = config->moder;
 800398c:	f8c0 6c00 	str.w	r6, [r0, #3072]	; 0xc00
  gpiop->OTYPER  = config->otyper;
 8003990:	4e66      	ldr	r6, [pc, #408]	; (8003b2c <__early_init+0x2fc>)
  gpiop->PUPDR   = config->pupdr;
 8003992:	4867      	ldr	r0, [pc, #412]	; (8003b30 <__early_init+0x300>)
  gpiop->OTYPER  = config->otyper;
 8003994:	4d67      	ldr	r5, [pc, #412]	; (8003b34 <__early_init+0x304>)
 8003996:	4c68      	ldr	r4, [pc, #416]	; (8003b38 <__early_init+0x308>)
 8003998:	6073      	str	r3, [r6, #4]
  gpiop->OSPEEDR = config->ospeedr;
 800399a:	f8c6 e008 	str.w	lr, [r6, #8]
  gpiop->PUPDR   = config->pupdr;
 800399e:	60f0      	str	r0, [r6, #12]
  gpiop->OTYPER  = config->otyper;
 80039a0:	4866      	ldr	r0, [pc, #408]	; (8003b3c <__early_init+0x30c>)
  gpiop->ODR     = config->odr;
 80039a2:	6171      	str	r1, [r6, #20]
  gpiop->AFRL    = config->afrl;
 80039a4:	6233      	str	r3, [r6, #32]
  gpiop->AFRH    = config->afrh;
 80039a6:	6273      	str	r3, [r6, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80039a8:	6033      	str	r3, [r6, #0]
  gpiop->OTYPER  = config->otyper;
 80039aa:	606b      	str	r3, [r5, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80039ac:	60ab      	str	r3, [r5, #8]
  gpiop->PUPDR   = config->pupdr;
 80039ae:	60ef      	str	r7, [r5, #12]
  gpiop->ODR     = config->odr;
 80039b0:	6169      	str	r1, [r5, #20]
  gpiop->AFRL    = config->afrl;
 80039b2:	622b      	str	r3, [r5, #32]
  gpiop->AFRH    = config->afrh;
 80039b4:	626b      	str	r3, [r5, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80039b6:	602b      	str	r3, [r5, #0]
  gpiop->OTYPER  = config->otyper;
 80039b8:	6063      	str	r3, [r4, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80039ba:	60a3      	str	r3, [r4, #8]
  gpiop->PUPDR   = config->pupdr;
 80039bc:	60e7      	str	r7, [r4, #12]
  gpiop->ODR     = config->odr;
 80039be:	6161      	str	r1, [r4, #20]
  gpiop->AFRL    = config->afrl;
 80039c0:	6223      	str	r3, [r4, #32]
  gpiop->AFRH    = config->afrh;
 80039c2:	6263      	str	r3, [r4, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80039c4:	6023      	str	r3, [r4, #0]
  gpiop->OTYPER  = config->otyper;
 80039c6:	6043      	str	r3, [r0, #4]
  gpiop->OSPEEDR = config->ospeedr;
 80039c8:	6083      	str	r3, [r0, #8]
  gpiop->PUPDR   = config->pupdr;
 80039ca:	60c7      	str	r7, [r0, #12]
  gpiop->ODR     = config->odr;
 80039cc:	6141      	str	r1, [r0, #20]
  gpiop->AFRL    = config->afrl;
 80039ce:	6203      	str	r3, [r0, #32]
  gpiop->AFRH    = config->afrh;
 80039d0:	6243      	str	r3, [r0, #36]	; 0x24
  gpiop->MODER   = config->moder;
 80039d2:	6003      	str	r3, [r0, #0]
  PWR->CR3   = STM32_PWR_CR3 & 0x000000FFU;
 80039d4:	f500 5000 	add.w	r0, r0, #8192	; 0x2000
  *((volatile uint32_t *)(0x51000000 + 0x1108 + 0x7000)) = 0x00000001U;
#endif

  /* SYSCFG clock enabled here because it is a multi-functional unit shared
     among multiple drivers.*/
  rccEnableAPB4(RCC_APB4ENR_SYSCFGEN, true);
 80039d8:	f8d2 10f4 	ldr.w	r1, [r2, #244]	; 0xf4
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0)
 80039dc:	4603      	mov	r3, r0
  rccEnableAPB4(RCC_APB4ENR_SYSCFGEN, true);
 80039de:	f041 0102 	orr.w	r1, r1, #2
 80039e2:	f8c2 10f4 	str.w	r1, [r2, #244]	; 0xf4
 80039e6:	f8d2 111c 	ldr.w	r1, [r2, #284]	; 0x11c
 80039ea:	f041 0102 	orr.w	r1, r1, #2
 80039ee:	f8c2 111c 	str.w	r1, [r2, #284]	; 0x11c
 80039f2:	f8d2 211c 	ldr.w	r2, [r2, #284]	; 0x11c
  PWR->CR3   = STM32_PWR_CR3 & 0x000000FFU;
 80039f6:	f8c0 c00c 	str.w	ip, [r0, #12]
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0)
 80039fa:	685a      	ldr	r2, [r3, #4]
 80039fc:	0497      	lsls	r7, r2, #18
 80039fe:	d5fc      	bpl.n	80039fa <__early_init+0x1ca>
  PWR->CR1   = STM32_PWR_CR1 | 0xF0000000U;
 8003a00:	4a4f      	ldr	r2, [pc, #316]	; (8003b40 <__early_init+0x310>)
  PWR->CR2   = STM32_PWR_CR2;
 8003a02:	2101      	movs	r1, #1
  PWR->CR3   = STM32_PWR_CR3;   /* Other bits, lower byte is not changed.   */
 8003a04:	4e4f      	ldr	r6, [pc, #316]	; (8003b44 <__early_init+0x314>)
  PWR->CPUCR = STM32_PWR_CPUCR;
 8003a06:	2500      	movs	r5, #0
  PWR->CR1   = STM32_PWR_CR1 | 0xF0000000U;
 8003a08:	601a      	str	r2, [r3, #0]
  PWR->D3CR  = STM32_VOS;
 8003a0a:	f44f 4440 	mov.w	r4, #49152	; 0xc000
  SYSCFG->PWRCR = STM32_ODEN;
 8003a0e:	484e      	ldr	r0, [pc, #312]	; (8003b48 <__early_init+0x318>)
  while ((PWR->D3CR & PWR_D3CR_VOSRDY) == 0)
 8003a10:	4a4e      	ldr	r2, [pc, #312]	; (8003b4c <__early_init+0x31c>)
  PWR->CR2   = STM32_PWR_CR2;
 8003a12:	6099      	str	r1, [r3, #8]
  PWR->CR3   = STM32_PWR_CR3;   /* Other bits, lower byte is not changed.   */
 8003a14:	60de      	str	r6, [r3, #12]
  PWR->CPUCR = STM32_PWR_CPUCR;
 8003a16:	611d      	str	r5, [r3, #16]
  PWR->D3CR  = STM32_VOS;
 8003a18:	619c      	str	r4, [r3, #24]
  SYSCFG->PWRCR = STM32_ODEN;
 8003a1a:	62c1      	str	r1, [r0, #44]	; 0x2c
  while ((PWR->D3CR & PWR_D3CR_VOSRDY) == 0)
 8003a1c:	6993      	ldr	r3, [r2, #24]
 8003a1e:	049e      	lsls	r6, r3, #18
 8003a20:	d5fc      	bpl.n	8003a1c <__early_init+0x1ec>
  PWR->CR1 |= PWR_CR1_DBP;
 8003a22:	6813      	ldr	r3, [r2, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <__early_init+0x2dc>)
  PWR->CR1 |= PWR_CR1_DBP;
 8003a26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a2a:	6013      	str	r3, [r2, #0]
  if ((RCC->BDCR & STM32_RTCSEL_MASK) != STM32_RTCSEL) {
 8003a2c:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a36:	d004      	beq.n	8003a42 <__early_init+0x212>
    RCC->BDCR = RCC_BDCR_BDRST;
 8003a38:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    RCC->BDCR = 0;
 8003a3c:	2300      	movs	r3, #0
    RCC->BDCR = RCC_BDCR_BDRST;
 8003a3e:	670a      	str	r2, [r1, #112]	; 0x70
    RCC->BDCR = 0;
 8003a40:	670b      	str	r3, [r1, #112]	; 0x70
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 8003a42:	4a32      	ldr	r2, [pc, #200]	; (8003b0c <__early_init+0x2dc>)
 8003a44:	6f11      	ldr	r1, [r2, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8003a46:	4613      	mov	r3, r2
  RCC->BDCR |= STM32_LSEDRV | RCC_BDCR_LSEON;
 8003a48:	f041 0119 	orr.w	r1, r1, #25
 8003a4c:	6711      	str	r1, [r2, #112]	; 0x70
  while ((RCC->BDCR & RCC_BDCR_LSERDY) == 0)
 8003a4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a50:	0795      	lsls	r5, r2, #30
 8003a52:	d5fc      	bpl.n	8003a4e <__early_init+0x21e>
  /* Backup domain initialization.*/
  init_bkp_domain();

  /* HSI setup, it enforces the reset situation in order to handle possible
     problems with JTAG probes and re-initializations.*/
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003a54:	681a      	ldr	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003a56:	492d      	ldr	r1, [pc, #180]	; (8003b0c <__early_init+0x2dc>)
  RCC->CR |= RCC_CR_HSION;                  /* Make sure HSI is ON.         */
 8003a58:	f042 0201 	orr.w	r2, r2, #1
 8003a5c:	601a      	str	r2, [r3, #0]
  while (!(RCC->CR & RCC_CR_HSIRDY))
 8003a5e:	680b      	ldr	r3, [r1, #0]
 8003a60:	075c      	lsls	r4, r3, #29
 8003a62:	d5fc      	bpl.n	8003a5e <__early_init+0x22e>
    ;                                       /* Wait until HSI is stable.    */

  /* HSI is selected as new source without touching the other fields in
     CFGR. This is only required when using a debugger than can cause
     restarts.*/
  RCC->CFGR    = 0x00000000U;               /* Reset SW to HSI.             */
 8003a64:	2200      	movs	r2, #0
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <__early_init+0x2dc>)
  RCC->CFGR    = 0x00000000U;               /* Reset SW to HSI.             */
 8003a68:	610a      	str	r2, [r1, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI)
 8003a6a:	691a      	ldr	r2, [r3, #16]
 8003a6c:	f012 0238 	ands.w	r2, r2, #56	; 0x38
 8003a70:	d1fb      	bne.n	8003a6a <__early_init+0x23a>
    ;                                       /* Wait until HSI is selected.  */

  /* Registers cleared to reset values.*/
  RCC->CR      = RCC_CR_HSION;             /* CR Reset value.              */
 8003a72:	2101      	movs	r1, #1
  RCC->HSICFGR   = 0x40000000U;            /* HSICFGR Reset value.         */
 8003a74:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
#if !defined(STM32_ENFORCE_H7_REV_V)
  RCC->CSICFGR   = 0x20000000U;            /* CSICFGR Reset value.         */
 8003a78:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
#endif
  RCC->CSR     = 0x00000000U;              /* CSR reset value.             */
  RCC->PLLCFGR = 0x01FF0000U;              /* PLLCFGR reset value.         */
 8003a7c:	4834      	ldr	r0, [pc, #208]	; (8003b50 <__early_init+0x320>)
  RCC->CR      = RCC_CR_HSION;             /* CR Reset value.              */
 8003a7e:	6019      	str	r1, [r3, #0]
         RCC_CFGR_RTCPRE_VALUE(STM32_RTCPRE_VALUE) |
         STM32_HRTIMSEL | STM32_STOPKERWUCK | STM32_STOPWUCK;
#if STM32_TIMPRE_ENABLE == TRUE
  cfgr |= RCC_CFGR_TIMPRE;
#endif
  RCC->CFGR = cfgr;
 8003a80:	4934      	ldr	r1, [pc, #208]	; (8003b54 <__early_init+0x324>)
  RCC->HSICFGR   = 0x40000000U;            /* HSICFGR Reset value.         */
 8003a82:	605d      	str	r5, [r3, #4]
  RCC->CSICFGR   = 0x20000000U;            /* CSICFGR Reset value.         */
 8003a84:	60dc      	str	r4, [r3, #12]
  RCC->CSR     = 0x00000000U;              /* CSR reset value.             */
 8003a86:	675a      	str	r2, [r3, #116]	; 0x74
  RCC->PLLCFGR = 0x01FF0000U;              /* PLLCFGR reset value.         */
 8003a88:	62d8      	str	r0, [r3, #44]	; 0x2c
  RCC->CFGR = cfgr;
 8003a8a:	6119      	str	r1, [r3, #16]

  /* HSE activation with optional bypass.*/
#if STM32_HSE_ENABLED == TRUE
#if defined(STM32_HSE_BYPASS)
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8003a8c:	681a      	ldr	r2, [r3, #0]
#else
  RCC->CR |= RCC_CR_HSEON;
#endif
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003a8e:	491f      	ldr	r1, [pc, #124]	; (8003b0c <__early_init+0x2dc>)
  RCC->CR |= RCC_CR_HSEON | RCC_CR_HSEBYP;
 8003a90:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
 8003a94:	601a      	str	r2, [r3, #0]
  while ((RCC->CR & RCC_CR_HSERDY) == 0)
 8003a96:	680b      	ldr	r3, [r1, #0]
 8003a98:	0398      	lsls	r0, r3, #14
 8003a9a:	d5fc      	bpl.n	8003a96 <__early_init+0x266>
    ;                           /* Waits until HSE is stable.               */
#endif

  /* CSI activation.*/
#if STM32_CSI_ENABLED == TRUE
  RCC->CR |= RCC_CR_CSION;
 8003a9c:	680b      	ldr	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_CSIRDY) == 0)
 8003a9e:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <__early_init+0x2dc>)
  RCC->CR |= RCC_CR_CSION;
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	600b      	str	r3, [r1, #0]
  while ((RCC->CR & RCC_CR_CSIRDY) == 0)
 8003aa6:	6813      	ldr	r3, [r2, #0]
 8003aa8:	05d9      	lsls	r1, r3, #23
 8003aaa:	d5fc      	bpl.n	8003aa6 <__early_init+0x276>
    ;                           /* Waits until CSI is stable.               */
#endif /* STM32_HSE_ENABLED == TRUE */

  /* LSI activation.*/
#if STM32_LSI_ENABLED == TRUE
  RCC->CSR |= RCC_CSR_LSION;
 8003aac:	6f51      	ldr	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003aae:	4b17      	ldr	r3, [pc, #92]	; (8003b0c <__early_init+0x2dc>)
  RCC->CSR |= RCC_CSR_LSION;
 8003ab0:	f041 0101 	orr.w	r1, r1, #1
 8003ab4:	6751      	str	r1, [r2, #116]	; 0x74
  while ((RCC->CSR & RCC_CSR_LSIRDY) == 0)
 8003ab6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ab8:	0792      	lsls	r2, r2, #30
 8003aba:	d5fc      	bpl.n	8003ab6 <__early_init+0x286>
  {
    uint32_t onmask = 0;
    uint32_t rdymask = 0;
    uint32_t cfgmask = 0;

    RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM3_VALUE(STM32_PLL3_DIVM_VALUE) |
 8003abc:	4926      	ldr	r1, [pc, #152]	; (8003b58 <__early_init+0x328>)
    cfgmask = STM32_PLLCFGR_PLL3RGE | STM32_PLLCFGR_PLL3VCOSEL | RCC_PLLCFGR_PLL3FRACEN |
              STM32_PLLCFGR_PLL2RGE | STM32_PLLCFGR_PLL2VCOSEL | RCC_PLLCFGR_PLL2FRACEN |
              STM32_PLLCFGR_PLL1RGE | STM32_PLLCFGR_PLL1VCOSEL | RCC_PLLCFGR_PLL1FRACEN;

#if STM32_PLL1_ENABLED == TRUE
    RCC->PLL1FRACR = STM32_PLL1_FRACN;
 8003abe:	2200      	movs	r2, #0
    RCC->PLL1DIVR  = STM32_PLL1_DIVR | STM32_PLL1_DIVQ |
 8003ac0:	4d26      	ldr	r5, [pc, #152]	; (8003b5c <__early_init+0x32c>)
    RCC->PLLCKSELR = RCC_PLLCKSELR_DIVM3_VALUE(STM32_PLL3_DIVM_VALUE) |
 8003ac2:	6299      	str	r1, [r3, #40]	; 0x28
#endif
#endif /* STM32_PLL1_ENABLED == TRUE */

#if STM32_PLL2_ENABLED == TRUE
    RCC->PLL2FRACR = STM32_PLL2_FRACN;
    RCC->PLL2DIVR  = STM32_PLL2_DIVR | STM32_PLL2_DIVQ |
 8003ac4:	4c26      	ldr	r4, [pc, #152]	; (8003b60 <__early_init+0x330>)
    cfgmask |= RCC_PLLCFGR_DIVR3EN;
#endif
#endif /* STM32_PLL3_ENABLED == TRUE */

    /* Activating enabled PLLs and waiting for all of them to become ready.*/
    RCC->PLLCFGR = cfgmask & STM32_PLLCFGR_MASK;
 8003ac6:	4927      	ldr	r1, [pc, #156]	; (8003b64 <__early_init+0x334>)
    RCC->PLL3DIVR  = STM32_PLL3_DIVR | STM32_PLL3_DIVQ |
 8003ac8:	4827      	ldr	r0, [pc, #156]	; (8003b68 <__early_init+0x338>)
    RCC->PLL1FRACR = STM32_PLL1_FRACN;
 8003aca:	635a      	str	r2, [r3, #52]	; 0x34
    RCC->PLL1DIVR  = STM32_PLL1_DIVR | STM32_PLL1_DIVQ |
 8003acc:	631d      	str	r5, [r3, #48]	; 0x30
    RCC->PLL2FRACR = STM32_PLL2_FRACN;
 8003ace:	63da      	str	r2, [r3, #60]	; 0x3c
    RCC->PLL2DIVR  = STM32_PLL2_DIVR | STM32_PLL2_DIVQ |
 8003ad0:	639c      	str	r4, [r3, #56]	; 0x38
    RCC->PLL3FRACR = STM32_PLL3_FRACN;
 8003ad2:	645a      	str	r2, [r3, #68]	; 0x44
    RCC->PLL3DIVR  = STM32_PLL3_DIVR | STM32_PLL3_DIVQ |
 8003ad4:	6418      	str	r0, [r3, #64]	; 0x40
    RCC->PLLCFGR = cfgmask & STM32_PLLCFGR_MASK;
 8003ad6:	62d9      	str	r1, [r3, #44]	; 0x2c
    RCC->CR     |= onmask;
 8003ad8:	6819      	ldr	r1, [r3, #0]
    while ((RCC->CR & rdymask) != rdymask)
 8003ada:	4a0c      	ldr	r2, [pc, #48]	; (8003b0c <__early_init+0x2dc>)
    RCC->CR     |= onmask;
 8003adc:	f041 51a8 	orr.w	r1, r1, #352321536	; 0x15000000
 8003ae0:	6019      	str	r1, [r3, #0]
    while ((RCC->CR & rdymask) != rdymask)
 8003ae2:	6813      	ldr	r3, [r2, #0]
 8003ae4:	f003 5328 	and.w	r3, r3, #704643072	; 0x2a000000
 8003ae8:	f1b3 5f28 	cmp.w	r3, #704643072	; 0x2a000000
 8003aec:	d1f9      	bne.n	8003ae2 <__early_init+0x2b2>
  RCC->D3CCIPR  = STM32_SPI6SEL   | STM32_SAI4BSEL    | STM32_SAI4ASEL   |
                  STM32_ADCSEL    | STM32_LPTIM345SEL | STM32_LPTIM2SEL  |
                  STM32_I2C4SEL   | STM32_LPUART1SEL;

  /* Flash setup.*/
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 8003aee:	491f      	ldr	r1, [pc, #124]	; (8003b6c <__early_init+0x33c>)
  RCC->D1CFGR = STM32_D1CPRE  | STM32_D1PPRE3 | STM32_D1HPRE;
 8003af0:	2009      	movs	r0, #9
  RCC->D2CFGR = STM32_D2PPRE2 | STM32_D2PPRE1;
 8003af2:	2300      	movs	r3, #0
  RCC->D1CCIPR  = STM32_CKPERSEL  | STM32_SDMMCSEL    | STM32_QSPISEL    |
 8003af4:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
  RCC->D1CFGR = STM32_D1CPRE  | STM32_D1PPRE3 | STM32_D1HPRE;
 8003af8:	6190      	str	r0, [r2, #24]
  RCC->D2CCIP2R = STM32_LPTIM1SEL | STM32_CECSEL      | STM32_USBSEL     |
 8003afa:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 8003afe:	2031      	movs	r0, #49	; 0x31
               STM32_FLASHBITS;
  while ((FLASH->ACR & FLASH_ACR_LATENCY) !=
 8003b00:	460e      	mov	r6, r1
  RCC->D2CFGR = STM32_D2PPRE2 | STM32_D2PPRE1;
 8003b02:	61d3      	str	r3, [r2, #28]
  RCC->D3CFGR = STM32_D3PPRE4;
 8003b04:	6213      	str	r3, [r2, #32]
  RCC->D1CCIPR  = STM32_CKPERSEL  | STM32_SDMMCSEL    | STM32_QSPISEL    |
 8003b06:	64d5      	str	r5, [r2, #76]	; 0x4c
  RCC->D2CCIP1R = STM32_SWPSEL    | STM32_FDCANSEL    | STM32_DFSDM1SEL  |
 8003b08:	6513      	str	r3, [r2, #80]	; 0x50
 8003b0a:	e043      	b.n	8003b94 <__early_init+0x364>
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	58020000 	.word	0x58020000
 8003b14:	fffff800 	.word	0xfffff800
 8003b18:	b0000bb0 	.word	0xb0000bb0
 8003b1c:	18000081 	.word	0x18000081
 8003b20:	58021400 	.word	0x58021400
 8003b24:	51151555 	.word	0x51151555
 8003b28:	00b0b000 	.word	0x00b0b000
 8003b2c:	58021c00 	.word	0x58021c00
 8003b30:	55555550 	.word	0x55555550
 8003b34:	58022000 	.word	0x58022000
 8003b38:	58022400 	.word	0x58022400
 8003b3c:	58022800 	.word	0x58022800
 8003b40:	f000c000 	.word	0xf000c000
 8003b44:	01000004 	.word	0x01000004
 8003b48:	58000400 	.word	0x58000400
 8003b4c:	58024800 	.word	0x58024800
 8003b50:	01ff0000 	.word	0x01ff0000
 8003b54:	08108800 	.word	0x08108800
 8003b58:	00404042 	.word	0x00404042
 8003b5c:	071303df 	.word	0x071303df
 8003b60:	07074f8f 	.word	0x07074f8f
 8003b64:	01ff0555 	.word	0x01ff0555
 8003b68:	07070f8f 	.word	0x07070f8f
 8003b6c:	52002000 	.word	0x52002000
 8003b70:	ffffc03c 	.word	0xffffc03c
 8003b74:	40005551 	.word	0x40005551
 8003b78:	45555554 	.word	0x45555554
 8003b7c:	000aaa0a 	.word	0x000aaa0a
 8003b80:	aaae8028 	.word	0xaaae8028
 8003b84:	3c0000c3 	.word	0x3c0000c3
 8003b88:	00bb00b0 	.word	0x00bb00b0
 8003b8c:	55405555 	.word	0x55405555
 8003b90:	55555551 	.word	0x55555551
  RCC->D2CCIP2R = STM32_LPTIM1SEL | STM32_CECSEL      | STM32_USBSEL     |
 8003b94:	6554      	str	r4, [r2, #84]	; 0x54
  RCC->D3CCIPR  = STM32_SPI6SEL   | STM32_SAI4BSEL    | STM32_SAI4ASEL   |
 8003b96:	6593      	str	r3, [r2, #88]	; 0x58
  FLASH->ACR = FLASH_ACR_WRHIGHFREQ_1 | FLASH_ACR_WRHIGHFREQ_0 |
 8003b98:	6008      	str	r0, [r1, #0]
  while ((FLASH->ACR & FLASH_ACR_LATENCY) !=
 8003b9a:	6833      	ldr	r3, [r6, #0]
 8003b9c:	f003 030f 	and.w	r3, r3, #15
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d1fa      	bne.n	8003b9a <__early_init+0x36a>
  }

  /* Switching to the configured clock source if it is different
     from HSI.*/
#if STM32_SW != STM32_SW_HSI_CK
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003ba4:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <__early_init+0x3e4>)
 8003ba6:	6911      	ldr	r1, [r2, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 3U))
 8003ba8:	4613      	mov	r3, r2
  RCC->CFGR |= STM32_SW;        /* Switches on the selected clock source.   */
 8003baa:	f041 0103 	orr.w	r1, r1, #3
 8003bae:	6111      	str	r1, [r2, #16]
  while ((RCC->CFGR & RCC_CFGR_SWS) != (STM32_SW << 3U))
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	f002 0238 	and.w	r2, r2, #56	; 0x38
 8003bb6:	2a18      	cmp	r2, #24
 8003bb8:	d1fa      	bne.n	8003bb0 <__early_init+0x380>
                  STM32_UART4SEL  | STM32_USART3SEL | STM32_USART2SEL |
                  STM32_USART1SEL;
#endif

  /* RAM1 2 and 3 clocks enabled.*/
  rccEnableSRAM1(true);
 8003bba:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8003bbe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003bc2:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8003bc6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003bca:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003bce:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003bd2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
  rccEnableSRAM2(true);
 8003bd6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8003bda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bde:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8003be2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003be6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003bea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003bee:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
  rccEnableSRAM3(true);
 8003bf2:	f8d3 20dc 	ldr.w	r2, [r3, #220]	; 0xdc
 8003bf6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003bfa:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
 8003bfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8003c02:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003c06:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
 8003c0a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
}
 8003c0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003c12:	bf00      	nop
 8003c14:	58024400 	.word	0x58024400
	...

08003c20 <Vector198>:
OSAL_IRQ_HANDLER(STM32_SPI6_HANDLER) {
 8003c20:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003c22:	4c08      	ldr	r4, [pc, #32]	; (8003c44 <Vector198+0x24>)
 8003c24:	4620      	mov	r0, r4
 8003c26:	f7fc fe4b 	bl	80008c0 <_trace_isr_enter>
  spi_lld_serve_interrupt(&SPID6);
 8003c2a:	4b07      	ldr	r3, [pc, #28]	; (8003c48 <Vector198+0x28>)
  OSAL_IRQ_EPILOGUE();
 8003c2c:	4620      	mov	r0, r4
  spi_lld_serve_interrupt(&SPID6);
 8003c2e:	69db      	ldr	r3, [r3, #28]
  sr = spip->spi->SR & spip->spi->IER;
 8003c30:	695a      	ldr	r2, [r3, #20]
 8003c32:	6919      	ldr	r1, [r3, #16]
 8003c34:	400a      	ands	r2, r1
  spip->spi->IFCR = sr;
 8003c36:	619a      	str	r2, [r3, #24]
  OSAL_IRQ_EPILOGUE();
 8003c38:	f7fc fe2a 	bl	8000890 <_trace_isr_leave>
}
 8003c3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8003c40:	f7fc bcde 	b.w	8000600 <_port_irq_epilogue>
 8003c44:	08004c2c 	.word	0x08004c2c
 8003c48:	24000774 	.word	0x24000774
 8003c4c:	00000000 	.word	0x00000000

08003c50 <VectorCC>:
OSAL_IRQ_HANDLER(STM32_SPI1_HANDLER) {
 8003c50:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8003c52:	4c08      	ldr	r4, [pc, #32]	; (8003c74 <VectorCC+0x24>)
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fc fe33 	bl	80008c0 <_trace_isr_enter>
  spi_lld_serve_interrupt(&SPID1);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	; (8003c78 <VectorCC+0x28>)
  OSAL_IRQ_EPILOGUE();
 8003c5c:	4620      	mov	r0, r4
  spi_lld_serve_interrupt(&SPID1);
 8003c5e:	69db      	ldr	r3, [r3, #28]
  sr = spip->spi->SR & spip->spi->IER;
 8003c60:	695a      	ldr	r2, [r3, #20]
 8003c62:	6919      	ldr	r1, [r3, #16]
 8003c64:	400a      	ands	r2, r1
  spip->spi->IFCR = sr;
 8003c66:	619a      	str	r2, [r3, #24]
  OSAL_IRQ_EPILOGUE();
 8003c68:	f7fc fe12 	bl	8000890 <_trace_isr_leave>
}
 8003c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 8003c70:	f7fc bcc6 	b.w	8000600 <_port_irq_epilogue>
 8003c74:	08004c08 	.word	0x08004c08
 8003c78:	24000740 	.word	0x24000740
 8003c7c:	00000000 	.word	0x00000000

08003c80 <Vector1D4>:
OSAL_IRQ_HANDLER(STM32_OTG1_HANDLER) {
 8003c80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  stm32_otg_t *otgp = usbp->otg;
 8003c84:	4cb4      	ldr	r4, [pc, #720]	; (8003f58 <Vector1D4+0x2d8>)
  OSAL_IRQ_PROLOGUE();
 8003c86:	48b5      	ldr	r0, [pc, #724]	; (8003f5c <Vector1D4+0x2dc>)
 8003c88:	f7fc fe1a 	bl	80008c0 <_trace_isr_enter>
  stm32_otg_t *otgp = usbp->otg;
 8003c8c:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
  sts  = otgp->GINTSTS;
 8003c90:	6975      	ldr	r5, [r6, #20]
  sts &= otgp->GINTMSK;
 8003c92:	69b3      	ldr	r3, [r6, #24]
 8003c94:	401d      	ands	r5, r3
  if (sts & GINTSTS_USBRST) {
 8003c96:	f415 5880 	ands.w	r8, r5, #4096	; 0x1000
  otgp->GINTSTS = sts;
 8003c9a:	6175      	str	r5, [r6, #20]
  if (sts & GINTSTS_USBRST) {
 8003c9c:	f040 8160 	bne.w	8003f60 <Vector1D4+0x2e0>
  if (sts & GINTSTS_WKUPINT) {
 8003ca0:	2d00      	cmp	r5, #0
 8003ca2:	f2c0 80e6 	blt.w	8003e72 <Vector1D4+0x1f2>
  if (sts & GINTSTS_USBSUSP) {
 8003ca6:	0529      	lsls	r1, r5, #20
 8003ca8:	d539      	bpl.n	8003d1e <Vector1D4+0x9e>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003caa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003cae:	2100      	movs	r1, #0
    otg_disable_ep(usbp);
 8003cb0:	f8d4 7090 	ldr.w	r7, [r4, #144]	; 0x90
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cb4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cb8:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8003cbc:	eb07 1241 	add.w	r2, r7, r1, lsl #5
 8003cc0:	f101 0e01 	add.w	lr, r1, #1
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8003cc4:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cc8:	4613      	mov	r3, r2
    if ((otgp->ie[i].DIEPCTL & DIEPCTL_EPENA) != 0U) {
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	da05      	bge.n	8003cda <Vector1D4+0x5a>
      otgp->ie[i].DIEPCTL |= DIEPCTL_EPDIS;
 8003cce:	f8d2 0900 	ldr.w	r0, [r2, #2304]	; 0x900
 8003cd2:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003cd6:	f8c2 0900 	str.w	r0, [r2, #2304]	; 0x900
    if ((otgp->oe[i].DOEPCTL & DIEPCTL_EPENA) != 0U) {
 8003cda:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8003cde:	2800      	cmp	r0, #0
 8003ce0:	da05      	bge.n	8003cee <Vector1D4+0x6e>
      otgp->oe[i].DOEPCTL |= DIEPCTL_EPDIS;
 8003ce2:	f8d2 0b00 	ldr.w	r0, [r2, #2816]	; 0xb00
 8003ce6:	f040 4080 	orr.w	r0, r0, #1073741824	; 0x40000000
 8003cea:	f8c2 0b00 	str.w	r0, [r2, #2816]	; 0xb00
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cee:	4589      	cmp	r9, r1
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003cf0:	f8c3 c908 	str.w	ip, [r3, #2312]	; 0x908
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cf4:	4671      	mov	r1, lr
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003cf6:	f8c3 cb08 	str.w	ip, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003cfa:	d1df      	bne.n	8003cbc <Vector1D4+0x3c>
  usbp->saved_state = usbp->state;
 8003cfc:	7822      	ldrb	r2, [r4, #0]
  usbp->state       = USB_SUSPENDED;
 8003cfe:	2105      	movs	r1, #5
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003d00:	6863      	ldr	r3, [r4, #4]
  usbp->saved_state = usbp->state;
 8003d02:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  otgp->DAINTMSK = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003d06:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  usbp->state       = USB_SUSPENDED;
 8003d0a:	7021      	strb	r1, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_SUSPEND);
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f8c7 281c 	str.w	r2, [r7, #2076]	; 0x81c
 8003d12:	b113      	cbz	r3, 8003d1a <Vector1D4+0x9a>
 8003d14:	2104      	movs	r1, #4
 8003d16:	4890      	ldr	r0, [pc, #576]	; (8003f58 <Vector1D4+0x2d8>)
 8003d18:	4798      	blx	r3
  usbp->transmitting  = 0;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60a3      	str	r3, [r4, #8]
  if (sts & GINTSTS_ENUMDNE) {
 8003d1e:	04aa      	lsls	r2, r5, #18
 8003d20:	d50c      	bpl.n	8003d3c <Vector1D4+0xbc>
    if ((otgp->DSTS & DSTS_ENUMSPD_MASK) == DSTS_ENUMSPD_HS_480) {
 8003d22:	f8d6 3808 	ldr.w	r3, [r6, #2056]	; 0x808
 8003d26:	f013 0f06 	tst.w	r3, #6
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8003d2a:	68f3      	ldr	r3, [r6, #12]
 8003d2c:	f423 5370 	bic.w	r3, r3, #15360	; 0x3c00
 8003d30:	bf0c      	ite	eq
 8003d32:	f443 5310 	orreq.w	r3, r3, #9216	; 0x2400
      otgp->GUSBCFG = (otgp->GUSBCFG & ~(GUSBCFG_TRDT_MASK)) |
 8003d36:	f443 53a0 	orrne.w	r3, r3, #5120	; 0x1400
 8003d3a:	60f3      	str	r3, [r6, #12]
  if (sts & GINTSTS_SOF) {
 8003d3c:	072b      	lsls	r3, r5, #28
 8003d3e:	d44a      	bmi.n	8003dd6 <Vector1D4+0x156>
  if (sts & GINTSTS_IISOIXFR) {
 8003d40:	02ef      	lsls	r7, r5, #11
 8003d42:	d450      	bmi.n	8003de6 <Vector1D4+0x166>
  if (sts & GINTSTS_IISOOXFR) {
 8003d44:	02a8      	lsls	r0, r5, #10
 8003d46:	f100 80da 	bmi.w	8003efe <Vector1D4+0x27e>
  if ((sts & GINTSTS_RXFLVL) != 0U) {
 8003d4a:	06eb      	lsls	r3, r5, #27
 8003d4c:	f100 80ab 	bmi.w	8003ea6 <Vector1D4+0x226>
  if (sts & GINTSTS_OEPINT) {
 8003d50:	032b      	lsls	r3, r5, #12
  src = otgp->DAINT;
 8003d52:	f8d6 4818 	ldr.w	r4, [r6, #2072]	; 0x818
  if (sts & GINTSTS_OEPINT) {
 8003d56:	d51a      	bpl.n	8003d8e <Vector1D4+0x10e>
    if (src & (1 << 16))
 8003d58:	03e7      	lsls	r7, r4, #15
 8003d5a:	f100 81c3 	bmi.w	80040e4 <Vector1D4+0x464>
    if (src & (1 << 17))
 8003d5e:	03a6      	lsls	r6, r4, #14
 8003d60:	f100 81c6 	bmi.w	80040f0 <Vector1D4+0x470>
    if (src & (1 << 18))
 8003d64:	0360      	lsls	r0, r4, #13
 8003d66:	f100 81c9 	bmi.w	80040fc <Vector1D4+0x47c>
    if (src & (1 << 19))
 8003d6a:	0321      	lsls	r1, r4, #12
 8003d6c:	f100 81cc 	bmi.w	8004108 <Vector1D4+0x488>
    if (src & (1 << 20))
 8003d70:	02e2      	lsls	r2, r4, #11
 8003d72:	f100 81cf 	bmi.w	8004114 <Vector1D4+0x494>
    if (src & (1 << 21))
 8003d76:	02a3      	lsls	r3, r4, #10
 8003d78:	f100 81d2 	bmi.w	8004120 <Vector1D4+0x4a0>
    if (src & (1 << 22))
 8003d7c:	0267      	lsls	r7, r4, #9
 8003d7e:	f100 81d5 	bmi.w	800412c <Vector1D4+0x4ac>
    if (src & (1 << 23))
 8003d82:	0226      	lsls	r6, r4, #8
 8003d84:	f100 81aa 	bmi.w	80040dc <Vector1D4+0x45c>
    if (src & (1 << 24))
 8003d88:	01e0      	lsls	r0, r4, #7
 8003d8a:	f100 816c 	bmi.w	8004066 <Vector1D4+0x3e6>
  if (sts & GINTSTS_IEPINT) {
 8003d8e:	0369      	lsls	r1, r5, #13
 8003d90:	d51a      	bpl.n	8003dc8 <Vector1D4+0x148>
    if (src & (1 << 0))
 8003d92:	07e2      	lsls	r2, r4, #31
 8003d94:	f100 81ea 	bmi.w	800416c <Vector1D4+0x4ec>
    if (src & (1 << 1))
 8003d98:	07a3      	lsls	r3, r4, #30
 8003d9a:	f100 81e3 	bmi.w	8004164 <Vector1D4+0x4e4>
    if (src & (1 << 2))
 8003d9e:	0767      	lsls	r7, r4, #29
 8003da0:	f100 81dc 	bmi.w	800415c <Vector1D4+0x4dc>
    if (src & (1 << 3))
 8003da4:	0726      	lsls	r6, r4, #28
 8003da6:	f100 81d5 	bmi.w	8004154 <Vector1D4+0x4d4>
    if (src & (1 << 4))
 8003daa:	06e5      	lsls	r5, r4, #27
 8003dac:	f100 81ce 	bmi.w	800414c <Vector1D4+0x4cc>
    if (src & (1 << 5))
 8003db0:	06a0      	lsls	r0, r4, #26
 8003db2:	f100 81c7 	bmi.w	8004144 <Vector1D4+0x4c4>
    if (src & (1 << 6))
 8003db6:	0661      	lsls	r1, r4, #25
 8003db8:	f100 81c0 	bmi.w	800413c <Vector1D4+0x4bc>
    if (src & (1 << 7))
 8003dbc:	0622      	lsls	r2, r4, #24
 8003dbe:	f100 81b9 	bmi.w	8004134 <Vector1D4+0x4b4>
    if (src & (1 << 8))
 8003dc2:	05e3      	lsls	r3, r4, #23
 8003dc4:	f100 8156 	bmi.w	8004074 <Vector1D4+0x3f4>
  OSAL_IRQ_EPILOGUE();
 8003dc8:	4864      	ldr	r0, [pc, #400]	; (8003f5c <Vector1D4+0x2dc>)
 8003dca:	f7fc fd61 	bl	8000890 <_trace_isr_leave>
}
 8003dce:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8003dd2:	f7fc bc15 	b.w	8000600 <_port_irq_epilogue>
    _usb_isr_invoke_sof_cb(usbp);
 8003dd6:	6863      	ldr	r3, [r4, #4]
 8003dd8:	68db      	ldr	r3, [r3, #12]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d0b0      	beq.n	8003d40 <Vector1D4+0xc0>
 8003dde:	485e      	ldr	r0, [pc, #376]	; (8003f58 <Vector1D4+0x2d8>)
 8003de0:	4798      	blx	r3
  if (sts & GINTSTS_IISOIXFR) {
 8003de2:	02ef      	lsls	r7, r5, #11
 8003de4:	d5ae      	bpl.n	8003d44 <Vector1D4+0xc4>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003de6:	2100      	movs	r1, #0
  stm32_otg_t *otgp = usbp->otg;
 8003de8:	f8d4 b090 	ldr.w	fp, [r4, #144]	; 0x90
      _usb_isr_invoke_in_cb(usbp, ep);
 8003dec:	f04f 0901 	mov.w	r9, #1
 8003df0:	f8df a164 	ldr.w	sl, [pc, #356]	; 8003f58 <Vector1D4+0x2d8>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003df4:	460f      	mov	r7, r1
 8003df6:	e007      	b.n	8003e08 <Vector1D4+0x188>
 8003df8:	3701      	adds	r7, #1
 8003dfa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003dfe:	b2ff      	uxtb	r7, r7
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	429f      	cmp	r7, r3
 8003e04:	4639      	mov	r1, r7
 8003e06:	d89d      	bhi.n	8003d44 <Vector1D4+0xc4>
 8003e08:	eb0b 1247 	add.w	r2, fp, r7, lsl #5
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003e0c:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e10:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003e14:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003e18:	d1ee      	bne.n	8003df8 <Vector1D4+0x178>
        ((otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA) != 0)) {
 8003e1a:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
    if (((otgp->ie[ep].DIEPCTL & DIEPCTL_EPTYP_MASK) == DIEPCTL_EPTYP_ISO) &&
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	daea      	bge.n	8003df8 <Vector1D4+0x178>
      otgp->ie[ep].DIEPCTL |= (DIEPCTL_EPDIS | DIEPCTL_SNAK);
 8003e22:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e26:	f043 4390 	orr.w	r3, r3, #1207959552	; 0x48000000
 8003e2a:	f8c2 3900 	str.w	r3, [r2, #2304]	; 0x900
      while (otgp->ie[ep].DIEPCTL & DIEPCTL_EPENA)
 8003e2e:	f8d2 3900 	ldr.w	r3, [r2, #2304]	; 0x900
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	dbfb      	blt.n	8003e2e <Vector1D4+0x1ae>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003e36:	0189      	lsls	r1, r1, #6
      otg_txfifo_flush(usbp, ep);
 8003e38:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003e3c:	f041 0120 	orr.w	r1, r1, #32
 8003e40:	6111      	str	r1, [r2, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003e42:	6913      	ldr	r3, [r2, #16]
 8003e44:	0699      	lsls	r1, r3, #26
 8003e46:	d4fc      	bmi.n	8003e42 <Vector1D4+0x1c2>
 8003e48:	2012      	movs	r0, #18
 8003e4a:	f7fc fd51 	bl	80008f0 <chSysPolledDelayX>
      _usb_isr_invoke_in_cb(usbp, ep);
 8003e4e:	8922      	ldrh	r2, [r4, #8]
 8003e50:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 8003e54:	fa09 f307 	lsl.w	r3, r9, r7
 8003e58:	68c9      	ldr	r1, [r1, #12]
 8003e5a:	ea22 0303 	bic.w	r3, r2, r3
 8003e5e:	688a      	ldr	r2, [r1, #8]
 8003e60:	8123      	strh	r3, [r4, #8]
 8003e62:	b112      	cbz	r2, 8003e6a <Vector1D4+0x1ea>
 8003e64:	4639      	mov	r1, r7
 8003e66:	4650      	mov	r0, sl
 8003e68:	4790      	blx	r2
      otg_txfifo_handler(usbp, ep);
 8003e6a:	4638      	mov	r0, r7
 8003e6c:	f7fc fb38 	bl	80004e0 <otg_txfifo_handler.constprop.0>
 8003e70:	e7c2      	b.n	8003df8 <Vector1D4+0x178>
    if (otgp->PCGCCTL & (PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK)) {
 8003e72:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 8003e76:	0798      	lsls	r0, r3, #30
 8003e78:	f040 80ee 	bne.w	8004058 <Vector1D4+0x3d8>
    otgp->DCTL &= ~DCTL_RWUSIG;
 8003e7c:	f8d6 3804 	ldr.w	r3, [r6, #2052]	; 0x804
  usbp->state = usbp->saved_state;
 8003e80:	f894 108c 	ldrb.w	r1, [r4, #140]	; 0x8c
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003e84:	6862      	ldr	r2, [r4, #4]
 8003e86:	f023 0301 	bic.w	r3, r3, #1
  usbp->state = usbp->saved_state;
 8003e8a:	7021      	strb	r1, [r4, #0]
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_WAKEUP);
 8003e8c:	6812      	ldr	r2, [r2, #0]
 8003e8e:	f8c6 3804 	str.w	r3, [r6, #2052]	; 0x804
 8003e92:	2a00      	cmp	r2, #0
 8003e94:	f43f af07 	beq.w	8003ca6 <Vector1D4+0x26>
 8003e98:	2105      	movs	r1, #5
 8003e9a:	482f      	ldr	r0, [pc, #188]	; (8003f58 <Vector1D4+0x2d8>)
 8003e9c:	4790      	blx	r2
  if (sts & GINTSTS_USBSUSP) {
 8003e9e:	0529      	lsls	r1, r5, #20
 8003ea0:	f57f af3d 	bpl.w	8003d1e <Vector1D4+0x9e>
 8003ea4:	e701      	b.n	8003caa <Vector1D4+0x2a>
  sts = usbp->otg->GRXSTSP;
 8003ea6:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8003eaa:	6a0b      	ldr	r3, [r1, #32]
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003eac:	f403 10f0 	and.w	r0, r3, #1966080	; 0x1e0000
  cnt = (sts & GRXSTSP_BCNT_MASK) >> GRXSTSP_BCNT_OFF;
 8003eb0:	f3c3 120a 	ubfx	r2, r3, #4, #11
  ep  = (sts & GRXSTSP_EPNUM_MASK) >> GRXSTSP_EPNUM_OFF;
 8003eb4:	f003 030f 	and.w	r3, r3, #15
  switch (sts & GRXSTSP_PKTSTS_MASK) {
 8003eb8:	f5b0 2f80 	cmp.w	r0, #262144	; 0x40000
 8003ebc:	f000 80e4 	beq.w	8004088 <Vector1D4+0x408>
 8003ec0:	f5b0 2f40 	cmp.w	r0, #786432	; 0xc0000
 8003ec4:	f47f af44 	bne.w	8003d50 <Vector1D4+0xd0>
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0], usbp->epc[ep]->setup_buf,
 8003ec8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	6a18      	ldr	r0, [r3, #32]
  while (i < n) {
 8003ed0:	2a00      	cmp	r2, #0
 8003ed2:	f43f af3d 	beq.w	8003d50 <Vector1D4+0xd0>
      w = *fifop;
 8003ed6:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
  size_t i = 0;
 8003eda:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 8003edc:	079f      	lsls	r7, r3, #30
      *buf++ = (uint8_t)w;
 8003ede:	4601      	mov	r1, r0
    if ((i & 3) == 0) {
 8003ee0:	d101      	bne.n	8003ee6 <Vector1D4+0x266>
      w = *fifop;
 8003ee2:	f8d4 8000 	ldr.w	r8, [r4]
    if (i < max) {
 8003ee6:	2b07      	cmp	r3, #7
    i++;
 8003ee8:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 8003eec:	d804      	bhi.n	8003ef8 <Vector1D4+0x278>
      *buf++ = (uint8_t)w;
 8003eee:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 8003ef2:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 8003ef6:	4608      	mov	r0, r1
  while (i < n) {
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d1ef      	bne.n	8003edc <Vector1D4+0x25c>
 8003efc:	e728      	b.n	8003d50 <Vector1D4+0xd0>
  stm32_otg_t *otgp = usbp->otg;
 8003efe:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003f02:	2700      	movs	r7, #0
      _usb_isr_invoke_out_cb(usbp, ep);
 8003f04:	f04f 0a01 	mov.w	sl, #1
 8003f08:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8003f58 <Vector1D4+0x2d8>
 8003f0c:	e007      	b.n	8003f1e <Vector1D4+0x29e>
  for (ep = 0; ep <= usbp->otgparams->num_endpoints; ep++) {
 8003f0e:	3701      	adds	r7, #1
 8003f10:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8003f14:	b2ff      	uxtb	r7, r7
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	429f      	cmp	r7, r3
 8003f1a:	f63f af16 	bhi.w	8003d4a <Vector1D4+0xca>
 8003f1e:	eb09 1247 	add.w	r2, r9, r7, lsl #5
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003f22:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
 8003f26:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003f2a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f2e:	d1ee      	bne.n	8003f0e <Vector1D4+0x28e>
        ((otgp->oe[ep].DOEPCTL & DOEPCTL_EPENA) != 0)) {
 8003f30:	f8d2 3b00 	ldr.w	r3, [r2, #2816]	; 0xb00
      _usb_isr_invoke_out_cb(usbp, ep);
 8003f34:	eb04 0187 	add.w	r1, r4, r7, lsl #2
 8003f38:	fa0a fc07 	lsl.w	ip, sl, r7
    if (((otgp->oe[ep].DOEPCTL & DOEPCTL_EPTYP_MASK) == DOEPCTL_EPTYP_ISO) &&
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	dae6      	bge.n	8003f0e <Vector1D4+0x28e>
      _usb_isr_invoke_out_cb(usbp, ep);
 8003f40:	68ca      	ldr	r2, [r1, #12]
 8003f42:	4658      	mov	r0, fp
 8003f44:	8963      	ldrh	r3, [r4, #10]
 8003f46:	4639      	mov	r1, r7
 8003f48:	68d2      	ldr	r2, [r2, #12]
 8003f4a:	ea23 030c 	bic.w	r3, r3, ip
 8003f4e:	8163      	strh	r3, [r4, #10]
 8003f50:	2a00      	cmp	r2, #0
 8003f52:	d0dc      	beq.n	8003f0e <Vector1D4+0x28e>
 8003f54:	4790      	blx	r2
 8003f56:	e7da      	b.n	8003f0e <Vector1D4+0x28e>
 8003f58:	240007a8 	.word	0x240007a8
 8003f5c:	08004ce0 	.word	0x08004ce0
  usbp->status        = 0;
 8003f60:	2000      	movs	r0, #0
  usbp->transmitting  = 0;
 8003f62:	4623      	mov	r3, r4
  usbp->state         = USB_READY;
 8003f64:	2502      	movs	r5, #2
 8003f66:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    usbp->epc[i] = NULL;
 8003f6a:	4602      	mov	r2, r0
  usbp->status        = 0;
 8003f6c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
  usbp->transmitting  = 0;
 8003f70:	f843 0f08 	str.w	r0, [r3, #8]!
  usbp->state         = USB_READY;
 8003f74:	7025      	strb	r5, [r4, #0]
    usbp->epc[i] = NULL;
 8003f76:	f843 2f04 	str.w	r2, [r3, #4]!
  for (i = 0; i <= (unsigned)USB_MAX_ENDPOINTS; i++) {
 8003f7a:	4299      	cmp	r1, r3
 8003f7c:	d1fb      	bne.n	8003f76 <Vector1D4+0x2f6>
  otgp->GRSTCTL = GRSTCTL_TXFNUM(fifo) | GRSTCTL_TXFFLSH;
 8003f7e:	2320      	movs	r3, #32
  usbp->ep0state = USB_EP0_STP_WAITING;
 8003f80:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
 8003f84:	6133      	str	r3, [r6, #16]
  while ((otgp->GRSTCTL & GRSTCTL_TXFFLSH) != 0)
 8003f86:	6935      	ldr	r5, [r6, #16]
 8003f88:	f015 0520 	ands.w	r5, r5, #32
 8003f8c:	d1fb      	bne.n	8003f86 <Vector1D4+0x306>
 8003f8e:	2012      	movs	r0, #18
 8003f90:	f7fc fcae 	bl	80008f0 <chSysPolledDelayX>
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003f94:	f8d4 c094 	ldr.w	ip, [r4, #148]	; 0x94
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003f98:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003f9c:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003fa0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003fa4:	f8dc 7008 	ldr.w	r7, [ip, #8]
  otgp->DIEPEMPMSK = 0;
 8003fa8:	f8c6 5834 	str.w	r5, [r6, #2100]	; 0x834
  otgp->DAINTMSK   = DAINTMSK_OEPM(0) | DAINTMSK_IEPM(0);
 8003fac:	f8c6 381c 	str.w	r3, [r6, #2076]	; 0x81c
 8003fb0:	eb06 1345 	add.w	r3, r6, r5, lsl #5
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003fb4:	42bd      	cmp	r5, r7
 8003fb6:	f105 0501 	add.w	r5, r5, #1
    otgp->ie[i].DIEPCTL = DIEPCTL_SNAK;
 8003fba:	f8c3 0900 	str.w	r0, [r3, #2304]	; 0x900
    otgp->oe[i].DOEPCTL = DOEPCTL_SNAK;
 8003fbe:	f8c3 0b00 	str.w	r0, [r3, #2816]	; 0xb00
    otgp->ie[i].DIEPINT = 0xFFFFFFFF;
 8003fc2:	f8c3 1908 	str.w	r1, [r3, #2312]	; 0x908
    otgp->oe[i].DOEPINT = 0xFFFFFFFF;
 8003fc6:	f8c3 1b08 	str.w	r1, [r3, #2824]	; 0xb08
  for (i = 0; i <= usbp->otgparams->num_endpoints; i++) {
 8003fca:	d1f1      	bne.n	8003fb0 <Vector1D4+0x330>
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003fcc:	f8dc 1000 	ldr.w	r1, [ip]
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8003fd0:	2210      	movs	r2, #16
  otg_rxfifo_flush(usbp);
 8003fd2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
  usbp->pmnext = usbp->otgparams->rx_fifo_size;
 8003fd6:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
  otgp->GRXFSIZ = usbp->otgparams->rx_fifo_size;
 8003fda:	f8dc 1000 	ldr.w	r1, [ip]
 8003fde:	6271      	str	r1, [r6, #36]	; 0x24
  otgp->GRSTCTL = GRSTCTL_RXFFLSH;
 8003fe0:	611a      	str	r2, [r3, #16]
  while ((otgp->GRSTCTL & GRSTCTL_RXFFLSH) != 0)
 8003fe2:	691d      	ldr	r5, [r3, #16]
 8003fe4:	f015 0510 	ands.w	r5, r5, #16
 8003fe8:	d1fb      	bne.n	8003fe2 <Vector1D4+0x362>
 8003fea:	2012      	movs	r0, #18
 8003fec:	f7fc fc80 	bl	80008f0 <chSysPolledDelayX>
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003ff0:	f8d6 1800 	ldr.w	r1, [r6, #2048]	; 0x800
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8003ff4:	4a5f      	ldr	r2, [pc, #380]	; (8004174 <Vector1D4+0x4f4>)
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8003ff6:	2009      	movs	r0, #9
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8003ff8:	f421 61fe 	bic.w	r1, r1, #2032	; 0x7f0
  next = usbp->pmnext;
 8003ffc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
  otgp->DCFG = (otgp->DCFG & ~DCFG_DAD_MASK) | DCFG_DAD(0);
 8004000:	f8c6 1800 	str.w	r1, [r6, #2048]	; 0x800
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8004004:	f04f 41c0 	mov.w	r1, #1610612736	; 0x60000000
  otgp->GINTMSK  |= GINTMSK_RXFLVLM | GINTMSK_OEPM  | GINTMSK_IEPM;
 8004008:	69b7      	ldr	r7, [r6, #24]
 800400a:	433a      	orrs	r2, r7
  _usb_isr_invoke_event_cb(usbp, USB_EVENT_RESET);
 800400c:	6867      	ldr	r7, [r4, #4]
 800400e:	683f      	ldr	r7, [r7, #0]
 8004010:	61b2      	str	r2, [r6, #24]
  usbp->pmnext += size;
 8004012:	f103 0210 	add.w	r2, r3, #16
  otgp->DIEPMSK   = DIEPMSK_TOCM    | DIEPMSK_XFRCM;
 8004016:	f8c6 0810 	str.w	r0, [r6, #2064]	; 0x810
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800401a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  otgp->DOEPMSK   = DOEPMSK_STUPM   | DOEPMSK_XFRCM;
 800401e:	f8c6 0814 	str.w	r0, [r6, #2068]	; 0x814
  usbp->pmnext += size;
 8004022:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
  otgp->oe[0].DOEPTSIZ = DOEPTSIZ_STUPCNT(3);
 8004026:	f8c6 1b10 	str.w	r1, [r6, #2832]	; 0xb10
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800402a:	4a53      	ldr	r2, [pc, #332]	; (8004178 <Vector1D4+0x4f8>)
  usbp->epc[0] = &ep0config;
 800402c:	4953      	ldr	r1, [pc, #332]	; (800417c <Vector1D4+0x4fc>)
  otgp->oe[0].DOEPCTL = DOEPCTL_SD0PID | DOEPCTL_USBAEP | DOEPCTL_EPTYP_CTRL |
 800402e:	f8c6 2b00 	str.w	r2, [r6, #2816]	; 0xb00
  usbp->epc[0] = &ep0config;
 8004032:	60e1      	str	r1, [r4, #12]
  otgp->ie[0].DIEPTSIZ = 0;
 8004034:	f8c6 5910 	str.w	r5, [r6, #2320]	; 0x910
  otgp->ie[0].DIEPCTL = DIEPCTL_SD0PID | DIEPCTL_USBAEP | DIEPCTL_EPTYP_CTRL |
 8004038:	f8c6 2900 	str.w	r2, [r6, #2304]	; 0x900
  otgp->DIEPTXF0 = DIEPTXF_INEPTXFD(ep0config.in_maxsize / 4) |
 800403c:	62b3      	str	r3, [r6, #40]	; 0x28
 800403e:	2f00      	cmp	r7, #0
 8004040:	f43f aec2 	beq.w	8003dc8 <Vector1D4+0x148>
 8004044:	4629      	mov	r1, r5
 8004046:	484e      	ldr	r0, [pc, #312]	; (8004180 <Vector1D4+0x500>)
 8004048:	47b8      	blx	r7
  OSAL_IRQ_EPILOGUE();
 800404a:	484e      	ldr	r0, [pc, #312]	; (8004184 <Vector1D4+0x504>)
 800404c:	f7fc fc20 	bl	8000890 <_trace_isr_leave>
}
 8004050:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004054:	f7fc bad4 	b.w	8000600 <_port_irq_epilogue>
      otgp->PCGCCTL &= ~(PCGCCTL_STPPCLK | PCGCCTL_GATEHCLK);
 8004058:	f8d6 3e00 	ldr.w	r3, [r6, #3584]	; 0xe00
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	f8c6 3e00 	str.w	r3, [r6, #3584]	; 0xe00
 8004064:	e70a      	b.n	8003e7c <Vector1D4+0x1fc>
      otg_epout_handler(usbp, 8);
 8004066:	2008      	movs	r0, #8
 8004068:	f7fc fdc2 	bl	8000bf0 <otg_epout_handler.constprop.0>
  if (sts & GINTSTS_IEPINT) {
 800406c:	0369      	lsls	r1, r5, #13
 800406e:	f57f aeab 	bpl.w	8003dc8 <Vector1D4+0x148>
 8004072:	e68e      	b.n	8003d92 <Vector1D4+0x112>
      otg_epin_handler(usbp, 8);
 8004074:	2008      	movs	r0, #8
 8004076:	f7fc fd2b 	bl	8000ad0 <otg_epin_handler.constprop.0>
  OSAL_IRQ_EPILOGUE();
 800407a:	4842      	ldr	r0, [pc, #264]	; (8004184 <Vector1D4+0x504>)
 800407c:	f7fc fc08 	bl	8000890 <_trace_isr_leave>
}
 8004080:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  OSAL_IRQ_EPILOGUE();
 8004084:	f7fc babc 	b.w	8000600 <_port_irq_epilogue>
                            usbp->epc[ep]->out_state->rxbuf,
 8004088:	f103 0a02 	add.w	sl, r3, #2
 800408c:	eb04 038a 	add.w	r3, r4, sl, lsl #2
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
    otg_fifo_read_to_buffer(usbp->otg->FIFO[0],
 8004094:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	eba0 0e09 	sub.w	lr, r0, r9
  while (i < n) {
 800409e:	b1c2      	cbz	r2, 80040d2 <Vector1D4+0x452>
      w = *fifop;
 80040a0:	f501 5c80 	add.w	ip, r1, #4096	; 0x1000
  size_t i = 0;
 80040a4:	2300      	movs	r3, #0
    if ((i & 3) == 0) {
 80040a6:	0798      	lsls	r0, r3, #30
      *buf++ = (uint8_t)w;
 80040a8:	4639      	mov	r1, r7
    if ((i & 3) == 0) {
 80040aa:	d101      	bne.n	80040b0 <Vector1D4+0x430>
      w = *fifop;
 80040ac:	f8dc 8000 	ldr.w	r8, [ip]
    if (i < max) {
 80040b0:	459e      	cmp	lr, r3
    i++;
 80040b2:	f103 0301 	add.w	r3, r3, #1
    if (i < max) {
 80040b6:	d904      	bls.n	80040c2 <Vector1D4+0x442>
      *buf++ = (uint8_t)w;
 80040b8:	f801 8b01 	strb.w	r8, [r1], #1
      w >>= 8;
 80040bc:	ea4f 2818 	mov.w	r8, r8, lsr #8
      *buf++ = (uint8_t)w;
 80040c0:	460f      	mov	r7, r1
  while (i < n) {
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d1ef      	bne.n	80040a6 <Vector1D4+0x426>
 80040c6:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 80040ca:	6863      	ldr	r3, [r4, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	e9d3 9701 	ldrd	r9, r7, [r3, #4]
    usbp->epc[ep]->out_state->rxbuf += cnt;
 80040d2:	4417      	add	r7, r2
    usbp->epc[ep]->out_state->rxcnt += cnt;
 80040d4:	444a      	add	r2, r9
 80040d6:	e9c3 2701 	strd	r2, r7, [r3, #4]
 80040da:	e639      	b.n	8003d50 <Vector1D4+0xd0>
      otg_epout_handler(usbp, 7);
 80040dc:	2007      	movs	r0, #7
 80040de:	f7fc fd87 	bl	8000bf0 <otg_epout_handler.constprop.0>
 80040e2:	e651      	b.n	8003d88 <Vector1D4+0x108>
      otg_epout_handler(usbp, 0);
 80040e4:	2000      	movs	r0, #0
 80040e6:	f7fc fd83 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 17))
 80040ea:	03a6      	lsls	r6, r4, #14
 80040ec:	f57f ae3a 	bpl.w	8003d64 <Vector1D4+0xe4>
      otg_epout_handler(usbp, 1);
 80040f0:	2001      	movs	r0, #1
 80040f2:	f7fc fd7d 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 18))
 80040f6:	0360      	lsls	r0, r4, #13
 80040f8:	f57f ae37 	bpl.w	8003d6a <Vector1D4+0xea>
      otg_epout_handler(usbp, 2);
 80040fc:	2002      	movs	r0, #2
 80040fe:	f7fc fd77 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 19))
 8004102:	0321      	lsls	r1, r4, #12
 8004104:	f57f ae34 	bpl.w	8003d70 <Vector1D4+0xf0>
      otg_epout_handler(usbp, 3);
 8004108:	2003      	movs	r0, #3
 800410a:	f7fc fd71 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 20))
 800410e:	02e2      	lsls	r2, r4, #11
 8004110:	f57f ae31 	bpl.w	8003d76 <Vector1D4+0xf6>
      otg_epout_handler(usbp, 4);
 8004114:	2004      	movs	r0, #4
 8004116:	f7fc fd6b 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 21))
 800411a:	02a3      	lsls	r3, r4, #10
 800411c:	f57f ae2e 	bpl.w	8003d7c <Vector1D4+0xfc>
      otg_epout_handler(usbp, 5);
 8004120:	2005      	movs	r0, #5
 8004122:	f7fc fd65 	bl	8000bf0 <otg_epout_handler.constprop.0>
    if (src & (1 << 22))
 8004126:	0267      	lsls	r7, r4, #9
 8004128:	f57f ae2b 	bpl.w	8003d82 <Vector1D4+0x102>
      otg_epout_handler(usbp, 6);
 800412c:	2006      	movs	r0, #6
 800412e:	f7fc fd5f 	bl	8000bf0 <otg_epout_handler.constprop.0>
 8004132:	e626      	b.n	8003d82 <Vector1D4+0x102>
      otg_epin_handler(usbp, 7);
 8004134:	2007      	movs	r0, #7
 8004136:	f7fc fccb 	bl	8000ad0 <otg_epin_handler.constprop.0>
 800413a:	e642      	b.n	8003dc2 <Vector1D4+0x142>
      otg_epin_handler(usbp, 6);
 800413c:	2006      	movs	r0, #6
 800413e:	f7fc fcc7 	bl	8000ad0 <otg_epin_handler.constprop.0>
 8004142:	e63b      	b.n	8003dbc <Vector1D4+0x13c>
      otg_epin_handler(usbp, 5);
 8004144:	2005      	movs	r0, #5
 8004146:	f7fc fcc3 	bl	8000ad0 <otg_epin_handler.constprop.0>
 800414a:	e634      	b.n	8003db6 <Vector1D4+0x136>
      otg_epin_handler(usbp, 4);
 800414c:	2004      	movs	r0, #4
 800414e:	f7fc fcbf 	bl	8000ad0 <otg_epin_handler.constprop.0>
 8004152:	e62d      	b.n	8003db0 <Vector1D4+0x130>
      otg_epin_handler(usbp, 3);
 8004154:	2003      	movs	r0, #3
 8004156:	f7fc fcbb 	bl	8000ad0 <otg_epin_handler.constprop.0>
 800415a:	e626      	b.n	8003daa <Vector1D4+0x12a>
      otg_epin_handler(usbp, 2);
 800415c:	2002      	movs	r0, #2
 800415e:	f7fc fcb7 	bl	8000ad0 <otg_epin_handler.constprop.0>
 8004162:	e61f      	b.n	8003da4 <Vector1D4+0x124>
      otg_epin_handler(usbp, 1);
 8004164:	2001      	movs	r0, #1
 8004166:	f7fc fcb3 	bl	8000ad0 <otg_epin_handler.constprop.0>
 800416a:	e618      	b.n	8003d9e <Vector1D4+0x11e>
      otg_epin_handler(usbp, 0);
 800416c:	2000      	movs	r0, #0
 800416e:	f7fc fcaf 	bl	8000ad0 <otg_epin_handler.constprop.0>
 8004172:	e611      	b.n	8003d98 <Vector1D4+0x118>
 8004174:	000c0010 	.word	0x000c0010
 8004178:	10008040 	.word	0x10008040
 800417c:	08004ea8 	.word	0x08004ea8
 8004180:	240007a8 	.word	0x240007a8
 8004184:	08004ce0 	.word	0x08004ce0
	...

08004190 <Vector158>:
  OSAL_IRQ_PROLOGUE();
 8004190:	480b      	ldr	r0, [pc, #44]	; (80041c0 <Vector158+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH7_HANDLER) {
 8004192:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004194:	f7fc fb94 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <Vector158+0x34>)
  if (dma.streams[15].func)
 800419a:	480b      	ldr	r0, [pc, #44]	; (80041c8 <Vector158+0x38>)
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800419c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[15].func)
 800419e:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
  flags = (DMA2->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80041a0:	0d89      	lsrs	r1, r1, #22
 80041a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 22U;
 80041a6:	058c      	lsls	r4, r1, #22
 80041a8:	60dc      	str	r4, [r3, #12]
  if (dma.streams[15].func)
 80041aa:	b112      	cbz	r2, 80041b2 <Vector158+0x22>
    dma.streams[15].func(dma.streams[15].param, flags);
 80041ac:	f8d0 0080 	ldr.w	r0, [r0, #128]	; 0x80
 80041b0:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80041b2:	4803      	ldr	r0, [pc, #12]	; (80041c0 <Vector158+0x30>)
 80041b4:	f7fc fb6c 	bl	8000890 <_trace_isr_leave>
}
 80041b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80041bc:	f7fc ba20 	b.w	8000600 <_port_irq_epilogue>
 80041c0:	08004cb0 	.word	0x08004cb0
 80041c4:	40020400 	.word	0x40020400
 80041c8:	2400124c 	.word	0x2400124c
 80041cc:	00000000 	.word	0x00000000

080041d0 <Vector154>:
  OSAL_IRQ_PROLOGUE();
 80041d0:	480b      	ldr	r0, [pc, #44]	; (8004200 <Vector154+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH6_HANDLER) {
 80041d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80041d4:	f7fc fb74 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80041d8:	4b0a      	ldr	r3, [pc, #40]	; (8004204 <Vector154+0x34>)
  if (dma.streams[14].func)
 80041da:	480b      	ldr	r0, [pc, #44]	; (8004208 <Vector154+0x38>)
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80041dc:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[14].func)
 80041de:	6f42      	ldr	r2, [r0, #116]	; 0x74
  flags = (DMA2->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80041e0:	0c09      	lsrs	r1, r1, #16
 80041e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 16U;
 80041e6:	040c      	lsls	r4, r1, #16
 80041e8:	60dc      	str	r4, [r3, #12]
  if (dma.streams[14].func)
 80041ea:	b10a      	cbz	r2, 80041f0 <Vector154+0x20>
    dma.streams[14].func(dma.streams[14].param, flags);
 80041ec:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80041ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80041f0:	4803      	ldr	r0, [pc, #12]	; (8004200 <Vector154+0x30>)
 80041f2:	f7fc fb4d 	bl	8000890 <_trace_isr_leave>
}
 80041f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80041fa:	f7fc ba01 	b.w	8000600 <_port_irq_epilogue>
 80041fe:	bf00      	nop
 8004200:	08004ca4 	.word	0x08004ca4
 8004204:	40020400 	.word	0x40020400
 8004208:	2400124c 	.word	0x2400124c
 800420c:	00000000 	.word	0x00000000

08004210 <Vector150>:
  OSAL_IRQ_PROLOGUE();
 8004210:	480b      	ldr	r0, [pc, #44]	; (8004240 <Vector150+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH5_HANDLER) {
 8004212:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004214:	f7fc fb54 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004218:	4b0a      	ldr	r3, [pc, #40]	; (8004244 <Vector150+0x34>)
  if (dma.streams[13].func)
 800421a:	480b      	ldr	r0, [pc, #44]	; (8004248 <Vector150+0x38>)
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800421c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[13].func)
 800421e:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
  flags = (DMA2->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004220:	0989      	lsrs	r1, r1, #6
 8004222:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 6U;
 8004226:	018c      	lsls	r4, r1, #6
 8004228:	60dc      	str	r4, [r3, #12]
  if (dma.streams[13].func)
 800422a:	b10a      	cbz	r2, 8004230 <Vector150+0x20>
    dma.streams[13].func(dma.streams[13].param, flags);
 800422c:	6f00      	ldr	r0, [r0, #112]	; 0x70
 800422e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004230:	4803      	ldr	r0, [pc, #12]	; (8004240 <Vector150+0x30>)
 8004232:	f7fc fb2d 	bl	8000890 <_trace_isr_leave>
}
 8004236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800423a:	f7fc b9e1 	b.w	8000600 <_port_irq_epilogue>
 800423e:	bf00      	nop
 8004240:	08004c98 	.word	0x08004c98
 8004244:	40020400 	.word	0x40020400
 8004248:	2400124c 	.word	0x2400124c
 800424c:	00000000 	.word	0x00000000

08004250 <Vector130>:
  OSAL_IRQ_PROLOGUE();
 8004250:	480a      	ldr	r0, [pc, #40]	; (800427c <Vector130+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH4_HANDLER) {
 8004252:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004254:	f7fc fb34 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <Vector130+0x30>)
  if (dma.streams[12].func)
 800425a:	480a      	ldr	r0, [pc, #40]	; (8004284 <Vector130+0x34>)
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800425c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[12].func)
 800425e:	6e42      	ldr	r2, [r0, #100]	; 0x64
  flags = (DMA2->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004260:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->HIFCR = flags << 0U;
 8004264:	60d9      	str	r1, [r3, #12]
  if (dma.streams[12].func)
 8004266:	b10a      	cbz	r2, 800426c <Vector130+0x1c>
    dma.streams[12].func(dma.streams[12].param, flags);
 8004268:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800426a:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <Vector130+0x2c>)
 800426e:	f7fc fb0f 	bl	8000890 <_trace_isr_leave>
}
 8004272:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004276:	f7fc b9c3 	b.w	8000600 <_port_irq_epilogue>
 800427a:	bf00      	nop
 800427c:	08004c8c 	.word	0x08004c8c
 8004280:	40020400 	.word	0x40020400
 8004284:	2400124c 	.word	0x2400124c
	...

08004290 <Vector12C>:
  OSAL_IRQ_PROLOGUE();
 8004290:	480b      	ldr	r0, [pc, #44]	; (80042c0 <Vector12C+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH3_HANDLER) {
 8004292:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004294:	f7fc fb14 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004298:	4b0a      	ldr	r3, [pc, #40]	; (80042c4 <Vector12C+0x34>)
  if (dma.streams[11].func)
 800429a:	480b      	ldr	r0, [pc, #44]	; (80042c8 <Vector12C+0x38>)
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800429c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[11].func)
 800429e:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
  flags = (DMA2->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80042a0:	0d89      	lsrs	r1, r1, #22
 80042a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 22U;
 80042a6:	058c      	lsls	r4, r1, #22
 80042a8:	609c      	str	r4, [r3, #8]
  if (dma.streams[11].func)
 80042aa:	b10a      	cbz	r2, 80042b0 <Vector12C+0x20>
    dma.streams[11].func(dma.streams[11].param, flags);
 80042ac:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80042ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80042b0:	4803      	ldr	r0, [pc, #12]	; (80042c0 <Vector12C+0x30>)
 80042b2:	f7fc faed 	bl	8000890 <_trace_isr_leave>
}
 80042b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80042ba:	f7fc b9a1 	b.w	8000600 <_port_irq_epilogue>
 80042be:	bf00      	nop
 80042c0:	08004c80 	.word	0x08004c80
 80042c4:	40020400 	.word	0x40020400
 80042c8:	2400124c 	.word	0x2400124c
 80042cc:	00000000 	.word	0x00000000

080042d0 <Vector128>:
  OSAL_IRQ_PROLOGUE();
 80042d0:	480b      	ldr	r0, [pc, #44]	; (8004300 <Vector128+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH2_HANDLER) {
 80042d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80042d4:	f7fc faf4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80042d8:	4b0a      	ldr	r3, [pc, #40]	; (8004304 <Vector128+0x34>)
  if (dma.streams[10].func)
 80042da:	480b      	ldr	r0, [pc, #44]	; (8004308 <Vector128+0x38>)
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80042dc:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[10].func)
 80042de:	6d42      	ldr	r2, [r0, #84]	; 0x54
  flags = (DMA2->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80042e0:	0c09      	lsrs	r1, r1, #16
 80042e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 16U;
 80042e6:	040c      	lsls	r4, r1, #16
 80042e8:	609c      	str	r4, [r3, #8]
  if (dma.streams[10].func)
 80042ea:	b10a      	cbz	r2, 80042f0 <Vector128+0x20>
    dma.streams[10].func(dma.streams[10].param, flags);
 80042ec:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80042ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80042f0:	4803      	ldr	r0, [pc, #12]	; (8004300 <Vector128+0x30>)
 80042f2:	f7fc facd 	bl	8000890 <_trace_isr_leave>
}
 80042f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80042fa:	f7fc b981 	b.w	8000600 <_port_irq_epilogue>
 80042fe:	bf00      	nop
 8004300:	08004c74 	.word	0x08004c74
 8004304:	40020400 	.word	0x40020400
 8004308:	2400124c 	.word	0x2400124c
 800430c:	00000000 	.word	0x00000000

08004310 <Vector124>:
  OSAL_IRQ_PROLOGUE();
 8004310:	480b      	ldr	r0, [pc, #44]	; (8004340 <Vector124+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH1_HANDLER) {
 8004312:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004314:	f7fc fad4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004318:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <Vector124+0x34>)
  if (dma.streams[9].func)
 800431a:	480b      	ldr	r0, [pc, #44]	; (8004348 <Vector124+0x38>)
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800431c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[9].func)
 800431e:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
  flags = (DMA2->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004320:	0989      	lsrs	r1, r1, #6
 8004322:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 6U;
 8004326:	018c      	lsls	r4, r1, #6
 8004328:	609c      	str	r4, [r3, #8]
  if (dma.streams[9].func)
 800432a:	b10a      	cbz	r2, 8004330 <Vector124+0x20>
    dma.streams[9].func(dma.streams[9].param, flags);
 800432c:	6d00      	ldr	r0, [r0, #80]	; 0x50
 800432e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004330:	4803      	ldr	r0, [pc, #12]	; (8004340 <Vector124+0x30>)
 8004332:	f7fc faad 	bl	8000890 <_trace_isr_leave>
}
 8004336:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800433a:	f7fc b961 	b.w	8000600 <_port_irq_epilogue>
 800433e:	bf00      	nop
 8004340:	08004c68 	.word	0x08004c68
 8004344:	40020400 	.word	0x40020400
 8004348:	2400124c 	.word	0x2400124c
 800434c:	00000000 	.word	0x00000000

08004350 <Vector120>:
  OSAL_IRQ_PROLOGUE();
 8004350:	480a      	ldr	r0, [pc, #40]	; (800437c <Vector120+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA2_CH0_HANDLER) {
 8004352:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004354:	f7fc fab4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <Vector120+0x30>)
  if (dma.streams[8].func)
 800435a:	480a      	ldr	r0, [pc, #40]	; (8004384 <Vector120+0x34>)
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800435c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[8].func)
 800435e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  flags = (DMA2->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004360:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA2->LIFCR = flags << 0U;
 8004364:	6099      	str	r1, [r3, #8]
  if (dma.streams[8].func)
 8004366:	b10a      	cbz	r2, 800436c <Vector120+0x1c>
    dma.streams[8].func(dma.streams[8].param, flags);
 8004368:	6c80      	ldr	r0, [r0, #72]	; 0x48
 800436a:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800436c:	4803      	ldr	r0, [pc, #12]	; (800437c <Vector120+0x2c>)
 800436e:	f7fc fa8f 	bl	8000890 <_trace_isr_leave>
}
 8004372:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004376:	f7fc b943 	b.w	8000600 <_port_irq_epilogue>
 800437a:	bf00      	nop
 800437c:	08004c5c 	.word	0x08004c5c
 8004380:	40020400 	.word	0x40020400
 8004384:	2400124c 	.word	0x2400124c
	...

08004390 <VectorFC>:
  OSAL_IRQ_PROLOGUE();
 8004390:	480b      	ldr	r0, [pc, #44]	; (80043c0 <VectorFC+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH7_HANDLER) {
 8004392:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004394:	f7fc fa94 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <VectorFC+0x34>)
  if (dma.streams[7].func)
 800439a:	480b      	ldr	r0, [pc, #44]	; (80043c8 <VectorFC+0x38>)
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 800439c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[7].func)
 800439e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (DMA1->HISR >> 22U) & STM32_DMA_ISR_MASK;
 80043a0:	0d89      	lsrs	r1, r1, #22
 80043a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 22U;
 80043a6:	058c      	lsls	r4, r1, #22
 80043a8:	60dc      	str	r4, [r3, #12]
  if (dma.streams[7].func)
 80043aa:	b10a      	cbz	r2, 80043b0 <VectorFC+0x20>
    dma.streams[7].func(dma.streams[7].param, flags);
 80043ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80043ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80043b0:	4803      	ldr	r0, [pc, #12]	; (80043c0 <VectorFC+0x30>)
 80043b2:	f7fc fa6d 	bl	8000890 <_trace_isr_leave>
}
 80043b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80043ba:	f7fc b921 	b.w	8000600 <_port_irq_epilogue>
 80043be:	bf00      	nop
 80043c0:	08004c44 	.word	0x08004c44
 80043c4:	40020000 	.word	0x40020000
 80043c8:	2400124c 	.word	0x2400124c
 80043cc:	00000000 	.word	0x00000000

080043d0 <Vector84>:
  OSAL_IRQ_PROLOGUE();
 80043d0:	480b      	ldr	r0, [pc, #44]	; (8004400 <Vector84+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH6_HANDLER) {
 80043d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80043d4:	f7fc fa74 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80043d8:	4b0a      	ldr	r3, [pc, #40]	; (8004404 <Vector84+0x34>)
  if (dma.streams[6].func)
 80043da:	480b      	ldr	r0, [pc, #44]	; (8004408 <Vector84+0x38>)
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80043dc:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[6].func)
 80043de:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (DMA1->HISR >> 16U) & STM32_DMA_ISR_MASK;
 80043e0:	0c09      	lsrs	r1, r1, #16
 80043e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 16U;
 80043e6:	040c      	lsls	r4, r1, #16
 80043e8:	60dc      	str	r4, [r3, #12]
  if (dma.streams[6].func)
 80043ea:	b10a      	cbz	r2, 80043f0 <Vector84+0x20>
    dma.streams[6].func(dma.streams[6].param, flags);
 80043ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80043ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80043f0:	4803      	ldr	r0, [pc, #12]	; (8004400 <Vector84+0x30>)
 80043f2:	f7fc fa4d 	bl	8000890 <_trace_isr_leave>
}
 80043f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80043fa:	f7fc b901 	b.w	8000600 <_port_irq_epilogue>
 80043fe:	bf00      	nop
 8004400:	08004c20 	.word	0x08004c20
 8004404:	40020000 	.word	0x40020000
 8004408:	2400124c 	.word	0x2400124c
 800440c:	00000000 	.word	0x00000000

08004410 <Vector80>:
  OSAL_IRQ_PROLOGUE();
 8004410:	480b      	ldr	r0, [pc, #44]	; (8004440 <Vector80+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH5_HANDLER) {
 8004412:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004414:	f7fc fa54 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004418:	4b0a      	ldr	r3, [pc, #40]	; (8004444 <Vector80+0x34>)
  if (dma.streams[5].func)
 800441a:	480b      	ldr	r0, [pc, #44]	; (8004448 <Vector80+0x38>)
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 800441c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[5].func)
 800441e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (DMA1->HISR >> 6U) & STM32_DMA_ISR_MASK;
 8004420:	0989      	lsrs	r1, r1, #6
 8004422:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 6U;
 8004426:	018c      	lsls	r4, r1, #6
 8004428:	60dc      	str	r4, [r3, #12]
  if (dma.streams[5].func)
 800442a:	b10a      	cbz	r2, 8004430 <Vector80+0x20>
    dma.streams[5].func(dma.streams[5].param, flags);
 800442c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800442e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004430:	4803      	ldr	r0, [pc, #12]	; (8004440 <Vector80+0x30>)
 8004432:	f7fc fa2d 	bl	8000890 <_trace_isr_leave>
}
 8004436:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800443a:	f7fc b8e1 	b.w	8000600 <_port_irq_epilogue>
 800443e:	bf00      	nop
 8004440:	08004bfc 	.word	0x08004bfc
 8004444:	40020000 	.word	0x40020000
 8004448:	2400124c 	.word	0x2400124c
 800444c:	00000000 	.word	0x00000000

08004450 <Vector7C>:
  OSAL_IRQ_PROLOGUE();
 8004450:	480a      	ldr	r0, [pc, #40]	; (800447c <Vector7C+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH4_HANDLER) {
 8004452:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004454:	f7fc fa34 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004458:	4b09      	ldr	r3, [pc, #36]	; (8004480 <Vector7C+0x30>)
  if (dma.streams[4].func)
 800445a:	480a      	ldr	r0, [pc, #40]	; (8004484 <Vector7C+0x34>)
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 800445c:	6859      	ldr	r1, [r3, #4]
  if (dma.streams[4].func)
 800445e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (DMA1->HISR >> 0U) & STM32_DMA_ISR_MASK;
 8004460:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->HIFCR = flags << 0U;
 8004464:	60d9      	str	r1, [r3, #12]
  if (dma.streams[4].func)
 8004466:	b10a      	cbz	r2, 800446c <Vector7C+0x1c>
    dma.streams[4].func(dma.streams[4].param, flags);
 8004468:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800446a:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800446c:	4803      	ldr	r0, [pc, #12]	; (800447c <Vector7C+0x2c>)
 800446e:	f7fc fa0f 	bl	8000890 <_trace_isr_leave>
}
 8004472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004476:	f7fc b8c3 	b.w	8000600 <_port_irq_epilogue>
 800447a:	bf00      	nop
 800447c:	08004be4 	.word	0x08004be4
 8004480:	40020000 	.word	0x40020000
 8004484:	2400124c 	.word	0x2400124c
	...

08004490 <Vector78>:
  OSAL_IRQ_PROLOGUE();
 8004490:	480b      	ldr	r0, [pc, #44]	; (80044c0 <Vector78+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH3_HANDLER) {
 8004492:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004494:	f7fc fa14 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 8004498:	4b0a      	ldr	r3, [pc, #40]	; (80044c4 <Vector78+0x34>)
  if (dma.streams[3].func)
 800449a:	480b      	ldr	r0, [pc, #44]	; (80044c8 <Vector78+0x38>)
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 800449c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[3].func)
 800449e:	69c2      	ldr	r2, [r0, #28]
  flags = (DMA1->LISR >> 22U) & STM32_DMA_ISR_MASK;
 80044a0:	0d89      	lsrs	r1, r1, #22
 80044a2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 22U;
 80044a6:	058c      	lsls	r4, r1, #22
 80044a8:	609c      	str	r4, [r3, #8]
  if (dma.streams[3].func)
 80044aa:	b10a      	cbz	r2, 80044b0 <Vector78+0x20>
    dma.streams[3].func(dma.streams[3].param, flags);
 80044ac:	6a00      	ldr	r0, [r0, #32]
 80044ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80044b0:	4803      	ldr	r0, [pc, #12]	; (80044c0 <Vector78+0x30>)
 80044b2:	f7fc f9ed 	bl	8000890 <_trace_isr_leave>
}
 80044b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80044ba:	f7fc b8a1 	b.w	8000600 <_port_irq_epilogue>
 80044be:	bf00      	nop
 80044c0:	08004bcc 	.word	0x08004bcc
 80044c4:	40020000 	.word	0x40020000
 80044c8:	2400124c 	.word	0x2400124c
 80044cc:	00000000 	.word	0x00000000

080044d0 <Vector74>:
  OSAL_IRQ_PROLOGUE();
 80044d0:	480b      	ldr	r0, [pc, #44]	; (8004500 <Vector74+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH2_HANDLER) {
 80044d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80044d4:	f7fc f9f4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80044d8:	4b0a      	ldr	r3, [pc, #40]	; (8004504 <Vector74+0x34>)
  if (dma.streams[2].func)
 80044da:	480b      	ldr	r0, [pc, #44]	; (8004508 <Vector74+0x38>)
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80044dc:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[2].func)
 80044de:	6942      	ldr	r2, [r0, #20]
  flags = (DMA1->LISR >> 16U) & STM32_DMA_ISR_MASK;
 80044e0:	0c09      	lsrs	r1, r1, #16
 80044e2:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 16U;
 80044e6:	040c      	lsls	r4, r1, #16
 80044e8:	609c      	str	r4, [r3, #8]
  if (dma.streams[2].func)
 80044ea:	b10a      	cbz	r2, 80044f0 <Vector74+0x20>
    dma.streams[2].func(dma.streams[2].param, flags);
 80044ec:	6980      	ldr	r0, [r0, #24]
 80044ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80044f0:	4803      	ldr	r0, [pc, #12]	; (8004500 <Vector74+0x30>)
 80044f2:	f7fc f9cd 	bl	8000890 <_trace_isr_leave>
}
 80044f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80044fa:	f7fc b881 	b.w	8000600 <_port_irq_epilogue>
 80044fe:	bf00      	nop
 8004500:	08004bb4 	.word	0x08004bb4
 8004504:	40020000 	.word	0x40020000
 8004508:	2400124c 	.word	0x2400124c
 800450c:	00000000 	.word	0x00000000

08004510 <Vector70>:
  OSAL_IRQ_PROLOGUE();
 8004510:	480b      	ldr	r0, [pc, #44]	; (8004540 <Vector70+0x30>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH1_HANDLER) {
 8004512:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004514:	f7fc f9d4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <Vector70+0x34>)
  if (dma.streams[1].func)
 800451a:	480b      	ldr	r0, [pc, #44]	; (8004548 <Vector70+0x38>)
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 800451c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[1].func)
 800451e:	68c2      	ldr	r2, [r0, #12]
  flags = (DMA1->LISR >> 6U) & STM32_DMA_ISR_MASK;
 8004520:	0989      	lsrs	r1, r1, #6
 8004522:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 6U;
 8004526:	018c      	lsls	r4, r1, #6
 8004528:	609c      	str	r4, [r3, #8]
  if (dma.streams[1].func)
 800452a:	b10a      	cbz	r2, 8004530 <Vector70+0x20>
    dma.streams[1].func(dma.streams[1].param, flags);
 800452c:	6900      	ldr	r0, [r0, #16]
 800452e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004530:	4803      	ldr	r0, [pc, #12]	; (8004540 <Vector70+0x30>)
 8004532:	f7fc f9ad 	bl	8000890 <_trace_isr_leave>
}
 8004536:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800453a:	f7fc b861 	b.w	8000600 <_port_irq_epilogue>
 800453e:	bf00      	nop
 8004540:	08004b9c 	.word	0x08004b9c
 8004544:	40020000 	.word	0x40020000
 8004548:	2400124c 	.word	0x2400124c
 800454c:	00000000 	.word	0x00000000

08004550 <Vector6C>:
  OSAL_IRQ_PROLOGUE();
 8004550:	480a      	ldr	r0, [pc, #40]	; (800457c <Vector6C+0x2c>)
OSAL_IRQ_HANDLER(STM32_DMA1_CH0_HANDLER) {
 8004552:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004554:	f7fc f9b4 	bl	80008c0 <_trace_isr_enter>
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004558:	4b09      	ldr	r3, [pc, #36]	; (8004580 <Vector6C+0x30>)
  if (dma.streams[0].func)
 800455a:	480a      	ldr	r0, [pc, #40]	; (8004584 <Vector6C+0x34>)
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 800455c:	6819      	ldr	r1, [r3, #0]
  if (dma.streams[0].func)
 800455e:	6842      	ldr	r2, [r0, #4]
  flags = (DMA1->LISR >> 0U) & STM32_DMA_ISR_MASK;
 8004560:	f001 013d 	and.w	r1, r1, #61	; 0x3d
  DMA1->LIFCR = flags << 0U;
 8004564:	6099      	str	r1, [r3, #8]
  if (dma.streams[0].func)
 8004566:	b10a      	cbz	r2, 800456c <Vector6C+0x1c>
    dma.streams[0].func(dma.streams[0].param, flags);
 8004568:	6880      	ldr	r0, [r0, #8]
 800456a:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800456c:	4803      	ldr	r0, [pc, #12]	; (800457c <Vector6C+0x2c>)
 800456e:	f7fc f98f 	bl	8000890 <_trace_isr_leave>
}
 8004572:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004576:	f7fc b843 	b.w	8000600 <_port_irq_epilogue>
 800457a:	bf00      	nop
 800457c:	08004b84 	.word	0x08004b84
 8004580:	40020000 	.word	0x40020000
 8004584:	2400124c 	.word	0x2400124c
	...

08004590 <Vector260>:
  OSAL_IRQ_PROLOGUE();
 8004590:	480b      	ldr	r0, [pc, #44]	; (80045c0 <Vector260+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH7_HANDLER) {
 8004592:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004594:	f7fc f994 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 8004598:	4b0a      	ldr	r3, [pc, #40]	; (80045c4 <Vector260+0x34>)
  if (bdma.streams[7].func)
 800459a:	480b      	ldr	r0, [pc, #44]	; (80045c8 <Vector260+0x38>)
  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 800459c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[7].func)
 800459e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
  flags = (BDMA->ISR >> 28U) & STM32_BDMA_ISR_MASK;
 80045a0:	0f09      	lsrs	r1, r1, #28
 80045a2:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 28U;
 80045a6:	070c      	lsls	r4, r1, #28
 80045a8:	605c      	str	r4, [r3, #4]
  if (bdma.streams[7].func)
 80045aa:	b10a      	cbz	r2, 80045b0 <Vector260+0x20>
    bdma.streams[7].func(bdma.streams[7].param, flags);
 80045ac:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80045ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80045b0:	4803      	ldr	r0, [pc, #12]	; (80045c0 <Vector260+0x30>)
 80045b2:	f7fc f96d 	bl	8000890 <_trace_isr_leave>
}
 80045b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80045ba:	f7fc b821 	b.w	8000600 <_port_irq_epilogue>
 80045be:	bf00      	nop
 80045c0:	08004c50 	.word	0x08004c50
 80045c4:	58025400 	.word	0x58025400
 80045c8:	24000844 	.word	0x24000844
 80045cc:	00000000 	.word	0x00000000

080045d0 <Vector25C>:
  OSAL_IRQ_PROLOGUE();
 80045d0:	480b      	ldr	r0, [pc, #44]	; (8004600 <Vector25C+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH6_HANDLER) {
 80045d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80045d4:	f7fc f974 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 80045d8:	4b0a      	ldr	r3, [pc, #40]	; (8004604 <Vector25C+0x34>)
  if (bdma.streams[6].func)
 80045da:	480b      	ldr	r0, [pc, #44]	; (8004608 <Vector25C+0x38>)
  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 80045dc:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[6].func)
 80045de:	6b42      	ldr	r2, [r0, #52]	; 0x34
  flags = (BDMA->ISR >> 24U) & STM32_BDMA_ISR_MASK;
 80045e0:	0e09      	lsrs	r1, r1, #24
 80045e2:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 24U;
 80045e6:	060c      	lsls	r4, r1, #24
 80045e8:	605c      	str	r4, [r3, #4]
  if (bdma.streams[6].func)
 80045ea:	b10a      	cbz	r2, 80045f0 <Vector25C+0x20>
    bdma.streams[6].func(bdma.streams[6].param, flags);
 80045ec:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80045ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80045f0:	4803      	ldr	r0, [pc, #12]	; (8004600 <Vector25C+0x30>)
 80045f2:	f7fc f94d 	bl	8000890 <_trace_isr_leave>
}
 80045f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80045fa:	f7fc b801 	b.w	8000600 <_port_irq_epilogue>
 80045fe:	bf00      	nop
 8004600:	08004c38 	.word	0x08004c38
 8004604:	58025400 	.word	0x58025400
 8004608:	24000844 	.word	0x24000844
 800460c:	00000000 	.word	0x00000000

08004610 <Vector258>:
  OSAL_IRQ_PROLOGUE();
 8004610:	480b      	ldr	r0, [pc, #44]	; (8004640 <Vector258+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH5_HANDLER) {
 8004612:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004614:	f7fc f954 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <Vector258+0x34>)
  if (bdma.streams[5].func)
 800461a:	480b      	ldr	r0, [pc, #44]	; (8004648 <Vector258+0x38>)
  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 800461c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[5].func)
 800461e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
  flags = (BDMA->ISR >> 20U) & STM32_BDMA_ISR_MASK;
 8004620:	0d09      	lsrs	r1, r1, #20
 8004622:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 20U;
 8004626:	050c      	lsls	r4, r1, #20
 8004628:	605c      	str	r4, [r3, #4]
  if (bdma.streams[5].func)
 800462a:	b10a      	cbz	r2, 8004630 <Vector258+0x20>
    bdma.streams[5].func(bdma.streams[5].param, flags);
 800462c:	6b00      	ldr	r0, [r0, #48]	; 0x30
 800462e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004630:	4803      	ldr	r0, [pc, #12]	; (8004640 <Vector258+0x30>)
 8004632:	f7fc f92d 	bl	8000890 <_trace_isr_leave>
}
 8004636:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800463a:	f7fb bfe1 	b.w	8000600 <_port_irq_epilogue>
 800463e:	bf00      	nop
 8004640:	08004c14 	.word	0x08004c14
 8004644:	58025400 	.word	0x58025400
 8004648:	24000844 	.word	0x24000844
 800464c:	00000000 	.word	0x00000000

08004650 <Vector254>:
  OSAL_IRQ_PROLOGUE();
 8004650:	480b      	ldr	r0, [pc, #44]	; (8004680 <Vector254+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH4_HANDLER) {
 8004652:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004654:	f7fc f934 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 8004658:	4b0a      	ldr	r3, [pc, #40]	; (8004684 <Vector254+0x34>)
  if (bdma.streams[4].func)
 800465a:	480b      	ldr	r0, [pc, #44]	; (8004688 <Vector254+0x38>)
  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 800465c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[4].func)
 800465e:	6a42      	ldr	r2, [r0, #36]	; 0x24
  flags = (BDMA->ISR >> 16U) & STM32_BDMA_ISR_MASK;
 8004660:	0c09      	lsrs	r1, r1, #16
 8004662:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 16U;
 8004666:	040c      	lsls	r4, r1, #16
 8004668:	605c      	str	r4, [r3, #4]
  if (bdma.streams[4].func)
 800466a:	b10a      	cbz	r2, 8004670 <Vector254+0x20>
    bdma.streams[4].func(bdma.streams[4].param, flags);
 800466c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800466e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004670:	4803      	ldr	r0, [pc, #12]	; (8004680 <Vector254+0x30>)
 8004672:	f7fc f90d 	bl	8000890 <_trace_isr_leave>
}
 8004676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800467a:	f7fb bfc1 	b.w	8000600 <_port_irq_epilogue>
 800467e:	bf00      	nop
 8004680:	08004bf0 	.word	0x08004bf0
 8004684:	58025400 	.word	0x58025400
 8004688:	24000844 	.word	0x24000844
 800468c:	00000000 	.word	0x00000000

08004690 <Vector250>:
  OSAL_IRQ_PROLOGUE();
 8004690:	480b      	ldr	r0, [pc, #44]	; (80046c0 <Vector250+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH3_HANDLER) {
 8004692:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004694:	f7fc f914 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 8004698:	4b0a      	ldr	r3, [pc, #40]	; (80046c4 <Vector250+0x34>)
  if (bdma.streams[3].func)
 800469a:	480b      	ldr	r0, [pc, #44]	; (80046c8 <Vector250+0x38>)
  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 800469c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[3].func)
 800469e:	69c2      	ldr	r2, [r0, #28]
  flags = (BDMA->ISR >> 12U) & STM32_BDMA_ISR_MASK;
 80046a0:	0b09      	lsrs	r1, r1, #12
 80046a2:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 12U;
 80046a6:	030c      	lsls	r4, r1, #12
 80046a8:	605c      	str	r4, [r3, #4]
  if (bdma.streams[3].func)
 80046aa:	b10a      	cbz	r2, 80046b0 <Vector250+0x20>
    bdma.streams[3].func(bdma.streams[3].param, flags);
 80046ac:	6a00      	ldr	r0, [r0, #32]
 80046ae:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80046b0:	4803      	ldr	r0, [pc, #12]	; (80046c0 <Vector250+0x30>)
 80046b2:	f7fc f8ed 	bl	8000890 <_trace_isr_leave>
}
 80046b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80046ba:	f7fb bfa1 	b.w	8000600 <_port_irq_epilogue>
 80046be:	bf00      	nop
 80046c0:	08004bd8 	.word	0x08004bd8
 80046c4:	58025400 	.word	0x58025400
 80046c8:	24000844 	.word	0x24000844
 80046cc:	00000000 	.word	0x00000000

080046d0 <Vector24C>:
  OSAL_IRQ_PROLOGUE();
 80046d0:	480b      	ldr	r0, [pc, #44]	; (8004700 <Vector24C+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH2_HANDLER) {
 80046d2:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 80046d4:	f7fc f8f4 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <Vector24C+0x34>)
  if (bdma.streams[2].func)
 80046da:	480b      	ldr	r0, [pc, #44]	; (8004708 <Vector24C+0x38>)
  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 80046dc:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[2].func)
 80046de:	6942      	ldr	r2, [r0, #20]
  flags = (BDMA->ISR >> 8U) & STM32_BDMA_ISR_MASK;
 80046e0:	0a09      	lsrs	r1, r1, #8
 80046e2:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 8U;
 80046e6:	020c      	lsls	r4, r1, #8
 80046e8:	605c      	str	r4, [r3, #4]
  if (bdma.streams[2].func)
 80046ea:	b10a      	cbz	r2, 80046f0 <Vector24C+0x20>
    bdma.streams[2].func(bdma.streams[2].param, flags);
 80046ec:	6980      	ldr	r0, [r0, #24]
 80046ee:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 80046f0:	4803      	ldr	r0, [pc, #12]	; (8004700 <Vector24C+0x30>)
 80046f2:	f7fc f8cd 	bl	8000890 <_trace_isr_leave>
}
 80046f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 80046fa:	f7fb bf81 	b.w	8000600 <_port_irq_epilogue>
 80046fe:	bf00      	nop
 8004700:	08004bc0 	.word	0x08004bc0
 8004704:	58025400 	.word	0x58025400
 8004708:	24000844 	.word	0x24000844
 800470c:	00000000 	.word	0x00000000

08004710 <Vector248>:
  OSAL_IRQ_PROLOGUE();
 8004710:	480b      	ldr	r0, [pc, #44]	; (8004740 <Vector248+0x30>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH1_HANDLER) {
 8004712:	b510      	push	{r4, lr}
  OSAL_IRQ_PROLOGUE();
 8004714:	f7fc f8d4 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 8004718:	4b0a      	ldr	r3, [pc, #40]	; (8004744 <Vector248+0x34>)
  if (bdma.streams[1].func)
 800471a:	480b      	ldr	r0, [pc, #44]	; (8004748 <Vector248+0x38>)
  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 800471c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[1].func)
 800471e:	68c2      	ldr	r2, [r0, #12]
  flags = (BDMA->ISR >> 4U) & STM32_BDMA_ISR_MASK;
 8004720:	0909      	lsrs	r1, r1, #4
 8004722:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 4U;
 8004726:	010c      	lsls	r4, r1, #4
 8004728:	605c      	str	r4, [r3, #4]
  if (bdma.streams[1].func)
 800472a:	b10a      	cbz	r2, 8004730 <Vector248+0x20>
    bdma.streams[1].func(bdma.streams[1].param, flags);
 800472c:	6900      	ldr	r0, [r0, #16]
 800472e:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 8004730:	4803      	ldr	r0, [pc, #12]	; (8004740 <Vector248+0x30>)
 8004732:	f7fc f8ad 	bl	8000890 <_trace_isr_leave>
}
 8004736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  OSAL_IRQ_EPILOGUE();
 800473a:	f7fb bf61 	b.w	8000600 <_port_irq_epilogue>
 800473e:	bf00      	nop
 8004740:	08004ba8 	.word	0x08004ba8
 8004744:	58025400 	.word	0x58025400
 8004748:	24000844 	.word	0x24000844
 800474c:	00000000 	.word	0x00000000

08004750 <Vector244>:
  OSAL_IRQ_PROLOGUE();
 8004750:	480a      	ldr	r0, [pc, #40]	; (800477c <Vector244+0x2c>)
OSAL_IRQ_HANDLER(STM32_BDMA1_CH0_HANDLER) {
 8004752:	b508      	push	{r3, lr}
  OSAL_IRQ_PROLOGUE();
 8004754:	f7fc f8b4 	bl	80008c0 <_trace_isr_enter>
  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 8004758:	4b09      	ldr	r3, [pc, #36]	; (8004780 <Vector244+0x30>)
  if (bdma.streams[0].func)
 800475a:	480a      	ldr	r0, [pc, #40]	; (8004784 <Vector244+0x34>)
  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 800475c:	6819      	ldr	r1, [r3, #0]
  if (bdma.streams[0].func)
 800475e:	6842      	ldr	r2, [r0, #4]
  flags = (BDMA->ISR >> 0U) & STM32_BDMA_ISR_MASK;
 8004760:	f001 010e 	and.w	r1, r1, #14
  BDMA->IFCR = flags << 0U;
 8004764:	6059      	str	r1, [r3, #4]
  if (bdma.streams[0].func)
 8004766:	b10a      	cbz	r2, 800476c <Vector244+0x1c>
    bdma.streams[0].func(bdma.streams[0].param, flags);
 8004768:	6880      	ldr	r0, [r0, #8]
 800476a:	4790      	blx	r2
  OSAL_IRQ_EPILOGUE();
 800476c:	4803      	ldr	r0, [pc, #12]	; (800477c <Vector244+0x2c>)
 800476e:	f7fc f88f 	bl	8000890 <_trace_isr_leave>
}
 8004772:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004776:	f7fb bf43 	b.w	8000600 <_port_irq_epilogue>
 800477a:	bf00      	nop
 800477c:	08004b90 	.word	0x08004b90
 8004780:	58025400 	.word	0x58025400
 8004784:	24000844 	.word	0x24000844
	...

08004790 <VectorB0>:
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {

  OSAL_IRQ_PROLOGUE();
 8004790:	4831      	ldr	r0, [pc, #196]	; (8004858 <VectorB0+0xc8>)
OSAL_IRQ_HANDLER(STM32_TIM2_HANDLER) {
 8004792:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_PROLOGUE();
 8004796:	f7fc f893 	bl	80008c0 <_trace_isr_enter>
void st_lld_serve_interrupt(void) {
#if OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING
  uint32_t sr;
  stm32_tim_t *timp = STM32_ST_TIM;

  sr  = timp->SR;
 800479a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800479e:	6903      	ldr	r3, [r0, #16]
  sr &= timp->DIER & STM32_TIM_DIER_IRQ_MASK;
 80047a0:	68c2      	ldr	r2, [r0, #12]
 80047a2:	4013      	ands	r3, r2
 80047a4:	b2da      	uxtb	r2, r3
  timp->SR = ~sr;

  if ((sr & TIM_SR_CC1IF) != 0U)
 80047a6:	079b      	lsls	r3, r3, #30
  timp->SR = ~sr;
 80047a8:	ea6f 0202 	mvn.w	r2, r2
 80047ac:	6102      	str	r2, [r0, #16]
  if ((sr & TIM_SR_CC1IF) != 0U)
 80047ae:	d406      	bmi.n	80047be <VectorB0+0x2e>
#if STM32_ST_USE_TIM2
  st_lld_serve_interrupt();
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 80047b0:	4829      	ldr	r0, [pc, #164]	; (8004858 <VectorB0+0xc8>)
 80047b2:	f7fc f86d 	bl	8000890 <_trace_isr_leave>
}
 80047b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 80047ba:	f7fb bf21 	b.w	8000600 <_port_irq_epilogue>
 80047be:	2320      	movs	r3, #32
 80047c0:	f383 8811 	msr	BASEPRI, r3
  virtual_timer_t *vtp;
  systime_t now;
  sysinterval_t delta, nowdelta;

  /* Looping through timers.*/
  vtp = ch.vtlist.next;
 80047c4:	4d25      	ldr	r5, [pc, #148]	; (800485c <VectorB0+0xcc>)
  return (systime_t)STM32_ST_TIM->CNT;
 80047c6:	6a47      	ldr	r7, [r0, #36]	; 0x24
  while (true) {

    /* Getting the system time as reference.*/
    now = chVTGetSystemTimeX();
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 80047c8:	6aaa      	ldr	r2, [r5, #40]	; 0x28
  vtp = ch.vtlist.next;
 80047ca:	69eb      	ldr	r3, [r5, #28]
  return (sysinterval_t)((systime_t)(end - start));
 80047cc:	1abe      	subs	r6, r7, r2

    /* The list scan is limited by the timers header having
       "ch.vtlist.vt_delta == (sysinterval_t)-1" which is
       greater than all deltas.*/
    if (nowdelta < vtp->delta) {
 80047ce:	6899      	ldr	r1, [r3, #8]
 80047d0:	42b1      	cmp	r1, r6
 80047d2:	d83d      	bhi.n	8004850 <VectorB0+0xc0>
  STM32_ST_TIM->DIER = 0U;
 80047d4:	4604      	mov	r4, r0
 80047d6:	f105 091c 	add.w	r9, r5, #28
      nowdelta -= vtp->delta;

      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
      ch.vtlist.next = vtp->next;
      fn = vtp->func;
      vtp->func = NULL;
 80047da:	f04f 0800 	mov.w	r8, #0
 80047de:	2720      	movs	r7, #32
 80047e0:	e00a      	b.n	80047f8 <VectorB0+0x68>
 80047e2:	f388 8811 	msr	BASEPRI, r8
        port_timer_stop_alarm();
      }

      /* The callback is invoked outside the kernel critical zone.*/
      chSysUnlockFromISR();
      fn(vtp->par);
 80047e6:	6918      	ldr	r0, [r3, #16]
 80047e8:	4788      	blx	r1
 80047ea:	f387 8811 	msr	BASEPRI, r7
      chSysLockFromISR();

      /* Next element in the list.*/
      vtp = ch.vtlist.next;
 80047ee:	69eb      	ldr	r3, [r5, #28]
    }
    while (vtp->delta <= nowdelta);
 80047f0:	6899      	ldr	r1, [r3, #8]
 80047f2:	428e      	cmp	r6, r1
 80047f4:	d30f      	bcc.n	8004816 <VectorB0+0x86>
 80047f6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 80047f8:	6818      	ldr	r0, [r3, #0]
      ch.vtlist.lasttime += vtp->delta;
 80047fa:	440a      	add	r2, r1
      nowdelta -= vtp->delta;
 80047fc:	1a76      	subs	r6, r6, r1
      fn = vtp->func;
 80047fe:	68d9      	ldr	r1, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004800:	4548      	cmp	r0, r9
      ch.vtlist.lasttime += vtp->delta;
 8004802:	62aa      	str	r2, [r5, #40]	; 0x28
      vtp->next->prev = (virtual_timer_t *)&ch.vtlist;
 8004804:	f8c0 9004 	str.w	r9, [r0, #4]
      ch.vtlist.next = vtp->next;
 8004808:	61e8      	str	r0, [r5, #28]
      vtp->func = NULL;
 800480a:	f8c3 800c 	str.w	r8, [r3, #12]
      if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 800480e:	d1e8      	bne.n	80047e2 <VectorB0+0x52>
 8004810:	f8c4 800c 	str.w	r8, [r4, #12]
 8004814:	e7e5      	b.n	80047e2 <VectorB0+0x52>
  return (systime_t)STM32_ST_TIM->CNT;
 8004816:	6a67      	ldr	r7, [r4, #36]	; 0x24
    nowdelta = chTimeDiffX(ch.vtlist.lasttime, now);
 8004818:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 800481a:	1abe      	subs	r6, r7, r2
    if (nowdelta < vtp->delta) {
 800481c:	428e      	cmp	r6, r1
 800481e:	d2de      	bcs.n	80047de <VectorB0+0x4e>
  }

  /* If the list is empty, nothing else to do.*/
  if (ch.vtlist.next == (virtual_timer_t *)&ch.vtlist) {
 8004820:	454b      	cmp	r3, r9
 8004822:	d00b      	beq.n	800483c <VectorB0+0xac>
  }

  /* The "unprocessed nowdelta" time slice is added to "last time"
     and subtracted to next timer's delta.*/
  ch.vtlist.lasttime += nowdelta;
  ch.vtlist.next->delta -= nowdelta;
 8004824:	6899      	ldr	r1, [r3, #8]
  STM32_ST_TIM->CCR[0] = (uint32_t)abstime;
 8004826:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
  ch.vtlist.lasttime += nowdelta;
 800482a:	62af      	str	r7, [r5, #40]	; 0x28
  ch.vtlist.next->delta -= nowdelta;
 800482c:	1bc9      	subs	r1, r1, r7
 800482e:	440a      	add	r2, r1
  return systime + (systime_t)interval;
 8004830:	2a02      	cmp	r2, #2
 8004832:	bf2c      	ite	cs
 8004834:	18bf      	addcs	r7, r7, r2
 8004836:	3702      	addcc	r7, #2
 8004838:	609a      	str	r2, [r3, #8]
 800483a:	6347      	str	r7, [r0, #52]	; 0x34
 800483c:	2300      	movs	r3, #0
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	4805      	ldr	r0, [pc, #20]	; (8004858 <VectorB0+0xc8>)
 8004844:	f7fc f824 	bl	8000890 <_trace_isr_leave>
}
 8004848:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  OSAL_IRQ_EPILOGUE();
 800484c:	f7fb bed8 	b.w	8000600 <_port_irq_epilogue>
 8004850:	f105 091c 	add.w	r9, r5, #28
 8004854:	e7e4      	b.n	8004820 <VectorB0+0x90>
 8004856:	bf00      	nop
 8004858:	08004cd4 	.word	0x08004cd4
 800485c:	24000888 	.word	0x24000888

08004860 <VectorDC>:
/**
 * @brief   USART3 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_USART3_HANDLER) {
 8004860:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 * @brief   Common IRQ handler.
 *
 * @param[in] sdp       communication channel associated to the USART
 */
void sd_lld_serve_interrupt(SerialDriver *sdp) {
  USART_TypeDef *u = sdp->usart;
 8004864:	4c61      	ldr	r4, [pc, #388]	; (80049ec <VectorDC+0x18c>)

  OSAL_IRQ_PROLOGUE();
 8004866:	4862      	ldr	r0, [pc, #392]	; (80049f0 <VectorDC+0x190>)
 8004868:	f7fc f82a 	bl	80008c0 <_trace_isr_enter>
 800486c:	6d66      	ldr	r6, [r4, #84]	; 0x54
  uint32_t cr1 = u->CR1;
 800486e:	6837      	ldr	r7, [r6, #0]
  uint32_t isr;

  /* Reading and clearing status.*/
  isr = u->ISR;
 8004870:	69f5      	ldr	r5, [r6, #28]
  u->ICR = isr;

  /* Error condition detection.*/
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004872:	072b      	lsls	r3, r5, #28
  u->ICR = isr;
 8004874:	6235      	str	r5, [r6, #32]
  if (isr & (USART_ISR_ORE | USART_ISR_NE | USART_ISR_FE  | USART_ISR_PE))
 8004876:	f040 8092 	bne.w	800499e <VectorDC+0x13e>
    set_error(sdp, isr);

  /* Special case, LIN break detection.*/
  if (isr & USART_ISR_LBDF) {
 800487a:	05e8      	lsls	r0, r5, #23
 800487c:	f100 8083 	bmi.w	8004986 <VectorDC+0x126>
  /* Data available, note it is a while in order to handle two situations:
     1) Another byte arrived after removing the previous one, this would cause
        an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to empty
        the FIFO.*/
  while (isr & USART_ISR_RXNE) {
 8004880:	06a9      	lsls	r1, r5, #26
 8004882:	d539      	bpl.n	80048f8 <VectorDC+0x98>
  chEvtBroadcastFlagsI(esp, flags);
 8004884:	f8df 816c 	ldr.w	r8, [pc, #364]	; 80049f4 <VectorDC+0x194>
 8004888:	f04f 0a20 	mov.w	sl, #32
  chThdDequeueNextI(tqp, msg);
 800488c:	f108 0908 	add.w	r9, r8, #8
 8004890:	e018      	b.n	80048c4 <VectorDC+0x64>
  if (!iqIsFullI(iqp)) {
 8004892:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 8004896:	4293      	cmp	r3, r2
 8004898:	d025      	beq.n	80048e6 <VectorDC+0x86>
    iqp->q_counter++;
 800489a:	6962      	ldr	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 800489c:	1c59      	adds	r1, r3, #1
    iqp->q_counter++;
 800489e:	3201      	adds	r2, #1
    *iqp->q_wrptr++ = b;
 80048a0:	6221      	str	r1, [r4, #32]
    iqp->q_counter++;
 80048a2:	6162      	str	r2, [r4, #20]
    *iqp->q_wrptr++ = b;
 80048a4:	701d      	strb	r5, [r3, #0]
    if (iqp->q_wrptr >= iqp->q_top) {
 80048a6:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d301      	bcc.n	80048b2 <VectorDC+0x52>
      iqp->q_wrptr = iqp->q_buffer;
 80048ae:	69a3      	ldr	r3, [r4, #24]
 80048b0:	6223      	str	r3, [r4, #32]
 80048b2:	4648      	mov	r0, r9
 80048b4:	f7fb ff7c 	bl	80007b0 <chThdDequeueNextI.constprop.0>
 80048b8:	2300      	movs	r3, #0
 80048ba:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
    osalSysUnlockFromISR();

    isr = u->ISR;
 80048be:	69f5      	ldr	r5, [r6, #28]
  while (isr & USART_ISR_RXNE) {
 80048c0:	06aa      	lsls	r2, r5, #26
 80048c2:	d519      	bpl.n	80048f8 <VectorDC+0x98>
 80048c4:	f38a 8811 	msr	BASEPRI, sl
    sdIncomingDataI(sdp, (uint8_t)u->RDR & sdp->rxmask);
 80048c8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80048ca:	f894 505c 	ldrb.w	r5, [r4, #92]	; 0x5c
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
 80048ce:	6963      	ldr	r3, [r4, #20]
 80048d0:	4015      	ands	r5, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1dd      	bne.n	8004892 <VectorDC+0x32>
  chEvtBroadcastFlagsI(esp, flags);
 80048d6:	2104      	movs	r1, #4
 80048d8:	4640      	mov	r0, r8
 80048da:	f7fb ff79 	bl	80007d0 <chEvtBroadcastFlagsI>
  if (!iqIsFullI(iqp)) {
 80048de:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d1d9      	bne.n	800489a <VectorDC+0x3a>
 80048e6:	6962      	ldr	r2, [r4, #20]
 80048e8:	2a00      	cmp	r2, #0
 80048ea:	d0d6      	beq.n	800489a <VectorDC+0x3a>
 80048ec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80048f0:	4640      	mov	r0, r8
 80048f2:	f7fb ff6d 	bl	80007d0 <chEvtBroadcastFlagsI>
 80048f6:	e7df      	b.n	80048b8 <VectorDC+0x58>
     situations:
     1) The data registers has been emptied immediately after writing it, this
        would cause an extra interrupt to serve.
     2) FIFO mode is enabled on devices that support it, we need to fill
        the FIFO.*/
  if (cr1 & USART_CR1_TXEIE) {
 80048f8:	063b      	lsls	r3, r7, #24
 80048fa:	d52f      	bpl.n	800495c <VectorDC+0xfc>
    while (isr & USART_ISR_TXE) {
 80048fc:	0628      	lsls	r0, r5, #24
 80048fe:	d52d      	bpl.n	800495c <VectorDC+0xfc>
 8004900:	f04f 0920 	mov.w	r9, #32
  chThdDequeueNextI(tqp, msg);
 8004904:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 80049f8 <VectorDC+0x198>
 8004908:	f04f 0800 	mov.w	r8, #0
 800490c:	e013      	b.n	8004936 <VectorDC+0xd6>
    oqp->q_counter++;
 800490e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 8004910:	1c58      	adds	r0, r3, #1
    if (oqp->q_rdptr >= oqp->q_top) {
 8004912:	6c21      	ldr	r1, [r4, #64]	; 0x40
    oqp->q_counter++;
 8004914:	3201      	adds	r2, #1
    b = *oqp->q_rdptr++;
 8004916:	64a0      	str	r0, [r4, #72]	; 0x48
    if (oqp->q_rdptr >= oqp->q_top) {
 8004918:	4288      	cmp	r0, r1
    oqp->q_counter++;
 800491a:	63a2      	str	r2, [r4, #56]	; 0x38
    b = *oqp->q_rdptr++;
 800491c:	781d      	ldrb	r5, [r3, #0]
    if (oqp->q_rdptr >= oqp->q_top) {
 800491e:	d301      	bcc.n	8004924 <VectorDC+0xc4>
      oqp->q_rdptr = oqp->q_buffer;
 8004920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004922:	64a3      	str	r3, [r4, #72]	; 0x48
 8004924:	4650      	mov	r0, sl
 8004926:	f7fb ff43 	bl	80007b0 <chThdDequeueNextI.constprop.0>
        chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
        u->CR1 = cr1 & ~USART_CR1_TXEIE;
        osalSysUnlockFromISR();
        break;
      }
      u->TDR = b;
 800492a:	62b5      	str	r5, [r6, #40]	; 0x28
 800492c:	f388 8811 	msr	BASEPRI, r8
      osalSysUnlockFromISR();

      isr = u->ISR;
 8004930:	69f5      	ldr	r5, [r6, #28]
    while (isr & USART_ISR_TXE) {
 8004932:	062b      	lsls	r3, r5, #24
 8004934:	d512      	bpl.n	800495c <VectorDC+0xfc>
 8004936:	f389 8811 	msr	BASEPRI, r9
  if (!oqIsEmptyI(oqp)) {
 800493a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800493e:	429a      	cmp	r2, r3
 8004940:	d1e5      	bne.n	800490e <VectorDC+0xae>
 8004942:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004944:	2a00      	cmp	r2, #0
 8004946:	d0e2      	beq.n	800490e <VectorDC+0xae>
  chEvtBroadcastFlagsI(esp, flags);
 8004948:	2108      	movs	r1, #8
 800494a:	482a      	ldr	r0, [pc, #168]	; (80049f4 <VectorDC+0x194>)
 800494c:	f7fb ff40 	bl	80007d0 <chEvtBroadcastFlagsI>
        u->CR1 = cr1 & ~USART_CR1_TXEIE;
 8004950:	f027 0380 	bic.w	r3, r7, #128	; 0x80
 8004954:	2200      	movs	r2, #0
 8004956:	6033      	str	r3, [r6, #0]
 8004958:	f382 8811 	msr	BASEPRI, r2
    }
  }

  /* Physical transmission end.*/
  if ((cr1 & USART_CR1_TCIE) && (isr & USART_ISR_TC)) {
 800495c:	0679      	lsls	r1, r7, #25
 800495e:	d50b      	bpl.n	8004978 <VectorDC+0x118>
 8004960:	066a      	lsls	r2, r5, #25
 8004962:	d509      	bpl.n	8004978 <VectorDC+0x118>
 8004964:	2320      	movs	r3, #32
 8004966:	f383 8811 	msr	BASEPRI, r3
    osalSysLockFromISR();
    if (oqIsEmptyI(&sdp->oqueue)) {
 800496a:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
 800496e:	429a      	cmp	r2, r3
 8004970:	d030      	beq.n	80049d4 <VectorDC+0x174>
 8004972:	2300      	movs	r3, #0
 8004974:	f383 8811 	msr	BASEPRI, r3
#if STM32_UART_USE_USART3
  uart_lld_serve_interrupt(&UARTD3);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8004978:	481d      	ldr	r0, [pc, #116]	; (80049f0 <VectorDC+0x190>)
 800497a:	f7fb ff89 	bl	8000890 <_trace_isr_leave>
}
 800497e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  OSAL_IRQ_EPILOGUE();
 8004982:	f7fb be3d 	b.w	8000600 <_port_irq_epilogue>
 8004986:	2320      	movs	r3, #32
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004990:	4818      	ldr	r0, [pc, #96]	; (80049f4 <VectorDC+0x194>)
 8004992:	f7fb ff1d 	bl	80007d0 <chEvtBroadcastFlagsI>
 8004996:	2300      	movs	r3, #0
 8004998:	f383 8811 	msr	BASEPRI, r3
 800499c:	e770      	b.n	8004880 <VectorDC+0x20>
    sts |= SD_OVERRUN_ERROR;
 800499e:	f015 0108 	ands.w	r1, r5, #8
 80049a2:	bf18      	it	ne
 80049a4:	2180      	movne	r1, #128	; 0x80
  if (isr & USART_ISR_PE)
 80049a6:	07e8      	lsls	r0, r5, #31
    sts |= SD_PARITY_ERROR;
 80049a8:	bf48      	it	mi
 80049aa:	f041 0120 	orrmi.w	r1, r1, #32
  if (isr & USART_ISR_FE)
 80049ae:	07aa      	lsls	r2, r5, #30
    sts |= SD_FRAMING_ERROR;
 80049b0:	bf48      	it	mi
 80049b2:	f041 0140 	orrmi.w	r1, r1, #64	; 0x40
  if (isr & USART_ISR_NE)
 80049b6:	076b      	lsls	r3, r5, #29
 80049b8:	f04f 0320 	mov.w	r3, #32
    sts |= SD_NOISE_ERROR;
 80049bc:	bf48      	it	mi
 80049be:	f441 7180 	orrmi.w	r1, r1, #256	; 0x100
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	480b      	ldr	r0, [pc, #44]	; (80049f4 <VectorDC+0x194>)
 80049c8:	f7fb ff02 	bl	80007d0 <chEvtBroadcastFlagsI>
 80049cc:	2300      	movs	r3, #0
 80049ce:	f383 8811 	msr	BASEPRI, r3
 80049d2:	e752      	b.n	800487a <VectorDC+0x1a>
    if (oqIsEmptyI(&sdp->oqueue)) {
 80049d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0cb      	beq.n	8004972 <VectorDC+0x112>
      chnAddFlagsI(sdp, CHN_TRANSMISSION_END);
      u->CR1 = cr1 & ~USART_CR1_TCIE;
 80049da:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 80049de:	2110      	movs	r1, #16
 80049e0:	4804      	ldr	r0, [pc, #16]	; (80049f4 <VectorDC+0x194>)
 80049e2:	f7fb fef5 	bl	80007d0 <chEvtBroadcastFlagsI>
 80049e6:	6037      	str	r7, [r6, #0]
 80049e8:	e7c3      	b.n	8004972 <VectorDC+0x112>
 80049ea:	bf00      	nop
 80049ec:	24000008 	.word	0x24000008
 80049f0:	08004cc8 	.word	0x08004cc8
 80049f4:	2400000c 	.word	0x2400000c
 80049f8:	24000038 	.word	0x24000038
 80049fc:	00000000 	.word	0x00000000

08004a00 <Vector104>:
/**
 * @brief   SDMMC1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(STM32_SDMMC1_HANDLER) {
 8004a00:	b508      	push	{r3, lr}

  OSAL_IRQ_PROLOGUE();
 8004a02:	480d      	ldr	r0, [pc, #52]	; (8004a38 <Vector104+0x38>)
 8004a04:	f7fb ff5c 	bl	80008c0 <_trace_isr_enter>
 */
void sdc_lld_serve_interrupt(SDCDriver *sdcp) {

  /* Disables the source but the status flags are not reset because the
     read/write functions needs to check them.*/
  sdcp->sdmmc->MASK = 0;
 8004a08:	4b0c      	ldr	r3, [pc, #48]	; (8004a3c <Vector104+0x3c>)
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	2120      	movs	r1, #32
 8004a0e:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8004a10:	63c2      	str	r2, [r0, #60]	; 0x3c
 8004a12:	f381 8811 	msr	BASEPRI, r1
  if (*trp != NULL) {
 8004a16:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004a18:	b118      	cbz	r0, 8004a22 <Vector104+0x22>
    *trp = NULL;
 8004a1a:	63da      	str	r2, [r3, #60]	; 0x3c
    tp->u.rdymsg = msg;
 8004a1c:	6242      	str	r2, [r0, #36]	; 0x24
    (void) chSchReadyI(tp);
 8004a1e:	f7fb fe97 	bl	8000750 <chSchReadyI>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f383 8811 	msr	BASEPRI, r3
#if STM32_SDC_USE_SDMMC1
  sdc_lld_serve_interrupt(&SDCD1);
#endif
#endif

  OSAL_IRQ_EPILOGUE();
 8004a28:	4803      	ldr	r0, [pc, #12]	; (8004a38 <Vector104+0x38>)
 8004a2a:	f7fb ff31 	bl	8000890 <_trace_isr_leave>
}
 8004a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  OSAL_IRQ_EPILOGUE();
 8004a32:	f7fb bde5 	b.w	8000600 <_port_irq_epilogue>
 8004a36:	bf00      	nop
 8004a38:	08004cbc 	.word	0x08004cbc
 8004a3c:	24000068 	.word	0x24000068

08004a40 <__init_ram_areas>:
}

/**
 * @brief   Performs the initialization of the various RAM areas.
 */
void __init_ram_areas(void) {
 8004a40:	b4f0      	push	{r4, r5, r6, r7}
 8004a42:	4f14      	ldr	r7, [pc, #80]	; (8004a94 <__init_ram_areas+0x54>)
      tp++;
    }

    /* Zeroing clear area.*/
    while (p < rap->no_init_area) {
      *p = 0;
 8004a44:	2600      	movs	r6, #0
void __init_ram_areas(void) {
 8004a46:	4d14      	ldr	r5, [pc, #80]	; (8004a98 <__init_ram_areas+0x58>)
 8004a48:	f107 0c70 	add.w	ip, r7, #112	; 0x70
 8004a4c:	4813      	ldr	r0, [pc, #76]	; (8004a9c <__init_ram_areas+0x5c>)
 8004a4e:	4b14      	ldr	r3, [pc, #80]	; (8004aa0 <__init_ram_areas+0x60>)
 8004a50:	4914      	ldr	r1, [pc, #80]	; (8004aa4 <__init_ram_areas+0x64>)
    while (p < rap->clear_area) {
 8004a52:	4298      	cmp	r0, r3
 8004a54:	d911      	bls.n	8004a7a <__init_ram_areas+0x3a>
 8004a56:	3904      	subs	r1, #4
 8004a58:	461a      	mov	r2, r3
      *p = *tp;
 8004a5a:	f851 4f04 	ldr.w	r4, [r1, #4]!
 8004a5e:	f842 4b04 	str.w	r4, [r2], #4
    while (p < rap->clear_area) {
 8004a62:	4290      	cmp	r0, r2
 8004a64:	d8f9      	bhi.n	8004a5a <__init_ram_areas+0x1a>
 8004a66:	1e42      	subs	r2, r0, #1
 8004a68:	1ad2      	subs	r2, r2, r3
 8004a6a:	f022 0203 	bic.w	r2, r2, #3
 8004a6e:	3204      	adds	r2, #4
 8004a70:	4413      	add	r3, r2
    while (p < rap->no_init_area) {
 8004a72:	429d      	cmp	r5, r3
 8004a74:	d903      	bls.n	8004a7e <__init_ram_areas+0x3e>
      *p = 0;
 8004a76:	f843 6b04 	str.w	r6, [r3], #4
    while (p < rap->no_init_area) {
 8004a7a:	429d      	cmp	r5, r3
 8004a7c:	d8fb      	bhi.n	8004a76 <__init_ram_areas+0x36>
      p++;
    }
    rap++;
  }
  while (rap < &ram_areas[CRT1_AREAS_NUMBER]);
 8004a7e:	4567      	cmp	r7, ip
 8004a80:	d005      	beq.n	8004a8e <__init_ram_areas+0x4e>
 8004a82:	e9d7 1304 	ldrd	r1, r3, [r7, #16]
 8004a86:	e9d7 0506 	ldrd	r0, r5, [r7, #24]
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	e7e1      	b.n	8004a52 <__init_ram_areas+0x12>
#endif
}
 8004a8e:	bcf0      	pop	{r4, r5, r6, r7}
 8004a90:	4770      	bx	lr
 8004a92:	bf00      	nop
 8004a94:	08004f24 	.word	0x08004f24
 8004a98:	24001480 	.word	0x24001480
 8004a9c:	24001480 	.word	0x24001480
 8004aa0:	24001480 	.word	0x24001480
 8004aa4:	08005130 	.word	0x08005130
	...

08004ab0 <__default_exit>:
  while (true) {
 8004ab0:	e7fe      	b.n	8004ab0 <__default_exit>
 8004ab2:	bf00      	nop
	...

08004ac0 <__late_init>:
void __late_init(void) {}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
	...

08004ad0 <__core_init>:
void __core_init(void) {
 8004ad0:	b470      	push	{r4, r5, r6}
  __ASM volatile ("dsb 0xF":::"memory");
 8004ad2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ad6:	f3bf 8f6f 	isb	sy
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8004ada:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <__core_init+0x78>)
 8004adc:	2100      	movs	r1, #0
 8004ade:	f8c3 1250 	str.w	r1, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004ae2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004ae6:	f3bf 8f6f 	isb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004aea:	695a      	ldr	r2, [r3, #20]
 8004aec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8004af0:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8004af2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004af6:	f3bf 8f6f 	isb	sy
    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8004afa:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004afe:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8004b02:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004b06:	f643 74e0 	movw	r4, #16352	; 0x3fe0
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8004b0a:	f3c1 324e 	ubfx	r2, r1, #13, #15
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004b0e:	f3c1 01c9 	ubfx	r1, r1, #3, #10
 8004b12:	0152      	lsls	r2, r2, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004b14:	ea02 0504 	and.w	r5, r2, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004b18:	4608      	mov	r0, r1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004b1a:	ea45 7680 	orr.w	r6, r5, r0, lsl #30
      } while (ways-- != 0U);
 8004b1e:	3801      	subs	r0, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004b20:	f8c3 6260 	str.w	r6, [r3, #608]	; 0x260
      } while (ways-- != 0U);
 8004b24:	1c46      	adds	r6, r0, #1
 8004b26:	d1f8      	bne.n	8004b1a <__core_init+0x4a>
    } while(sets-- != 0U);
 8004b28:	3a20      	subs	r2, #32
 8004b2a:	f112 0f20 	cmn.w	r2, #32
 8004b2e:	d1f1      	bne.n	8004b14 <__core_init+0x44>
 8004b30:	f3bf 8f4f 	dsb	sy
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8004b34:	695a      	ldr	r2, [r3, #20]
 8004b36:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004b3a:	615a      	str	r2, [r3, #20]
 8004b3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8004b40:	f3bf 8f6f 	isb	sy
}
 8004b44:	bc70      	pop	{r4, r5, r6}
 8004b46:	4770      	bx	lr
 8004b48:	e000ed00 	.word	0xe000ed00
